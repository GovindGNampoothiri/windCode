;+
;*****************************************************************************************
;
;  FUNCTION :   tplot.pro
;  PURPOSE  :   Creates (a) time series plot(s) of user defined quantities stored as
;                 pointer-heap variables in IDL.  The variables have string and
;                 integer tags associated with them allowing them to be called from
;                 multiple places.
;
;  CALLED BY:   NA
;
;  CALLS:
;               tplot_com.pro
;               printdat.pro
;               tplot_options.pro
;               time_double.pro
;               extract_tags.pro
;               ctime.pro
;               tnames.pro
;               str_element.pro
;               get_data.pro
;               data_type.pro
;               ndimen.pro
;               plot_positions.pro
;               minmax.pro
;               time_ticks.pro
;               data_cut.pro
;               timetick.pro
;               time_string.pro
;               box.pro
;               get_ylimits.pro
;               specplot.pro
;               mplot.pro
;
;  REQUIRES:  
;               Data must be stored as pointers in IDL in the correct format for this
;                 routine to work.  Try running "_GET_EXAMPLE_DAT" for a test.
;
;  INPUT:
;               DATANAMES  :  A string of space separated datanames [wildcard expansion 
;                               is supported].  If omitted, the most recent data values
;                               are used instead.  Each name MUST be associated with
;                               a TPLOT quantity [see store_data.pro and get_data.pro].
;                               This program accepts integers as well which can be 
;                               observed by running tplot_names.pro from the command
;                               line to see the names and numbers associated with
;                               each TPLOT quantity.
;
;  EXAMPLES:
;               **  => [after running _get_example_dat.pro] <=  **
;               tplot,'amp slp flx2'    ; => Plots the named quantities
;           =============================================================
;           **  =>   tplot,['amp','slp','flx2'] OR tplot,[1,2,4]   <=  **
;           =============================================================
;               tplot,'flx1',/ADD_VAR   ; => Adds the quantity to the TPLOT quantities
;               tplot                   ; => Re-plot the last plot
;               tplot,VAR_LABEL=['alt'] ; => Put Distance labels at bottom of plot
;               ;-------------------------------------------------------------------------
;               ; => To get a list of the TPLOT names, do:
;               ;-------------------------------------------------------------------------
;               tplot_names,NAMES=names   ; **  => same as names = tnames()
;               tplot,names[0:2]          ; => Plots 'amp','slp', and 'flx1'
;               ;-------------------------------------------------------------------------
;               ; => To see more examples, look at file:  _tplot_example.pro
;               ;-------------------------------------------------------------------------
;
;  KEYWORDS:  
;               WINDOW     :  Window to be used for all time plots.  If set to 
;                               -1, then the current window is used.
;               NOCOLOR    :  Set this to produce plot without color.
;               VERSION    :  Must be 1,2,3, or 4 (Default=3) [Uses a different labeling]
;               OPLOT      :  Will not erase the previous screen if set.
;               OVERPLOT   :  Will not erase the previous screen if set.
;               TITLE      :  A string to be used for the title. 
;                               [Remembered for future plots.]
;               LASTVAR    :  Set this variable to plot the previous variables 
;                               plotted in a TPLOT window.
;               ADD_VAR    :  Set this variable to add datanames to the previous plot.
;                               If set to 1, the new panels will appear at the top 
;                               (position 1) of the plot.  If set to 2, they will be 
;                               inserted directly after the first panel and so on.  Set 
;                               this to a value greater than the existing number of 
;                               panels in your tplot window to add panels to the bottom 
;                               of the plot.
;               REFDATE    :  String reference date for time series ['YYYY-MM-DD']
;               VAR_LABEL  :  String [array]; Variable(s) used for putting labels along
;                               the bottom. This allows quantities such as altitude to 
;                               be labeled.
;               OPTIONS    :  A TPLOT structure that can contain keywords for the 
;                               IDL built-in PLOT.PRO
;               T_OFFSET   :  A named variable to be returned to the user containing the
;                               Unix time offset from Jan 1st, 1970 (seconds)
;               TRANGE     :  2-Element array of Unix times specifying the time range
;               NAMES      :  The names of the tplot variables that are plotted.
;               PICK       :  If set, user can define desired panels to plot with mouse
;               NEW_TVARS  :  Returns the tplot_vars structure for the plot created.  
;                               Set aside the structure so that it may be restored 
;                               using the OLD_TVARS keyword later. This structure 
;                               includes information about various TPLOT options and 
;                               settings and can be used to recreates a plot.
;               OLD_TVARS  :  Use this to pass an existing tplot_vars structure to
;                               override the one in the tplot_com common block.
;               DATAGAP    :  **Obselete**
;               HELP       :  Set this to print the contents of the tplot_vars.OPTIONS 
;                               (user-defined options) structure.
; **Obselete**  Z_BUFF     :  2-Element array specifying the resolution of a Z-Buffered
;                               image.  The default resolution for images produced by
;                               TV.PRO is 640 x 480, which causes some pixelation when
;                               viewing the images after saved.  Thus one can increase
;                               the resolution to prevent pixelation of TV-images.
;               SPEC_RES   :  A scalar defining the number of pixels per inch for PS files
;               NOMSSG     :  If set, TPLOT will NOT print out the index and TPLOT handle
;                               of the variables being plotted
;
;   NOTES:
;               1)  Lists of examples are found in _tplot_example.pro
;               2)  Use tnames.pro to return an array of current names.
;               3)  Use "TPLOT_NAMES" to print a list of acceptable names to plot.
;               4)  Use "TPLOT_OPTIONS" for setting various global options. 
;               5)  Plot limits can be set with the "YLIM" procedure or by using:
;                       options,[TPLOT Name],'YRANGE',[y_min,y_max]
;                       options,[TPLOT Name],'YSTYLE',1
;               6)  Spectrogram limits can be set with the "ZLIM" procedure or by using:
;                       options,[TPLOT Name],'ZRANGE',[z_min,z_max] etc.
;               7)  Time limits can be set with the "TLIMIT" procedure.
;               8)  The "OPTIONS" procedure can be used to set all IDL plotting
;                       keyword parameters (i.e. psym, color, linestyle, etc) as well
;                       as some keywords that are specific to tplot 
;                       (i.e. panel_size, labels, etc.)  For example, to change the 
;                       relative panel width for the quantity 'slp', run the following:
;                       options,'slp','PANEL_SIZE',1.5
;               9)  TPLOT calls the routine "SPECPLOT" to make spectrograms and 
;                       calls "MPLOT" to make the line plots. See these routines to 
;                       determine what other options are available.
;               10) Use "GET_DATA" to retrieve the data structure (or limit structure) 
;                       associated with a TPLOT quantity.
;               11) Use "STORE_DATA" to create new TPLOT quantities to plot.
;               12) The routine "DATA_CUT" can be used to extract interpolated data.
;               13) The routine "TSAMPLE" can also be used to extract data.
;               14) Time stamping is performed with the routine "TIME_STAMP".
;               15) Use "CTIME" or "GETTIME" to obtain time values.
;               16) TPLOT variables can be stored in files using "TPLOT_SAVE" and loaded
;                       again using "TPLOT_RESTORE"
;
;  SEE ALSO:
;               tplot_names.pro
;               tplot_options.pro
;               mplot.pro
;               specplot.pro
;               get_data.pro
;               store_data.pro
;               time_stamp.pro
;               tplot_save.pro
;               tplot_restore.pro
;               tplot_com.pro
;
;   CHANGED:  1)  Davin Larson changed something...          [11/01/2002   v1.0.97]
;             2)  Re-wrote and cleaned up                    [06/10/2009   v1.1.0]
;             3)  Added keyword:  Z_BUFF                     [06/11/2009   v1.2.0]
;             4)  Added keyword:  SPEC_RES                   [06/11/2009   v1.3.0]
;             5)  Updated man page                           [06/17/2009   v1.3.1]
;             6)  Added keyword:  NOMSSG                     [09/29/2009   v1.3.2]
;             7)  Changed an optional parameter, NUM_LAB_MIN, to force the minimum
;                   number of TPLOT time labels to = 4 instead of 2
;                                                            [09/30/2009   v1.3.3]
;             8)  Changed the tick label format to be more dynamic and robust
;                   and eliminated pointer usage in the plotting part of program
;                                                            [10/01/2010   v1.4.0]
;             9)  Corrected missed print statement associated with NOMSSG keyword
;                                                            [10/07/2010   v1.4.1]
;
;   CREATED:  June, 1995
;   CREATED BY:  Davin Larson
;    LAST MODIFIED:  10/07/2010   v1.4.1
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

PRO tplot,datanames,                       $
                    WINDOW    = wind,      $
                    NOCOLOR   = nocolor,   $
                    VERSION   = ver,       $
                    OPLOT     = oplot,     $
                    OVERPLOT  = overplot,  $
                    TITLE     = title,     $
                    LASTVAR   = lastvar,   $
                    ADD_VAR   = add_var,   $
                    REFDATE   = refdate,   $
                    VAR_LABEL = var_label, $
                    OPTIONS   = opts,      $
                    T_OFFSET  = t_offset,  $
                    TRANGE    = trng,      $
                    NAMES     = names,     $
                    PICK      = pick,      $
                    NEW_TVARS = new_tvars, $
                    OLD_TVARS = old_tvars, $
                    DATAGAP   = datagap,   $
                    HELP      = help,      $
                    Z_BUFF    = z_buff,    $
                    SPEC_RES  = spec_res,  $
                    NOMSSG    = nom

;-----------------------------------------------------------------------------------------
; Set common blocks:
;-----------------------------------------------------------------------------------------
@tplot_com.pro
;-----------------------------------------------------------------------------------------
; => Override existing tplot_vars structure if necessary
;-----------------------------------------------------------------------------------------
IF KEYWORD_SET(old_tvars) THEN tplot_vars = old_tvars
  
IF KEYWORD_SET(help) THEN BEGIN
  printdat,tplot_vars.OPTIONS
  new_tvars = tplot_vars
  RETURN
ENDIF
;-----------------------------------------------------------------------------------------
; => Setup tplot_vars....
;-----------------------------------------------------------------------------------------
tplot_options,VERSION=ver,TITLE=title,VAR_LABEL=var_label,REFDATE=refdate, $
              WINDOW=wind,OPTIONS=opts
;-----------------------------------------------------------------------------------------
; => Define some defaults
;-----------------------------------------------------------------------------------------
IF KEYWORD_SET(overplot) THEN oplot = overplot
IF (N_ELEMENTS(trng) EQ 2) THEN trange = time_double(trng)

chsize = !P.CHARSIZE
IF (chsize EQ 0.) THEN chsize = 1.

def_opts= {YMARGIN:[4.,2.],XMARGIN:[12.,12.],POSITION:FLTARR(4),TITLE:'', $
           YTITLE:'',XTITLE:'',XRANGE:DBLARR(2),VERSION:3,                $
           WINDOW:-1, WSHOW:0,XSTYLE:1,CHARSIZE:chsize,NOERASE:0,         $
           OVERPLOT:0,SPEC:0                                               }

extract_tags,def_opts,tplot_vars.OPTIONS
;*****************************************************************************************
;str_element,tplot_vars,'options.VARNAMES',tplot_var
; IF N_ELEMENTS(tplot_var) eq 0 then $
;    str_element,tplot_vars,'options.VARNAMES',['NULL'],/ADD_REPLACE
;*****************************************************************************************

;-----------------------------------------------------------------------------------------
; Define the variables to be plotted:
;-----------------------------------------------------------------------------------------
IF KEYWORD_SET(pick) THEN $
  ctime,PROMPT='Click on desired panels. (button 3 to quit)',PANEL=mix
IF (N_ELEMENTS(mix) NE 0) THEN datanames = tplot_vars.SETTINGS.VARNAMES[mix]  

IF KEYWORD_SET(add_var) THEN BEGIN
  names = tnames(datanames,/ALL)
  IF (add_var EQ 1) THEN datanames = [names,tplot_vars.OPTIONS.VARNAMES] else $
  IF (add_var GT N_ELEMENTS(tplot_vars.OPTIONS.VARNAMES)) THEN BEGIN
    datanames = [tplot_vars.OPTIONS.VARNAMES,names]
  ENDIF ELSE BEGIN
    datanames = [tplot_vars.OPTIONS.VARNAMES[0:add_var-2],names,$
                 tplot_vars.OPTIONS.VARNAMES[add_var-1:*]]
  ENDELSE
ENDIF

dt   = SIZE(/TYPE,datanames)          ; => Determine if integer or string
ndim = SIZE(/N_DIMENSIONS,datanames)  ; => Determine the number of dimensions

IF (dt NE 0) THEN BEGIN
  IF (dt NE 7 OR ndim GE 1) THEN BEGIN
    dnames = STRJOIN(tnames(datanames,/ALL),' ')
  ENDIF ELSE BEGIN
    dnames = datanames
  ENDELSE
ENDIF ELSE BEGIN
  dnames = tplot_vars.OPTIONS.DATANAMES
ENDELSE
;-----------------------------------------------------------------------------------------
; => Plot last variables if desired
;-----------------------------------------------------------------------------------------
IF KEYWORD_SET(lastvar) THEN str_element,tplot_vars,'SETTINGS.LAST_VARNAMES',names  

;*****************************************************************************************
;IF KEYWORD_SET(names) then begin
;   str_element,tplot_vars,'SETTINGS.last_varnames',tplot_vars.OPTIONS.VARNAMES,$
;   	/ADD_REPLACE
;   str_element,tplot_vars,'options.VARNAMES',names,/ADD_REPLACE ;  array of names
;   str_element,tplot_vars,'SETTINGS.VARNAMES',names,/ADD_REPLACE
;endif else names = tplot_vars.OPTIONS.VARNAMES
;*****************************************************************************************
varnames = tnames(dnames,nd,INDEX=ind,/ALL)

str_element,tplot_vars,'OPTIONS.DATANAMES',dnames,/ADD_REPLACE
str_element,tplot_vars,'OPTIONS.VARNAMES',varnames,/ADD_REPLACE

IF (nd EQ 0) THEN BEGIN
  MESSAGE,'No valid variable names found to tplot! (use TPLOT_NAMES to display)',/CONTINUE,/INFORMATIONAL
  RETURN
ENDIF
;-----------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------
sizes = FLTARR(nd)
FOR i=0, nd - 1L DO BEGIN
   dum = 1.
   lim = 0
   get_data,tplot_vars.OPTIONS.VARNAMES[i],ALIM=lim
   str_element,lim,'PANEL_SIZE',VALUE=dum
   sizes[i] = dum
ENDFOR
;-----------------------------------------------------------------------------------------
; => Plot and window structure info
;-----------------------------------------------------------------------------------------
plt = {X:!x,Y:!y,Z:!z,P:!p}
;-----------------------------------------------------------------------------------------
; => Define window devices
;-----------------------------------------------------------------------------------------
IF ((!D.FLAGS AND 256) NE 0) THEN BEGIN
   current_window = !D.WINDOW > 0
   IF (def_opts.WINDOW GE 0) THEN w = def_opts.WINDOW ELSE w = current_window
   WSET,w
   IF (def_opts.WSHOW NE 0) THEN WSHOW,ICON=0
ENDIF

str_element,tplot_vars,'SETTINGS.Y',REPLICATE(!Y,nd),/ADD_REPLACE
str_element,tplot_vars,'SETTINGS.CLIP',LONARR(6,nd),/ADD_REPLACE
str_element,def_opts,'YGAP',VALUE=ygap
str_element,def_opts,'CHARSIZE',VALUE=chsize

IF KEYWORD_SET(nocolor) THEN str_element,def_opts,'NOCOLOR',nocolor,/ADD_REPLACE

nvlabs = [0.,0.,0.,1.,0.]
str_element,tplot_vars,'OPTIONS.VAR_LABEL',var_label
IF KEYWORD_SET(var_label) THEN BEGIN
  IF (data_type(var_label) EQ 7) THEN BEGIN
    IF (ndimen(var_label) EQ 0) THEN var_label = STRSPLIT(var_label,/extrac)
  ENDIF
ENDIF
nvl = N_ELEMENTS(var_label) + nvlabs(def_opts.VERSION) 
def_opts.YMARGIN += [nvl,0.]
;-----------------------------------------------------------------------------------------
; => Define window size(s) and position(s)
;-----------------------------------------------------------------------------------------
!P.MULTI = 0
pos = plot_positions(YSIZES=sizes,OPTIONS=def_opts,YGAP=ygap)
;-----------------------------------------------------------------------------------------
; => Define time range
;-----------------------------------------------------------------------------------------
IF KEYWORD_SET(trange) THEN BEGIN
  str_element,tplot_vars,'OPTIONS.TRANGE',trange,/ADD_REPLACE
ENDIF ELSE BEGIN
  str_element,tplot_vars,'OPTIONS.TRANGE',trange
ENDELSE

IF (trange[0] EQ trange[1]) THEN BEGIN
  trg = minmax(REFORM(data_quants[ind].TRANGE),MIN_VALUE=0.1)
ENDIF ELSE BEGIN
  trg = trange
ENDELSE
;-----------------------------------------------------------------------------------------
; => Define TPLOT Version definitions
;-----------------------------------------------------------------------------------------
CASE def_opts.VERSION OF
  3    : BEGIN
    str_element,def_opts,'NUM_LAB_MIN', VALUE=num_lab_min
    str_element,def_opts,'TICKINTERVAL',VALUE=tickinterval
    str_element,def_opts,'XTITLE',      VALUE=xtitle
    IF NOT KEYWORD_SET(num_lab_min) THEN BEGIN
      num_lab_min = 4. > (.035*(pos[2,0] - pos[0,0])*!D.X_SIZE/(chsize*!D.X_CH_SIZE))
    ENDIF
    time_setup = time_ticks(trg,time_offset,NUM_LAB_MIN=num_lab_min,SIDE=vtitle, $
                                            XTITLE=xtitle,TICKINTERVAL=tickinterval)
    time_scale = 1.
  END
  2    : BEGIN
    time_setup = timetick(trg[0],trg[1],0,time_offset,xtitle)
    time_scale = 1.
  END
  1    : BEGIN
    deltat = trg[1] - trg[0]
    CASE 1 OF
      (deltat LT 6d1)            : BEGIN
        time_scale = 1.
        tu         = 'Seconds'
        p          = 16
      END
      (deltat LT 36d2)           : BEGIN
        time_scale = 6d1
        tu         = 'Minutes'
        p          = 13
      END
      (deltat LE 864d2)          : BEGIN
        time_scale = 36d2
        tu         = 'Hours'
        p          = 10
      END
      (deltat LE 864d2*365.25d0) : BEGIN
        time_scale = 864d2
        tu         = 'Days'
        p          = 7
      END
      ELSE                       : BEGIN
        time_scale = 864d2*365.25d0
        tu         = 'Years'
        p          = 5
      END
    ENDCASE
    ref             = STRMID(time_string(trg[0]),0,p)
    time_offset     = time_double(ref)
    def_opts.XTITLE = 'Time (UT)  '+tu+' after '+ref
    str_element,def_opts,'XTICKNAME',REPLICATE('',22),/ADD_REPLACE
  END
  4    : BEGIN
    deltat          = trg[1] - trg[0]
    time_scale      = 1.
    tu              = 'Seconds'
    p               = 16
    ref             = STRMID(time_string(trg[0]),0,p)
    time_offset     = 0
    PRINT, ref+' '+tu, p, time_offset - trg[0]
    def_opts.XTITLE = tu+' after launch'
    str_element,def_opts,'XTICKNAME',REPLICATE('',22),/ADD_REPLACE
  END
  ELSE : BEGIN
  END
ENDCASE
;-----------------------------------------------------------------------------------------
; => Special issues for versions 2 and 3
;-----------------------------------------------------------------------------------------
IF (def_opts.VERSION EQ 2 OR def_opts.VERSION EQ 3) THEN BEGIN
  IF KEYWORD_SET(var_label) THEN BEGIN
    time   = time_setup.XTICKV + time_offset
    IF (def_opts.VERSION EQ 2) THEN vtitle = 'UT'
    FOR i=0L, N_ELEMENTS(var_label) - 1L DO BEGIN
      vtit = STRMID(var_label[i],0,3)
      get_data,var_label[i],DATA=pdata,ALIMITS=limits
      IF (data_type(pdata) NE 8) THEN BEGIN
        PRINT,var_label[i],' not valid!'
      ENDIF ELSE BEGIN
        ; => Make the tick label format dynamic
        vtlen = STRLEN(STRTRIM(STRING(FORMAT='(f20.2)',pdata.Y),2L))
        IF (MAX(vtlen,/NAN) GE 7L) THEN mform = '(g9.3)' ELSE mform = '(f8.2)'
        def   = {YTITLE:vtit,FORMAT:mform}
        extract_tags,def,limits,TAGS=['YTITLE','FORMAT']
        v     = data_cut(var_label[i],time)
        vlab  = STRCOMPRESS(STRING(v,FORMAT=def.FORMAT),/REMOVE_ALL)
        IF (def_opts.VERSION EQ 3) THEN BEGIN
          ;-------------------------------------------------------------------------------
          ; => Version 3 issues
          ;-------------------------------------------------------------------------------
          w    = WHERE(FINITE(v) EQ 0,nw)
          IF (nw GT 0) THEN vlab[w] = ''
          vtitle                = def.YTITLE + '!C' +vtitle
          time_setup.XTICKNAME  = vlab +'!C'+time_setup.XTICKNAME
          time_setup.XTITLE     = '!C'+time_setup.XTITLE
        ENDIF ELSE BEGIN
          ;-------------------------------------------------------------------------------
          ; => Version 2 issues
          ;-------------------------------------------------------------------------------
          vtitle               += '!C'+def.YTITLE
          time_setup.XTICKNAME += '!C'+vlab
          xtitle                = '!C'+xtitle
        ENDELSE
      ENDELSE
    ENDFOR
    IF (def_opts.VERSION EQ 2) THEN def_opts.XTITLE = xtitle
  ENDIF ELSE BEGIN
    IF (def_opts.VERSION EQ 2) THEN def_opts.XTITLE = 'Time (UT) '+xtitle
  ENDELSE
  extract_tags,def_opts,time_setup
ENDIF
;-----------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------
t_offset        = time_offset
def_opts.XRANGE = (trg - time_offset)/time_scale
IF KEYWORD_SET(oplot) THEN def_opts.NOERASE = 1
;*****************************************************************************************
;for i=0,nd-1 do begin
;  polyfill,(pos[*,i])([[0,1],[2,1],[2,3],[0,3]]),color=5,/norm
;endfor
;*****************************************************************************************
init_opts        = def_opts
init_opts.XSTYLE = 5
;*****************************************************************************************
;if init_opts.noerase eq 0 then erase_region,_extra=init_opts
;*****************************************************************************************
IF (init_opts.NOERASE EQ 0) THEN ERASE
init_opts.NOERASE = 1
str_element,init_opts,'YSTYLE',5,/ADD_REPLACE
;-----------------------------------------------------------------------------------------
; => Define plot axes outline area in device
;-----------------------------------------------------------------------------------------
box,init_opts

def_opts.NOERASE = 1
str_element,tplot_vars,'OPTIONS.TIMEBAR',tbnames
IF KEYWORD_SET(tbnames) THEN BEGIN
   tbnames = tnames(tbnames)
   ntb = N_ELEMENTS(tbnames)
   FOR i=0L, ntb - 1L DO BEGIN
      t = 0
      get_data,tbnames[i],DATA=d
      str_element,d,'X',t
      str_element,d,'TIME',t
      FOR j=0L, N_ELEMENTS(t) - 1 DO BEGIN
        OPLOT,(t[j] - time_offset)/time_scale*[1,1],[0,1],LINESTYLE=1
      ENDFOR
   ENDFOR  
ENDIF  
;-----------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------
str_element,/ADD_REPLACE,tplot_vars,'SETTINGS.Y', REPLICATE(!Y,nd)
str_element,/ADD_REPLACE,tplot_vars,'SETTINGS.CLIP',LONARR(6,nd)
;-----------------------------------------------------------------------------------------
; => Plot data
;-----------------------------------------------------------------------------------------
FOR i=0L, nd - 1L DO BEGIN
  name              = tplot_vars.OPTIONS.VARNAMES[i]
  ;---------------------------------------------------------------------------------------
  ; => Get the correct plot position
  ;---------------------------------------------------------------------------------------
  def_opts.POSITION = pos[*,i]
  get_data,name,ALIMITS=limits,DATA=pdata,INDEX=index,DTYPE=dtype
;  get_data,name,ALIMITS=limits,PTR=pdata,DATA=data,INDEX=index,DTYPE=dtype
;  => LBW 10/01/2010
  IF (NOT KEYWORD_SET(pdata) AND dtype NE 3) THEN BEGIN
    PRINT,'Unknown variable: ',name
  ENDIF ELSE BEGIN
    IF NOT KEYWORD_SET(nom) THEN PRINT,index,name,FORMAT='(i3," ",a)'
  ENDELSE
  IF KEYWORD_SET(pdata) THEN  nd2 = N_ELEMENTS(pdata) ELSE nd2 = 1
  IF (dtype EQ 3) THEN BEGIN
;    datastr = data
;  => LBW 10/01/2010
    datastr = pdata
    yrange  = [0.,0.]
    str_element,limits,'YRANGE',yrange
    IF (ndimen(datastr) EQ 0) THEN datastr = STRSPLIT(datastr,/EXTRACT)
    nd2 = N_ELEMENTS(datastr)
    IF (yrange[0] EQ yrange[1]) THEN get_ylimits,datastr,limits,trg
  ENDIF ELSE BEGIN
    datastr = 0
  ENDELSE
  FOR d=0L, nd2 - 1L DO BEGIN
    newlim        = def_opts
    newlim.YTITLE = name
    IF KEYWORD_SET(datastr) THEN BEGIN
      name = datastr[d]
      get_data,name,INDEX=index,DATA=pdata,ALIMITS=limits2,DTYPE=dtype
;      get_data,name,INDEX=index,DATA=data,PTR=pdata,ALIMITS=limits2,DTYPE=dtype
;  => LBW 10/01/2010
      IF NOT KEYWORD_SET(pdata) THEN BEGIN
        PRINT,'Unknown variable: ',name
      ENDIF ELSE BEGIN
        IF NOT KEYWORD_SET(nom) THEN PRINT,index,name,FORMAT='(i3,"   ",a)'
;        PRINT,index,name,FORMAT='(i3,"   ",a)'
;  => LBW 10/07/2011
      ENDELSE
    ENDIF ELSE BEGIN
      limits2 = 0
    ENDELSE
    IF (dtype EQ 1) THEN BEGIN
      tshift = 0d0
;      str_element,data,'TSHIFT',VALUE=tshift
;      data.X = (*pdata.X - (time_offset - tshift))/time_scale
;  => LBW 10/01/2010
      str_element,pdata,'TSHIFT',VALUE=tshift
      ttt_x   = (pdata.X - (time_offset - tshift))/time_scale
      pdata.X = ttt_x
    ENDIF ELSE BEGIN
      pdata = {X:DINDGEN(2),Y:FINDGEN(2)}
;  => LBW 10/01/2010
    ENDELSE
;    extract_tags,newlim,data,EXCEPT = ['X','Y','DY','V']
;  => LBW 10/01/2010
    extract_tags,newlim,pdata,EXCEPT = ['X','Y','DY','V']
    extract_tags,newlim,limits2
    extract_tags,newlim,ylimits
    extract_tags,newlim,limits
    newlim.OVERPLOT = d NE 0
    IF KEYWORD_SET(overplot) THEN newlim.OVERPLOT = 1   ;<- *** LINE ADDED **
    IF (i NE (nd-1L)) THEN newlim.XTITLE = ''
    IF (i NE (nd-1L)) THEN newlim.XTICKNAME = ' '
    IF (newlim.SPEC NE 0) THEN routine = 'specplot' ELSE routine = 'mplot'
    str_element,newlim,'TPLOT_ROUTINE',VALUE=routine
    ;-------------------------------------------------------------------------------------
    ; => Set PS resolution if desired
    ;-------------------------------------------------------------------------------------
    IF KEYWORD_SET(spec_res) THEN BEGIN
      IF (routine EQ 'specplot') THEN BEGIN
        default_res  = 60.              ; => Default Resolution of PS files
        s_resolution = FLOAT(spec_res)  ; => Desired resolution
        nsbuff       = N_ELEMENTS(s_resolution)
        IF (nsbuff NE 1L) THEN s_resolution = default_res
        ; => Get original Device settings before setting Z-Buffer
        oldDevice   = !D.NAME
        IF (STRLOWCASE(oldDevice) NE 'ps') THEN BEGIN
          CALL_PROCEDURE,routine,DATA=pdata,LIMITS=newlim
;  => LBW 10/01/2010
        ENDIF ELSE BEGIN
          CALL_PROCEDURE,routine,DATA=pdata,LIMITS=newlim,PS_RESOLUTION=s_resolution
;  => LBW 10/01/2010
        ENDELSE
      ENDIF ELSE BEGIN
        CALL_PROCEDURE,routine,DATA=pdata,LIMITS=newlim
;  => LBW 10/01/2010
      ENDELSE
    ENDIF ELSE BEGIN
      CALL_PROCEDURE,routine,DATA=pdata,LIMITS=newlim
;  => LBW 10/01/2010
    ENDELSE
;stop
  ENDFOR
  def_opts.NOERASE              = 1
  def_opts.TITLE                = ''
  tplot_vars.SETTINGS.Y[i]      = !Y
  tplot_vars.SETTINGS.CLIP[*,i] = !P.CLIP
ENDFOR
;-----------------------------------------------------------------------------------------
; => Reset Device settings if Z-Buffer is used  [rough at the moment]
;-----------------------------------------------------------------------------------------
IF KEYWORD_SET(z_buff) THEN BEGIN
  z_image = TVRD(/TRUE)
  SET_PLOT, oldDevice                  ; => Return to original device
  IF KEYWORD_SET(oldDecomposed) THEN BEGIN
    DEVICE,DECOMPOSED=oldDecomposed
  ENDIF
  IF (STRLOWCASE(oldDevice) EQ 'x') THEN BEGIN
    WINDOW,XSIZE=(SIZE(z_image))[2], YSIZE=(SIZE(z_image))[3]
  ENDIF
  TV,z_image,/TRUE
ENDIF  
;-----------------------------------------------------------------------------------------
; => Finish var_labels
;-----------------------------------------------------------------------------------------
str_element,tplot_vars,'SETTINGS.VARNAMES',varnames,/ADD_REPLACE
str_element,tplot_vars,'SETTINGS.D',!D,/ADD_REPLACE
str_element,tplot_vars,'SETTINGS.P',!P,/ADD_REPLACE
str_element,tplot_vars,'SETTINGS.X',!X,/ADD_REPLACE
str_element,tplot_vars,'SETTINGS.TRANGE_CUR',(!X.RANGE * time_scale) + time_offset

IF KEYWORD_SET(vtitle) THEN BEGIN
  xspace = chsize * !D.X_CH_SIZE / !D.X_SIZE
  yspace = chsize * !D.Y_CH_SIZE / !D.Y_SIZE
  xpos = pos[0,(nd-1L)] - (def_opts.XMARGIN[0] - 1) * xspace 
  ypos = pos[1,(nd-1L)] - 1.5 * yspace 
  XYOUTS,xpos,ypos,vtitle,/NORM,CHARSIZE=chsize
ENDIF
;-----------------------------------------------------------------------------------------
; => Restore system variable defaults
;-----------------------------------------------------------------------------------------
time_stamp,CHARSIZE=chsize*.5

IF ((!D.FLAGS AND 256) NE 0) THEN BEGIN    ; windowing devices
  str_element,tplot_vars,'SETTINGS.window',!D.WINDOW,/ADD_REPLACE
  IF (def_opts.WINDOW GE 0) THEN WSET,current_window
ENDIF
!X = plt.X
!Y = plt.Y
!Z = plt.Z
!P = plt.P

str_element,tplot_vars,'SETTINGS.TIME_SCALE',time_scale,/ADD_REPLACE
str_element,tplot_vars,'SETTINGS.TIME_OFFSET',time_offset,/ADD_REPLACE
new_tvars = tplot_vars
RETURN
END

