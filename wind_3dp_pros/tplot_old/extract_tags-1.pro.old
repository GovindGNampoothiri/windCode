;+
;*****************************************************************************************
;
;  FUNCTION :   extract_tags.pro
;  PURPOSE  :   Extracts the structure tag values from an input IDL structure and puts
;                 the tag and associated value into a new structure.  This procedure
;                 is very useful for creating a structure that can be passed onto the
;                 PLOT or OPLOT subroutines using the _EXTRA keyword.  If no tag
;                 keywords are included then all tag elements of oldstruct are added
;                 to newstruct.  The mode keyword PRESERVE is used to prevent the
;                 overwritting of an existing keyword.
;
;  CALLED BY:   
;               NA
;
;  CALLS:
;               array_union.pro
;               str_element.pro
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               NEWSTRUCT    :  New IDL structure to be created or added to
;               OLDSTRUCT    :  Old IDL structure to extract data from
;
;  EXAMPLES:    
;               
;
;  KEYWORDS:    
;               OPLOT        :  If set, a dummy string array of keywords used by the
;                                 IDL built-in OPLOT.PRO are used in place of the
;                                 TAGS keyword
;               PLOT         :  If set, a dummy string array of keywords used by the
;                                 IDL built-in PLOT.PRO are used in place of the
;                                 TAGS keyword
;               CONTOUR      :  If set, a dummy string array of keywords used by the
;                                 IDL built-in CONTOUR.PRO are used in place of the
;                                 TAGS keyword
;               AXIS         :  If set, a dummy string array of keywords used by the
;                                 IDL built-in AXIS.PRO are used in place of the
;                                 TAGS keyword
;               XYOUTS       :  If set, a dummy string array of keywords used by the
;                                 IDL built-in XYOUTS.PRO are used in place of the
;                                 TAGS keyword
;               TAGS         :  [K]-Element string array of structure tags to be
;                                 taken from OLDSTRUCT and put into NEWSTRUCT
;               NTAGS        :  
;               REPLACE      :  
;               EXCEPT_TAGS  :  [J]-Element string array of structure tags NOT to be
;                                 taken from OLDSTRUCT and put into NEWSTRUCT
;               PRESERVE     :  If set, prevents the overwriting of any existing,
;                                 non-null structure tags.  This will still add
;                                 structure tags that were not present in NEWSTRUCT
;
;   CHANGED:  1)  Davin Larson created                       [??/??/????   v1.0.0]
;             2)  Davin Larson changed something...          [04/17/2002   v1.0.21]
;             3)  Re-wrote and cleaned up                    [08/16/2011   v1.1.0]
;
;   NOTES:      
;               1)  If no keywords are set, then ALL structure tags and associated
;                     values are taken from OLDSTRUCT and put into NEWSTRUCT
;               2)  If PRESERVE is set and a structure tag exists in NEWSTRUCT
;                     but has "" or 0-values then they will be replaced by the values
;                     in OLDSTRUCT
;               3)  YTYPE is a version 3. keyword and not found in the version 4 docs
;
;   CREATED:  ??/??/????
;   CREATED BY:  Davin Larson
;    LAST MODIFIED:  08/16/2011   v1.1.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

PRO extract_tags,newstruct,oldstruct,OPLOT=oplot,PLOT=plot,CONTOUR=contr,AXIS=axis, $
                 XYOUTS=xyouts,TAGS=tags,NTAGS=ntags,REPLACE=replace,               $
                 EXCEPT_TAGS=except_tags,PRESERVE=preserve

;-----------------------------------------------------------------------------------------
; => Check input
;-----------------------------------------------------------------------------------------
IF (SIZE(oldstruct,/TYPE) NE 8) THEN RETURN

;-----------------------------------------------------------------------------------------
; => Check for IDL plotting routine specific keywords
;-----------------------------------------------------------------------------------------
IF KEYWORD_SET(oplot) THEN BEGIN
  ; => Use only OPLOT.PRO keywords
  tags = ['clip','color','linestyle','max_value','min_value','noclip',$
          'nsum','polar','psym','subtitle','symsize','t3d','thick','zvalue']
ENDIF

IF KEYWORD_SET(plot) THEN BEGIN
  ; => Use only PLOT.PRO keywords
  tags = ['background','charsize','charthick','clip','color','data','device',$
          'font','linestyle','max_value','min_value','noclip','nodata',      $
          'noerase','normal','nsum','polar','position','psym','subtitle',    $
          'symsize','t3d','thick','ticklen','title','xcharsize','xgridstyle',$
          'xlog','xmargin','xminor','xrange','xstyle','xthick','xtickformat',$
          'xticklen','xtickname','xticks','xtickv','xtick_get','xtitle',     $
          'xtype','ycharsize','ygridstyle','ylog','ymargin','yminor',        $
          'ynozero','yrange','ystyle','ythick','ytickformat','yticklen',     $
          'ytickname','yticks','ytickv','ytick_get','ytitle','ytype',        $
          'zcharsize','zgridstyle','zlog','zmargin','zminor','zrange',       $
          'zstyle','zthick','ztickformat','zticklen','ztickname','zticks',   $
          'ztickv','ztick_get','ztitle','zvalue','isotropic']
ENDIF

IF KEYWORD_SET(contr) THEN BEGIN
  ; => Use only CONTOUR.PRO keywords
  tags = ['background','c_annotation','c_charsize','c_colors','c_labels',    $
          'c_linestyle','c_orientation','c_spacing','c_thick','cell_fill',   $
          'closed','charsize','charthick','clip','color','data','device',    $
          'downhill','fill','follow','font','levels','max_value','min_value',$
          'nlevels','noclip','nodata','noerase','normal','overplot',         $
          'path_filename','path_info','path_xy','position','subtitle',       $
          't3d','thick','ticklen','title','triangulation','xcharsize',       $
          'xgridstyle','xlog','xmargin','xminor','xrange','xstyle','xthick', $
          'xtickformat','xticklen','xtickname','xticks','xtickv','xtick_get',$
          'xtitle','xtype','ycharsize','ygridstyle','ylog','ymargin',        $
          'yminor','ynozero','yrange','ystyle','ythick','ytickformat',       $
          'yticklen','ytickname','yticks','ytickv','ytick_get','ytitle',     $
          'ytype','zcharsize','zgridstyle','zaxis','zmargin','zminor',       $
          'zrange','zstyle','zthick','ztickformat','zticklen','ztickname',   $
          'zticks','ztickv','ztick_get','ztitle','zvalue','isotropic']
ENDIF

IF KEYWORD_SET(axis) THEN BEGIN
  ; => Use only AXIS.PRO keywords
  tags = ['charsize','charthick','color','data','device','font','nodata',    $
          'noerase','normal','save','subtitle','t3d','ticklen','zaxis',      $
          'xcharsize','xgridstyle','xlog','xmargin','xminor','xrange',       $
          'xstyle','xthick','xtickformat','xticklen','xtickname','xticks',   $
          'xtickv','xtick_get','xtitle','xtype','yaxis','ycharsize',         $
          'ygridstyle','ylog','ymargin','yminor','ynozero','yrange',         $
          'ystyle','ythick','ytickformat','yticklen','ytickname','yticks',   $
          'ytickv','ytick_get','ytitle','ytype','zaxis','zcharsize',         $
          'zgridstyle','zmargin','zminor','zrange','zstyle','zthick',        $
          'ztickformat','zticklen','ztickname','zticks','ztickv',            $
          'ztick_get','ztitle','zvalue']
ENDIF

IF KEYWORD_SET(xyouts) THEN BEGIN
  ; => Use only XYOUTS.PRO keywords
   tags = ['alignment','charsize','charthick','text_axes','width','clip',    $
          'color','data','device','font','noclip','normal','orientation',    $
          't3d','z']
ENDIF
;-----------------------------------------------------------------------------------------
; => Check for keyword exemptions
;-----------------------------------------------------------------------------------------
IF KEYWORD_SET(except_tags) THEN BEGIN
   tags = TAG_NAMES(oldstruct)
   ind = array_union(tags,STRUPCASE(except_tags))
   w = WHERE(ind LT 0,count)
   IF (count NE 0) THEN tags = tags[w] ELSE tags = 0
ENDIF

IF (N_ELEMENTS(tags) EQ 0) THEN tags = TAG_NAMES(oldstruct)
n = (SIZE(tags,/DIMENSIONS))[0]
;n = dimen1(tags)

IF NOT KEYWORD_SET(ntags) THEN ntags = tags
;-----------------------------------------------------------------------------------------
; => Check for keyword preservations
;-----------------------------------------------------------------------------------------
IF (KEYWORD_SET(preserve) EQ 0) THEN BEGIN
  FOR i=0L, n - 1L DO BEGIN
    str_element,oldstruct,tags[i],value,SUCCESS=ok
    IF (ok) THEN str_element,newstruct,ntags[i],value,/ADD_REPLACE
  ENDFOR
  RETURN
ENDIF
;-----------------------------------------------------------------------------------------
; => Add structure tags to new structure
;-----------------------------------------------------------------------------------------
FOR i=0L, n - 1L DO BEGIN
;  index = find_str_element(oldstruct,tags[i])
  str_element,oldstruct,tags[i],dummy,INDEX=index
  IF (index GE 0) THEN BEGIN
    str_element,newstruct,tags[i],dummy,INDEX=index2
;    IF (find_str_element(newstruct,tags[i]) LT 0) THEN BEGIN
    IF (index2 LT 0) THEN BEGIN
      ;  if not duplicate => then add tag
      str_element,newstruct,tags[i],oldstruct.(index),/ADD_REPLACE
    ENDIF ELSE BEGIN
      ;  if duplicate tag
      IF (SIZE(newstruct.(index),/TYPE) EQ 7) THEN BEGIN
        ;if element is a string, 
        IF (newstruct.(index) EQ "") THEN BEGIN
          ;  replace if null
          str_element,newstruct,tags[i],oldstruct.(index),/ADD_REPLACE
        ENDIF ELSE BEGIN
          IF (TOTAL(newstruct.(index)) EQ 0) THEN BEGIN
            ;  if element numerical => replace if null
            str_element,newstruct,tags[i],oldstruct.(index),/ADD_REPLACE
          ENDIF
        ENDELSE
      ENDIF
    ENDELSE 
  ENDIF
ENDFOR

RETURN
END



