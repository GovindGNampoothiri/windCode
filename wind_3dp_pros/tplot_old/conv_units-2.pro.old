;+
;*****************************************************************************************
;
;  FUNCTION :   conv_units.pro
;  PURPOSE  :   This is a wrapping program for the unit conversion programs for Wind
;                 3DP particle distribution structures.
;
;  CALLED BY: 
;               plot3d.pro
;               add_df2dp.pro
;               mom_sum.pro
;               moments_3d.pro
;
;  CALLS:
;               convert_esa_units.pro
;               convert_ph_units.pro
;               convert_sf_units.pro
;               convert_so_units.pro
;               convert_sst_units.pro
;               thm_convert_esa_units_lbwiii.pro
;
;  REQUIRES:    
;               1)  THEMIS TDAS IDL libraries or UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               DATA               :  [N]-element array [structure] of particle velocity
;                                       distributions THEMIS ESA or Wind/3DP in the form
;                                       of IDL data structures
;                                       [See:  get_??.pro for Wind]
;                                       [See:  thm_part_dist_array.pro for THEMIS]
;               UNITS              :  Scalar [string] defining to which the units to
;                                       convert.  The following inputs are allowed:
;                                         'compressed'  ;  # of counts
;                                         'counts'      ;  # of counts
;                                         'rate'        ;  [s^(-1)]
;                                         'crate'       ;  [s^(-1)] scaled rate
;                                         'eflux'       ;  energy flux
;                                         'flux'        ;  number flux
;                                         'df'          ;  phase space density
;
;  EXAMPLES:    NA
;
;  KEYWORDS:  
;               SCALE              :  Set to a named variable to return the conversion
;                                       factor array used to scale the data
;               FRACTIONAL_COUNTS  :  If set, routine will allow for counts to be
;                                       rounded to nearest whole count.  Set this if
;                                       DATA is a copy being used to estimate the
;                                       one-count level.
;                                       [Default = FALSE]
;
;   CHANGED:  1)  Davin Larson changed something...
;                                                                  [??/??/????   v1.0.?]
;             2)  Re-wrote and cleaned up
;                                                                  [06/22/2009   v1.1.0]
;             3)  Fixed syntax issue if data is an array of structures
;                                                                  [08/05/2009   v1.1.1]
;             4)  Added keyword:  FRACTIONAL_COUNTS and
;                   cleaned up Man. page and added some comments
;                                                                  [09/12/2014   v1.2.0]
;
;   CREATED:  ??/??/????
;   CREATED BY:  Davin Larson
;    LAST MODIFIED:  09/12/2014   v1.2.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

FUNCTION conv_units,data,units,SCALE=scale,FRACTIONAL_COUNTS=fractional_counts

;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
new_data = data
proc     = data[0].UNITS_PROCEDURE
IF NOT KEYWORD_SET(units) THEN units = 'Eflux'
;;----------------------------------------------------------------------------------------
;;  Convert units
;;----------------------------------------------------------------------------------------
;CALL_PROCEDURE,proc,new_data,units,SCALE=scale
;;    --> LBW III  09/12/2014   v1.3.0
test           = (STRLOWCASE(proc[0]) EQ 'thm_convert_esa_units_lbwiii')
IF (test) THEN BEGIN
  ;;  This routine has an extra keyword not shared by the convert_*_units.pro routines
  CALL_PROCEDURE,proc,new_data,units,SCALE=scale,FRACTIONAL_COUNTS=fractional_counts
ENDIF ELSE BEGIN
  CALL_PROCEDURE,proc,new_data,units,SCALE=scale
ENDELSE
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN,new_data
END

