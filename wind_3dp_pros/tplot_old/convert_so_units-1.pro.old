;+
;*****************************************************************************************
;
;  FUNCTION :   convert_so_units.pro
;  PURPOSE  :   Converts units of data from the SST-Open instrument of the Wind/3DP
;                 particle detector suite.
;
;  CALLED BY: 
;               conv_units.pro
;
;  CALLS:
;               convert_flux_units.pro
;
;  REQUIRES:    NA
;
;  INPUT:
;               DATA      :  A 3DP data structure returned by get_so.pro
;               UNITS     :  A scalar string defining the units to convert to
;                              One of the following are allowed:
;                              1)  'counts'  ; => # per data bin per energy bin
;                              2)  'rate'    ; => (s)
;                              3)  'crate'   ; => (s) scaled rate
;                              4)  'eflux'   ; => energy flux
;                              5)  'flux'    ; => number flux 
;                              6)  'df'      ; => distribution function units
;
;  EXAMPLES:    NA
;
;  KEYWORDS:  
;               SCALE     :  Set to a named variable to return the conversion factor
;                              array used to scale the data
;
;   CHANGED:  1)  Davin Larson changed something...       [??/??/????   v1.0.?]
;             2)  Re-wrote and cleaned up                 [06/22/2009   v1.1.0]
;             3)  Fixed syntax issue if data is an array of structures
;                                                         [08/05/2009   v1.1.1]
;
;   CREATED:  ??/??/????
;   CREATED BY:  Davin Larson
;    LAST MODIFIED:  08/05/2009   v1.1.1
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

PRO convert_so_units, data, units, SCALE=scale

;-----------------------------------------------------------------------------------------
; => Define default parameters and check input format
;-----------------------------------------------------------------------------------------
IF (N_PARAMS() EQ 0) THEN RETURN
IF (STRUPCASE(units) EQ STRUPCASE(data[0].UNITS_NAME)) THEN RETURN

fluxindx = WHERE(['FLUX','EFLUX','DF'] EQ STRUPCASE(data[0].UNITS_NAME),fluxcnt)
IF (fluxcnt GT 0) THEN BEGIN
  convert_flux_units,data,units,SCALE=scale
  RETURN
ENDIF
;-----------------------------------------------------------------------------------------
; => Define relevant parameters
;-----------------------------------------------------------------------------------------
nstr     = N_ELEMENTS(data)
n_e      = data[0].NENERGY           ; => Number of energies          integer
nbins    = data[0].NBINS             ; => Number of bins              integer
mass     = data[0].MASS              ; => Particle mass [eV/(km/sec)^2] double
energy   = data.ENERGY               ; => (eV)                        [n_e,nbins]
denergy  = data.DENERGY              ; => Differential energy (eV)
; =>     Geometric factor            [n_e,nbins,nstr]
gf       = data.GF * data[0].GEOMFACTOR
dt       = data.DT                   ; => Integration time            [n_e,nbins]
deadtime = data.DEADTIME
rate     = data.DATA/dt

dtc      = (1d0 - rate*deadtime) > 1d-1
;-----------------------------------------------------------------------------------------
; => Determine type of units to convert to
;-----------------------------------------------------------------------------------------
scale = 0
CASE STRUPCASE(units) OF 
  'COUNTS' :  scale = 1.
  'RATE'   :  scale = 1 / dt
  'CRATE'  :  scale = 1 /dtc / dt
  'EFLUX'  :  scale = 1 /dtc / (dt *gf * denergy) * energy
  'FLUX'   :  scale = 1 /dtc / (dt * gf * denergy)
  'DF'     :  scale = 1 /dtc / (dt * gf * denergy * energy *(2./mass/mass*1e5) )
  ELSE: BEGIN
    MESSAGE,'Undefined units: ',units
    RETURN
  END
ENDCASE
;-----------------------------------------------------------------------------------------
; => Determine type of units to convert from
;-----------------------------------------------------------------------------------------
CASE STRUPCASE(data[0].UNITS_NAME) OF 
  'COUNTS' :  scale *= 1.
;  'RATE'   :  scale = scale * dt
;  'CRATE'  :  scale = scale * dtc * dt
;  'EFLUX'  :  scale = scale * dtc * (dt * gf)
;  'FLUX'   :  scale = scale * dtc * (dt * gf * energy)
;  'DF'     :  scale = scale * dtc * (dt * gf * energy^2 * 2./mass/mass*1e5)
  ELSE: BEGIN
    MESSAGE,'Unknown starting units: ',data[0].UNITS_NAME
    RETURN
  END
ENDCASE

data.UNITS_NAME = units
tags = TAG_NAMES(data)
gtag = WHERE(tags EQ 'DDATA',gtg)
IF (gtg GT 0L) THEN data.DDATA *= scale  ; => Scale d(data) too!
data.DATA *= scale

RETURN
END
