;+
;*****************************************************************************************
;
;  FUNCTION :   temp_calc_e2b_ratio_freq.pro
;  PURPOSE  :   This routine calculates (∂E x ∂B) and (∂E x ∂B)/(c |∂B|^2) in
;                 time- and frequency-space (i.e., performs an FFT prior to calculation)
;                 and then returns the result in both frequency- and time-space.
;
;  CALLED BY:   
;               
;
;  CALLS:
;               is_a_number.pro
;               format_2d_vec.pro
;               sample_rate.pro
;               vector_bandpass.pro
;               mag__vec.pro
;               my_crossp_2.pro
;               time_and_freq_averaged_fft.pro
;               power_of_2.pro
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               TT       :  [N]-Element [double] array of Unix time stamps corresponding
;                             to each vector in EF and BF
;               EF       :  [N,3]-Element [float/double] array of electric field [mV/m]
;                             vectors in some input coordinate basis (ICB)
;               BF       :  [N,3]-Element [float/double] array of magnetic field [nT]
;                             vectors in the same ICB
;
;  EXAMPLES:    
;               test   = temp_calc_e2b_ratio_freq(tt,ef,bf,WIDTH=wd,/RM_EDGE,      $
;                                                 FLOW=flow,FHIGH=fhigh,NFFT=nfft, $
;                                                 NSHFT=nshft)
;
;  KEYWORDS:    
;               WIDTH    :  Scalar [integer/long] defining the number of points to use in
;                             the median filter for smoothing |∂E/(∂B c)| on output
;                             [Default = 128, or (WIDTH < N/8) {if WIDTH > N/10}]
;               RM_EDGE  :  If set, routine will attempt to remove the edge effects
;                              introduced from the calculations performed using FFTs
;                              on datasets that are not purely periodic
;                             [Default = FALSE]
;               SRATE    :  Scalar [float/double] defining the sample rate of both EF
;                              and BF in samples per second [sps]
;                             [Default = calculates sample rate from TT input]
;               FLOW     :  Scalar [float/double] defining the low frequency [Hz]
;                             cutoff to use for the frequency-space analysis
;                             [Default = 0.0]
;               FHIGH    :  Scalar [float/double] defining the high frequency [Hz]
;                             cutoff to use for the Poynting flux analysis
;                             [Default = sample rate of input]
;               NFFT     :  Scalar [integer/long] defining the # of frequency bins in
;                             each time-windowed FFT
;                             [Default = 128, or (NFFT < N/8) {if NFFT > N/10}]
;               NSHFT    :  Scalar [integer/long] defining the # of points to shift
;                             from the start of the previous time-windowed FFT
;                             [Default = 32, or (NFFT/4 < NSHFT) {if NSHFT > NFFT}]
;
;   CHANGED:  1)  Continued to write routine
;                                                                   [07/03/2015   v1.0.0]
;             2)  Continued to write routine
;                                                                   [07/03/2015   v1.0.0]
;             3)  Continued to write routine
;                                                                   [07/08/2015   v1.0.0]
;             4)  Continued to write routine
;                                                                   [07/08/2015   v1.0.0]
;             5)  Continued to write routine
;                                                                   [07/10/2015   v1.0.0]
;
;   NOTES:      
;               1)  # of vectors must satisfy:  N ≥ 128
;
;  REFERENCES:  
;               1)  Harris, F.J. "On the Use of Windows for Harmonic Analysis with the
;                      Discrete Fourier Transform," Proc. IEEE Vol. 66, No. 1,
;                      pp. 51-83, (1978).
;               2)  Paschmann, G. and P.W. Daly "Analysis Methods for Multi-Spacecraft
;                      Data," ISSI Scientific Report, Noordwijk, The Netherlands.,
;                      Int. Space Sci. Inst, (1998).
;               3)  Torrence, C. and G.P. Compo "A Practical Guide to Wavelet Analysis,"
;                      Bull. Amer. Meteor. Soc. 79, pp. 61-78, (1998).
;               4)  Donnelly, D. and B. Rust "The Fast Fourier Transform for
;                      Experimentalists, Part I:  Concepts," Comput. Sci. & Eng. 7(2),
;                      pp. 80-88, (2005).
;               5)  Donnelly, D. and B. Rust "The Fast Fourier Transform for
;                      Experimentalists, Part II:  Convolutions," Comput. Sci.
;                      & Eng. 7(4), pp. 92-95, (2005).
;               6)  Rust, B. and D. Donnelly "The Fast Fourier Transform for
;                      Experimentalists, Part III:  Classical Spectral Analysis,"
;                      Comput. Sci. & Eng. 7(5), pp. 74-78, (2005).
;               7)  Rust, B. and D. Donnelly "The Fast Fourier Transform for
;                      Experimentalists, Part IV:  Autoregressive Spectral Analysis,"
;                      Comput. Sci. & Eng. 7(6), pp. 85-90, (2005).
;               8)  Donnelly, D. "The Fast Fourier Transform for Experimentalists,
;                      Part V:  Filters," Comput. Sci. & Eng. 8(1), pp. 92-95, (2006).
;
;   CREATED:  07/01/2015
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  07/10/2015   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

FUNCTION temp_calc_e2b_ratio_freq,tt,ef,bf,WIDTH=width,RM_EDGE=rm_edge,SRATE=srate,$
                                  FLOW=flow,FHIGH=fhigh,NFFT=nfft,NSHFT=nshft

;;  Let IDL know that the following are functions
FORWARD_FUNCTION is_a_number, format_2d_vec, my_crossp_2, power_of_2, mag__vec, $
                 vector_bandpass, time_and_freq_averaged_fft
;;----------------------------------------------------------------------------------------
;;  Define some constants and dummy variables
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
c              = 2.9979245800d+08     ;;  Speed of light in vacuum [m/s]
epo            = 8.8541878170d-12     ;;  Permittivity of free space [F/m]
muo            = !DPI*4.00000d-07     ;;  Permeability of free space [N/A^2 or H/m]
def_wd         = 128L                 ;;  Default smoothing width
def_nfft       = 128L                 ;;  Default # of points in each time-windowed FFT
def_shft       = 32L                  ;;  Default # of points to shift from start of previous time-windowed FFT
min_n          = 128L                 ;;  Min. # of vectors allowed

;;  Define the output structure tag prefixes
eb_str         = ['E','B']
vm_str         = ['VEC','MAG'+['','_SM']]
time_str       = 'TIMES'
EBpref_str     = eb_str+'F_'
ExBprf_str     = eb_str[0]+'X'+eb_str[1]+'_'
ExB_B2_str     = ExBprf_str[0]+'B2_'
E2Bprf_str     = eb_str[0]+'2'+eb_str[1]+'_'
rat_midx_str   = 'RAT_'
t2t_str        = 'T_SERIES'
twfft_str      = 'TW_FFT'
t2f_str        = 'T2F'
t2f2t_str      = 'T2F2T'
ExB_B2_r_str   = ExB_B2_str[0]+rat_midx_str[0]
E2B_rat_str    = E2Bprf_str[0]+rat_midx_str[0]
;;  FFT structure tags
fft_tags       = ['FR_FFT_BINS',[EBpref_str,ExBprf_str[0],ExB_B2_r_str[0],$
                  E2B_rat_str[0]]+t2f_str[0] ]
;;  Time-Windowed-FFTs structure tags
tw_fft_tags    = [time_str[0],'FR_FFT_BINS',[EBpref_str,ExBprf_str[0],ExB_B2_r_str[0],$
                  E2B_rat_str[0]]+twfft_str[0]]
;;  Time series structure tags
t2t_tags       = [time_str[0],[ExBprf_str[0],ExB_B2_r_str[0],E2B_rat_str[0]]+t2t_str[0]]
;;  Time-to-FFT-to-Time series structure tags
t2f2t_tags     = [time_str[0],ExBprf_str[0],ExB_B2_r_str[0],E2B_rat_str[0]]+t2f2t_str[0]
;;  Output structure, structure tags
out_tags       = [t2t_str[0],'T_2_TWFFT','T_2_FFT','T_2_FFT_2_T']

;;  Conversion factors
e_fac          = 1d-3                 ;;  mV --> V
b_fac          = 1d-9                 ;;  nT --> T
ebfac          = e_fac[0]*b_fac[0]    ;;  mV --> V, nT --> T
;;  Error messages
noinput_mssg   = 'User must supply TT [N], EF [N,3], and BF [N,3] arrays...'
badinput_mssg  = 'EF and BF must be [numerical] arrays of vectors...'
badinfor_mssg  = 'EF and BF must be [N,3]-Element arrays of vectors and TT must be an [N]-element array of Unix times...'
badinnum_mssg  = 'Both EF and BF must have the same number of arrays of vectors...'
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
IF (N_PARAMS() NE 3) THEN BEGIN
  ;;  No input supplied
  MESSAGE,noinput_mssg[0],/INFORMATIONAL,/CONTINUE
  RETURN,0b
ENDIF
;;  Input supplied --> check format
test           = ((is_a_number(ef,/NOMSSG) EQ 0) OR (N_ELEMENTS(ef) EQ 0)) OR $
                 ((is_a_number(bf,/NOMSSG) EQ 0) OR (N_ELEMENTS(bf) EQ 0)) OR $
                 ((is_a_number(tt,/NOMSSG) EQ 0) OR (N_ELEMENTS(tt) EQ 0))
IF (test[0]) THEN BEGIN
  ;;  bad input
  MESSAGE,badinput_mssg[0],/INFORMATIONAL,/CONTINUE
  RETURN,0b
ENDIF
;;  Make sure inputs are [N,3]-Element arrays
tt1d           = REFORM(tt)
ef2d           = format_2d_vec(ef)
bf2d           = format_2d_vec(bf)
test           = ((N_ELEMENTS(ef2d) LT 3) OR (N_ELEMENTS(bf2d) LT 3))
IF (test[0]) THEN BEGIN
  ;;  bad input format
  MESSAGE,badinfor_mssg[0],/INFORMATIONAL,/CONTINUE
  RETURN,0b
ENDIF
;;  Check number of elements
n_e            = N_ELEMENTS(ef2d[*,0])         ;;  Input # of vectors
test           = (N_ELEMENTS(ef2d) NE N_ELEMENTS(bf2d)) OR $
                 (n_e[0] NE N_ELEMENTS(tt1d)) OR (n_e[0] LT min_n[0])
IF (test[0]) THEN BEGIN
  ;;  bad input format:  # of elements
  MESSAGE,badinnum_mssg[0],/INFORMATIONAL,/CONTINUE
  RETURN,0b
ENDIF
;;  Convert to standard SI units
ef2d          *= e_fac[0]                      ;;  mV --> V
bf2d          *= b_fac[0]                      ;;  nT --> T
;;----------------------------------------------------------------------------------------
;;  Check keywords
;;----------------------------------------------------------------------------------------
;;  Check WIDTH
test           = ((is_a_number(width,/NOMSSG) EQ 0) OR (N_ELEMENTS(width) EQ 0))
IF (test[0]) THEN wd = def_wd[0] ELSE wd = (LONG(width[0]))[0]
;;  Make sure it's not too long
test           = (wd[0] GT n_e[0]/10L)
IF (test[0]) THEN wd = (wd[0] < (n_e[0]/8L)) > 3L
;;  Check RM_EDGE
test           = (~KEYWORD_SET(rm_edge) AND (N_ELEMENTS(rm_edge) NE 0)) OR $
                 (N_ELEMENTS(rm_edge) EQ 0)
IF (test[0]) THEN rmedges = 0b ELSE rmedges = 1b
;;  Check SRATE
def_srate      = sample_rate(tt1d,/AVE)
test           = ((is_a_number(srate,/NOMSSG) EQ 0) OR (N_ELEMENTS(srate) EQ 0))
IF (test[0]) THEN s_rate = def_srate[0] ELSE s_rate = srate[0]
;;  Check FLOW
test           = ((is_a_number(flow,/NOMSSG) EQ 0) OR (N_ELEMENTS(flow) EQ 0))
IF (test[0]) THEN f_lcut = 0d0 ELSE f_lcut = flow[0]
;;  Check FHIGH
test           = ((is_a_number(fhigh,/NOMSSG) EQ 0) OR (N_ELEMENTS(fhigh) EQ 0))
IF (test[0]) THEN f_hcut = s_rate[0] ELSE f_hcut = fhigh[0]
;;  Check NFFT
test           = ((is_a_number(nfft,/NOMSSG) EQ 0) OR (N_ELEMENTS(nfft) EQ 0))
IF (test[0]) THEN n_fft = def_nfft[0] ELSE n_fft = nfft[0]
;;  Make sure it's not too long
test           = (n_fft[0] GT n_e[0]/10L)
IF (test[0]) THEN n_fft = (n_fft[0] < (n_e[0]/8L)) > 8L
;;  Check NSHFT
test           = ((is_a_number(nshft,/NOMSSG) EQ 0) OR (N_ELEMENTS(nshft) EQ 0))
IF (test[0]) THEN n_shft = def_shft[0] ELSE n_shft = nshft[0]
;;  Make sure it's not too long
test           = (n_shft[0] GT n_fft[0])
IF (test[0]) THEN n_shft = (n_shft[0] < (n_fft[0]/2L)) > 4L
;;----------------------------------------------------------------------------------------
;;  Perform a bandpass filter prior to calculating parameters in time-space
;;----------------------------------------------------------------------------------------
ef2d0          = vector_bandpass(ef2d,s_rate[0],f_lcut[0],f_hcut[0],/MIDF)
bf2d0          = vector_bandpass(bf2d,s_rate[0],f_lcut[0],f_hcut[0],/MIDF)
;;----------------------------------------------------------------------------------------
;;  Calculate parameters in time-space first
;;----------------------------------------------------------------------------------------
ef_mag_time    = mag__vec(ef2d0,/TWO,/NAN)
bf_mag_time    = mag__vec(bf2d0,/TWO,/NAN)
;;  Calculate (∂E x ∂B) [in time-space, V T m^(-1)]
ExB_t2t_vec    = my_crossp_2(ef2d0,bf2d0,/NOM)
;;  Calculate (∂E x ∂B)/(c |∂B|^2) [in time-space, unitless]
c_bf_sq        = c[0]*bf_mag_time^2
E2B_r_t2t_vec  = ExB_t2t_vec/c_bf_sq
;;  Calculate |∂E/(∂B c)| directly [unitless]
E2B_r_d_t2t_m  = ABS(ef_mag_time[*,0]/(c[0]*bf_mag_time[*,0]))
;;  Calculate magnitudes of each
ExB_t2t_mag    = mag__vec(ExB_t2t_vec,/NAN)
E2B_r_t2t_mag  = mag__vec(E2B_r_t2t_vec,/NAN)
;;  Use a median filter to smooth E-to-B ratios [unitless]
ExB_t2t_m_sm   = MEDIAN(ExB_t2t_mag,wd[0])
E2B_r_t2t_m_sm = MEDIAN(E2B_r_t2t_mag,wd[0])
E2B_rd_t2t_msm = MEDIAN(E2B_r_d_t2t_m,wd[0])
;;----------------------------------------------------------------------------------------
;;  Create sub-structures
;;    Tags = VEC, MAG, MAG_SM
;;----------------------------------------------------------------------------------------
;;  Time-2-Time
ExB_t2t_s_str  = CREATE_STRUCT(vm_str,ExB_t2t_vec,ExB_t2t_mag,ExB_t2t_m_sm)
E2B_r_t2t_sstr = CREATE_STRUCT(vm_str,E2B_r_t2t_vec,E2B_r_t2t_mag,E2B_r_t2t_m_sm)
E2Brd_t2t_sstr = CREATE_STRUCT(vm_str,0,E2B_r_d_t2t_m,E2B_rd_t2t_msm)
;;  Time series structure
t2t_struc      = CREATE_STRUCT(t2t_tags,tt1d,ExB_t2t_s_str,E2B_r_t2t_sstr,E2Brd_t2t_sstr)
;;----------------------------------------------------------------------------------------
;;  Define some relevant parameters
;;----------------------------------------------------------------------------------------
ef2d0          = ef2d
bf2d0          = bf2d
;;----------------------------------------------------------------------------------------
;;  Calculate time- and frequency-averaged FFTs = Time-Windowed-FFTs or TW-FFTs
;;----------------------------------------------------------------------------------------
ef_tw_fft_str  = time_and_freq_averaged_fft(tt1d,ef2d0,FLOW=f_lcut,NFFT=n_fft,NSHFT=n_shft,FHIGH=f_hcut)
bf_tw_fft_str  = time_and_freq_averaged_fft(tt1d,bf2d0,FLOW=f_lcut,NFFT=n_fft,NSHFT=n_shft,FHIGH=f_hcut)
tt_tw_fft      = ef_tw_fft_str.TIME_FFT
ef_tw_fft      = ef_tw_fft_str.VEC_FFT  ;;  [K,W,3]-Element array
bf_tw_fft      = bf_tw_fft_str.VEC_FFT
freq_tw_fft    = ef_tw_fft_str.FREQ_FFT
ef_tw_fft_cc   = CONJ(ef_tw_fft)
bf_tw_fft_cc   = CONJ(bf_tw_fft)
szd_eftw       = SIZE(ef_tw_fft,/DIMENSIONS)
;;----------------------------------------------------------------------------------------
;;  Calculate (∂E x ∂B)/2 [in frequency space, V T m^(-1)]
;;----------------------------------------------------------------------------------------
ExB_tw_fft_x   = (ef_tw_fft[*,*,1]*bf_tw_fft_cc[*,*,2] - ef_tw_fft[*,*,2]*bf_tw_fft_cc[*,*,1])/2d0
ExB_tw_fft_y   = (ef_tw_fft[*,*,2]*bf_tw_fft_cc[*,*,0] - ef_tw_fft[*,*,0]*bf_tw_fft_cc[*,*,2])/2d0
ExB_tw_fft_z   = (ef_tw_fft[*,*,0]*bf_tw_fft_cc[*,*,1] - ef_tw_fft[*,*,1]*bf_tw_fft_cc[*,*,0])/2d0
ExB_tw_fft     = [[[ExB_tw_fft_x]],[[ExB_tw_fft_y]],[[ExB_tw_fft_z]]]  ;;  [K,W,3]-Element array
;;  Calculate |∂B| [in frequency space, T] and |∂E| [in frequency space, V/m]
ef_tw_mag_fft  = SQRT(TOTAL(ef_tw_fft*ef_tw_fft_cc,3L,/NAN))           ;;  [K,W]-Element array
bf_tw_mag_fft  = SQRT(TOTAL(bf_tw_fft*bf_tw_fft_cc,3L,/NAN))
;;  Calculate |∂B|^2 [in frequency space, T^2]
bf_tw_mfft_2   = DCOMPLEX(ABS(bf_tw_mag_fft*CONJ(bf_tw_mag_fft)))
denom          = c[0]*bf_tw_mfft_2
E2B_tw_rat_fft = DCOMPLEXARR(szd_eftw[0],szd_eftw[1],szd_eftw[2])
FOR k=0L, szd_eftw[2] - 1L DO E2B_tw_rat_fft[*,*,k] = ExB_tw_fft[*,*,k]/denom
E_x_B_tw_fft   = SQRT(TOTAL(ExB_tw_fft^2,2L,/NAN))/n_fft[0]
E2B_rat_tw_fft = SQRT(TOTAL(E2B_tw_rat_fft^2,2L,/NAN))/n_fft[0]
;;  Calculate |∂E/(∂B c)| directly [unitless]
rat0           = ABS(ef_tw_mag_fft)/(c[0]*ABS(bf_tw_mag_fft))
E2B_r_d_tw_fft = DCOMPLEX(SQRT(TOTAL(rat0^2,2L,/NAN)))/n_fft[0]
;;  Calculate magnitudes
ExB_tw_fft_mag = mag__vec(E_x_B_tw_fft)
E2Br_tw_fft_mg = mag__vec(E2B_rat_tw_fft)
;;----------------------------------------------------------------------------------------
;;  Create sub-structures
;;    Tags = VEC, MAG, MAG_SM
;;----------------------------------------------------------------------------------------
;;  Time-2-TW-FFTs
E_twfft_str    = CREATE_STRUCT(vm_str,ef_tw_fft,ef_tw_mag_fft,0)
B_twfft_str    = CREATE_STRUCT(vm_str,bf_tw_fft,bf_tw_mag_fft,0)
ExB_twfft_str  = CREATE_STRUCT(vm_str,E_x_B_tw_fft,ExB_tw_fft_mag,0)
E2Br_twfft_str = CREATE_STRUCT(vm_str,E2B_rat_tw_fft,E2Br_tw_fft_mg,0)
E2Brdtwfft_str = CREATE_STRUCT(vm_str,0,E2B_r_d_tw_fft,0)
;;  Define Time-to-TW-FFTs structure
tw_fft_struc   = CREATE_STRUCT(tw_fft_tags,tt_tw_fft,freq_tw_fft,E_twfft_str,B_twfft_str,$
                               ExB_twfft_str,E2Br_twfft_str,E2Brdtwfft_str)
;;----------------------------------------------------------------------------------------
;;  Determine where NaNs, if any, are located
;;    --> keep track for later
;;----------------------------------------------------------------------------------------
test           = [[FINITE(ef2d0[*,0])],[FINITE(ef2d0[*,1])],[FINITE(ef2d0[*,2])]]
good_ef_nan_x  = WHERE(test[*,0],gd_ef_nan_x,COMPLEMENT=bad_ef_nan_x,NCOMPLEMENT=bd_ef_nan_x)
good_ef_nan_y  = WHERE(test[*,1],gd_ef_nan_y,COMPLEMENT=bad_ef_nan_y,NCOMPLEMENT=bd_ef_nan_y)
good_ef_nan_z  = WHERE(test[*,2],gd_ef_nan_z,COMPLEMENT=bad_ef_nan_z,NCOMPLEMENT=bd_ef_nan_z)
test           = [[FINITE(bf2d0[*,0])],[FINITE(bf2d0[*,1])],[FINITE(bf2d0[*,2])]]
good_bf_nan_x  = WHERE(test[*,0],gd_bf_nan_x,COMPLEMENT=bad_bf_nan_x,NCOMPLEMENT=bd_bf_nan_x)
good_bf_nan_y  = WHERE(test[*,1],gd_bf_nan_y,COMPLEMENT=bad_bf_nan_y,NCOMPLEMENT=bd_bf_nan_y)
good_bf_nan_z  = WHERE(test[*,2],gd_bf_nan_z,COMPLEMENT=bad_bf_nan_z,NCOMPLEMENT=bd_bf_nan_z)
;;  Remove/Replace NaNs [otherwise FFT will return all zeros]
IF (bd_ef_nan_x GT 0) THEN ef2d0[bad_ef_nan_x,0] = 0d0
IF (bd_ef_nan_y GT 0) THEN ef2d0[bad_ef_nan_y,1] = 0d0
IF (bd_ef_nan_z GT 0) THEN ef2d0[bad_ef_nan_z,2] = 0d0
IF (bd_bf_nan_x GT 0) THEN bf2d0[bad_bf_nan_x,0] = 0d0
IF (bd_bf_nan_y GT 0) THEN bf2d0[bad_bf_nan_y,1] = 0d0
IF (bd_bf_nan_z GT 0) THEN bf2d0[bad_bf_nan_z,2] = 0d0
;;----------------------------------------------------------------------------------------
;;  Expand to make # of elements an even power of 2 [faster FFT results]
;;----------------------------------------------------------------------------------------
e2x            = power_of_2(ef2d0[*,0])
e2y            = power_of_2(ef2d0[*,1])
e2z            = power_of_2(ef2d0[*,2])
b2x            = power_of_2(bf2d0[*,0])
b2y            = power_of_2(bf2d0[*,1])
b2z            = power_of_2(bf2d0[*,2])

e2             = [[e2x],[e2y],[e2z]]           ;;  [V/m]
b2             = [[b2x],[b2y],[b2z]]           ;;  [T]
;;----------------------------------------------------------------------------------------
;;  Define Frequency bins (without sample rate multiplier) for associated FFTs
;;----------------------------------------------------------------------------------------
n_2            = N_ELEMENTS(e2[*,0])           ;;  Input # of vectors [after zero padding]
n_mid          = n_2[0]/2L + 1L                ;;  Mid point in FFT
df_n           = n_2[0] - n_mid[0]             ;;  # of elements in negative frequency range
freln          = LINDGEN(df_n[0]) + n_mid[0]   ;;  Elements associated with negative frequencies
fr_fft         = DINDGEN(n_2[0])               ;;  Dummy array of FFT frequencies
n_n2           = n_mid[0] - 2L
fr_fft[freln]  = -df_n[0] + DINDGEN(n_n2[0])
;;  Normalize frequencies [currently unitless]
;;    --> multiply by sample rate to get actual values
fr_fft        /= n_2[0]
fr_fft_Hz      = fr_fft*s_rate[0]
;;----------------------------------------------------------------------------------------
;;  Calculate the Fourier transforms for entire arrays
;;----------------------------------------------------------------------------------------
e2xfft         = FFT(e2x,/DOUBLE)
e2yfft         = FFT(e2y,/DOUBLE)
e2zfft         = FFT(e2z,/DOUBLE)
e2_fft         = [[e2xfft],[e2yfft],[e2zfft]]       ;;  [V/m]
b2xfft         = FFT(b2x,/DOUBLE)
b2yfft         = FFT(b2y,/DOUBLE)
b2zfft         = FFT(b2z,/DOUBLE)
b2_fft         = [[b2xfft],[b2yfft],[b2zfft]]       ;;  [T]
;;  Define the complex conjugate of B-field
b2_fft_cc      = CONJ(b2_fft)
;;----------------------------------------------------------------------------------------
;;  Calculate (∂E x ∂B)/2 [in frequency space, V T m^(-1)]
;;    T          = kg C^(-1) s^(-1) = N A^(-1) m^(-1) = kg A^(-1) s^(-2)
;;    V m^(-1)   = kg m s^(-2) C^(-1) = N C^(-1)      = kg A^(-1) s^(-3) m
;;
;;    V T m^(-1) = V^2 s m^(-3) = (N A^(-1)) (N A^(-1) m^(-1))
;;               = N^2 A^(-2) m^(-1) = N^2 s^2 m^(-1) C^(-2)
;;               = (V m^(-1)) (V s m^(-2)) = V^2 s m^(-2)
;;               = kg^2 m C^(-2) s^(-3)
;;
;;    [µ_o]      = N A^(-2) = kg m A^(-2) s^(-2)
;;    [∂B/µ_o]   = [kg A^(-1) s^(-2)] [kg^(-1) m^(-1) A^2 s^2] = kg^(0) s^(0) A^(1) m^(-1)
;;               = A m^(-1) = C s^(-1) m^(-1)
;;    --> [(∂E x ∂B)/µ_o] = [kg A^(-1) s^(-3) m] [A m^(-1)] = kg A^(0) m^(0) s^(-3)
;;                        = kg s^(-3) = kg m^2 s^(-3) m^(-2) = J s^(-1) m^(-2)
;;                        = W m^(-2)
;;----------------------------------------------------------------------------------------
ExB_fft_x      = (e2_fft[*,1]*b2_fft_cc[*,2] - e2_fft[*,2]*b2_fft_cc[*,1])/2d0
ExB_fft_y      = (e2_fft[*,2]*b2_fft_cc[*,0] - e2_fft[*,0]*b2_fft_cc[*,2])/2d0
ExB_fft_z      = (e2_fft[*,0]*b2_fft_cc[*,1] - e2_fft[*,1]*b2_fft_cc[*,0])/2d0
E_x_B_fft      = [[ExB_fft_x],[ExB_fft_y],[ExB_fft_z]]  ;;  [(T V/m) = kg^2 m C^(-2) s^(-3)]
;;  Calculate |∂B| [in frequency space, T] and |∂E| [in frequency space, V/m]
cmplx_ones     = REPLICATE(DCOMPLEX(1d0,1d0),3)
ef_mag_fft     = FFT(mag__vec(e2),/DOUBLE) # cmplx_ones
bf_mag_fft     = FFT(mag__vec(b2),/DOUBLE) # cmplx_ones
;;----------------------------------------------------------------------------------------
;;  Calculate (∂E x ∂B)/(c |∂B|^2) [in frequency space, unitless]
;;    T^(-1)     = C s kg^(-1) = A m N^(-1)
;;    V/m/T      = [kg m s^(-2) C^(-1)] [C s kg^(-1)]
;;               = [m s^(-1)]
;;----------------------------------------------------------------------------------------
bsquared_fft   = DCOMPLEX(ABS(bf_mag_fft*CONJ(bf_mag_fft)))     ;;  = |∂B|^2 [T^2]
E2B_rat_fft    = E_x_B_fft/(c[0]*bsquared_fft)
;;  Calculate |∂E/(∂B c)| directly [unitless]
E2B_rat_d_t2f  = DCOMPLEX(ABS(ef_mag_fft[*,0])/(c[0]*ABS(bf_mag_fft[*,0])))
;;  Calculate magnitudes
E_x_B_fft_mag  = mag__vec(E_x_B_fft)
E2B_r_fft_mag  = mag__vec(E2B_rat_fft)
;;----------------------------------------------------------------------------------------
;;  Create sub-structures
;;    Tags = VEC, MAG, MAG_SM
;;----------------------------------------------------------------------------------------
;;  Time-2-FFT
E_t2f_s_str    = CREATE_STRUCT(vm_str,e2_fft,ef_mag_fft[*,0],0)
B_t2f_s_str    = CREATE_STRUCT(vm_str,b2_fft,bf_mag_fft[*,0],0)
ExB_t2f_s_str  = CREATE_STRUCT(vm_str,E_x_B_fft,E_x_B_fft_mag,0)
E2B_r_t2f_sstr = CREATE_STRUCT(vm_str,E2B_rat_fft,E2B_r_fft_mag,0)
E2Brd_t2f_sstr = CREATE_STRUCT(vm_str,0,E2B_rat_d_t2f,0)
;;  Define time-to-FFT structure
fft_struc      = CREATE_STRUCT(fft_tags,fr_fft,E_t2f_s_str,B_t2f_s_str,ExB_t2f_s_str,$
                               E2B_r_t2f_sstr,E2Brd_t2f_sstr)
;;----------------------------------------------------------------------------------------
;;  Convert values back to time-space
;;----------------------------------------------------------------------------------------
;;  (∂E x ∂B)
ExB_time_x     = REAL_PART(FFT(E_x_B_fft[*,0],1,/DOUBLE))
ExB_time_y     = REAL_PART(FFT(E_x_B_fft[*,1],1,/DOUBLE))
ExB_time_z     = REAL_PART(FFT(E_x_B_fft[*,2],1,/DOUBLE))
ExB_t2f2t_vec0 = [[ExB_time_x],[ExB_time_y],[ExB_time_z]]
;;  (∂E x ∂B)/(c |∂B|^2)
E2B_rat_x      = REAL_PART(FFT(E2B_rat_fft[*,0],1,/DOUBLE))
E2B_rat_y      = REAL_PART(FFT(E2B_rat_fft[*,1],1,/DOUBLE))
E2B_rat_z      = REAL_PART(FFT(E2B_rat_fft[*,2],1,/DOUBLE))
E2B_r_t2f2t_v0 = [[E2B_rat_x],[E2B_rat_y],[E2B_rat_z]]
;;  |∂E/(∂B c)|
E2B_r_d_t2f2t0 = ABS(REAL_PART(FFT(E2B_rat_d_t2f,1,/DOUBLE)))   ;;  Inverse FFT produces some negative numbers...
;;----------------------------------------------------------------------------------------
;;  Remove equivalent zero padded elements and replace zeroed-NaNs
;;----------------------------------------------------------------------------------------
;;  Keep only original length arrays
ind_all        = LINDGEN(n_2[0])
gind           = ind_all[0L:(n_e[0] - 1L)]
ExB_t2f2t_vec  = ExB_t2f2t_vec0[gind,*]
E2B_r_t2f2t_v  = E2B_r_t2f2t_v0[gind,*]
E2B_r_d_t2f2t  = E2B_r_d_t2f2t0[gind]
IF (rmedges[0]) THEN BEGIN
  ;;  Kill end points to eliminate "edge effects"
  n_end_pts           = (wd[0]/8L) > 2L
  sti                 = LINDGEN(n_end_pts[0]) + MIN(gind)
  eni                 = LINDGEN(n_end_pts[0]) + (MAX(gind) - n_end_pts[0] + 1L)
  se                  = [sti,eni]
  mid                 = gind[(MAX(sti) + 1L):(MIN(eni) - 1L)]
  ExB_t2f2t_vec[se,*] = f
  E2B_r_t2f2t_v[se,*] = f
  E2B_r_d_t2f2t[se,*] = f
ENDIF
;;----------------------------------------------------------------------------------------
;;  Calculate magnitudes of each
;;----------------------------------------------------------------------------------------
ExB_t2f2t_mg   = mag__vec(ExB_t2f2t_vec,/NAN)
E2B_r_t2f2t_m  = mag__vec(E2B_r_t2f2t_v,/NAN)
;;  Use a median filter to smooth E-to-B ratios [unitless]
ExB_t2f2t_m_sm = MEDIAN(ExB_t2f2t_mg,wd[0])
E2Br_t2f2t_msm = MEDIAN(E2B_r_t2f2t_m,wd[0])
E2B_rd_t2f2tsm = MEDIAN(E2B_r_d_t2f2t,wd[0])
;;----------------------------------------------------------------------------------------
;;  Remove/Replace zeroed-NaNs with NaNs
;;----------------------------------------------------------------------------------------
bds_eb_nan_str = {EX:bd_ef_nan_x,EY:bd_ef_nan_y,EZ:bd_ef_nan_z,$
                  BX:bd_bf_nan_x,BY:bd_bf_nan_y,BZ:bd_bf_nan_z}
bad_eb_nan_str = {EX:bad_ef_nan_x,EY:bad_ef_nan_y,EZ:bad_ef_nan_z,$
                  BX:bad_bf_nan_x,BY:bad_bf_nan_y,BZ:bad_bf_nan_z}
nts            = N_TAGS(bd_ebf_nan_str)
FOR j=0L, nts[0] - 1L DO BEGIN
  bd0  = bds_eb_nan_str.(j)
  bad0 = bad_eb_nan_str.(j)
  k    = (j[0] MOD 2)
  IF (bd0 GT 0) THEN BEGIN
    ExB_t2f2t_vec[bad0,k]  = f
    ExB_t2f2t_mg[bad0]     = f
    ExB_t2f2t_m_sm[bad0]   = f
    E2B_r_t2f2t_v[bad0,k]  = f
    E2B_r_t2f2t_m[bad0]    = f
    E2Br_t2f2t_msm[bad0]   = f
    E2B_r_d_t2f2t[bad0]    = f
    E2B_rd_t2f2tsm[bad0]   = f
  ENDIF
ENDFOR
;;----------------------------------------------------------------------------------------
;;  Create sub-structures
;;    Tags = VEC, MAG, MAG_SM
;;----------------------------------------------------------------------------------------
;;  Time-2-FFT-2-Time
ExB_t2f2t_sstr = CREATE_STRUCT(vm_str,ExB_t2f2t_vec,ExB_t2f2t_mg,ExB_t2f2t_m_sm)
E2Brt2f2t_sstr = CREATE_STRUCT(vm_str,E2B_r_t2f2t_v,E2B_r_t2f2t_m,E2Br_t2f2t_msm)
E2Brdt2f2tsstr = CREATE_STRUCT(vm_str,0,E2B_r_d_t2f2t,E2B_rd_t2f2tsm)
;;  Define time-to-FFT-to-time series structure
t2f2t_struc    = CREATE_STRUCT(t2f2t_tags,tt1d,ExB_t2f2t_sstr,E2Brt2f2t_sstr,E2Brdt2f2tsstr)
;;----------------------------------------------------------------------------------------
;;  Define return structure
;;----------------------------------------------------------------------------------------
;;  Define output structure
out_struc      = CREATE_STRUCT(out_tags,t2t_struc,tw_fft_struc,fft_struc,t2f2t_struc)
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN,out_struc
END

