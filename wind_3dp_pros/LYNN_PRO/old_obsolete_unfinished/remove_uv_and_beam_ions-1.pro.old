;+
;*****************************************************************************************
;
;  FUNCTION :   remove_uv_and_beam_ions.pro
;  PURPOSE  :   This routine attempts to remove "contamination" due to ion beams
;                 and/or UV light in a spherical top-hat electrostatic ion analyzer
;                 [e.g. THEMIS IESA].  The routine does so through the following steps:
;                   1)  Convert in Solar Wind (SW) frame
;                   2)  Create mask for data to remove values > V_thresh, where
;                         V_thresh can come from, e.g. the specular reflection ion
;                         gyrospeed estimate
;                   3)  Kill data within ±15 deg of sun direction below V_uv, where
;                         V_uv ~ 500-750 km/s [in SW frame]
;                   4)  Find remaining finite data bins to create a new mask
;                   5)  Return new mask to user
;                   6)  User can use new mask to keep only the desired bins when
;                         calculating new ion moments that are not contaminated by
;                         ion beams [e.g. gyrating ions] or UV-light-driven effects
;
;  CALLED BY:   
;               NA
;
;  CALLS:
;               cart_to_sphere.pro
;               test_wind_vs_themis_esa_struct.pro
;               conv_units.pro
;               transform_vframe_3d.pro
;               energy_to_vel.pro
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               DAT       :  [N]-Element array of data structures associated with
;                              THEMIS IESA Burst [see get_th?_peib.pro, ? = a-f] or
;                              Wind/3DP PESA High Burst [see get_phb.pro]
;
;  EXAMPLES:    
;               NA
;
;  KEYWORDS:    
;               V_THRESH  :  Scalar defining the largest velocity [km/s] to use for the
;                              "core" of the distribution in the bulk flow rest frame
;                              [Default = 500 km/s]
;               V_UV      :  Scalar defining the largest velocity [km/s] for the
;                              observed UV "contamination" => Plot first!
;                              [Default = 500 km/s]
;               THE_THR   :  Scalar defining the largest poloidal angle [deg] away
;                              from the sun direction to remove from the data
;                              [Default = 15 deg]
;               PHI_THR   :  Scalar defining the largest azimthal angle [deg] away
;                              from the sun direction to remove from the data
;                              [Default = 15 deg]
;
;   CHANGED:  1)  NA [MM/DD/YYYY   v1.0.0]
;
;   NOTES:      
;               1)  MUST use my version of conv_units.pro as it allows for arrays of
;                     data structures
;               2)  If DAT are from THEMIS IESA, then this routine assumes that they
;                     have already been modified prior to calling by:
;                     modify_themis_esa_struc.pro
;                     rotate_esa_thetaphi_to_gse.pro
;                         => GSE coordinates
;
;   CREATED:  08/09/2012
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  08/09/2012   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

FUNCTION remove_uv_and_beam_ions,dat,V_THRESH=v_thresh,V_UV=v_uv,$
                                 THE_THR=the_thr,PHI_THR=phi_thr

;*****************************************************************************************
ex_start = SYSTIME(1)
;*****************************************************************************************
;;----------------------------------------------------------------------------------------
;; => Define some constants and dummy variables
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
sunv           = [1d0,0d0,0d0]  ;; Sun direction in GSE coordinates
;; => convert sun direction to polar angles
;;       [theta,phi] = [0,0]  {should be this result}
cart_to_sphere,1d0,0d0,0d0,rs,the_s,phi_s,PH_0_360=1

;; => Dummy error messages
notstr_mssg    = 'Must be an IDL structure...'
nostate_mssg   = 'No State data available for date and probe...'
nomagf_mssg    = 'No FGM data available for date and probe...'
notvdf_msg     = 'Must be an ion velocity distribution IDL structure...'
;;----------------------------------------------------------------------------------------
;; => Check input
;;----------------------------------------------------------------------------------------
IF (N_PARAMS() EQ 0) THEN RETURN,0b
str            = dat[0]   ; => in case it is an array of structures of the same format
IF (SIZE(str,/TYPE) NE 8L) THEN BEGIN
  MESSAGE,notstr_mssg[0],/INFORMATIONAL,/CONTINUE
  RETURN,0b
ENDIF
test0      = test_wind_vs_themis_esa_struct(str,/NOM)
test       = (test0.(0) + test0.(1)) NE 1
IF (test) THEN BEGIN
  MESSAGE,notvdf_msg,/INFORMATIONAL,/CONTINUE
  RETURN,0b
ENDIF
;;----------------------------------------------------------------------------------------
;; => Check keywords
;;----------------------------------------------------------------------------------------
IF ~KEYWORD_SET(v_thresh) THEN v_thresh = 50e1 ELSE v_thresh = v_thresh[0]
IF ~KEYWORD_SET(v_uv)     THEN v_uv     = 50e1 ELSE v_uv     = v_uv[0]

IF ~KEYWORD_SET(the_thr)  THEN the_thr  = 15e0 ELSE the_thr  = ABS(the_thr[0])
IF ~KEYWORD_SET(phi_thr)  THEN phi_thr  = 15e0 ELSE phi_thr  = ABS(phi_thr[0])

;; => Define angular range to remove for UV contamination
phi_ls    = phi_s[0] + [-1d0,1d0]*phi_thr[0]
the_ls    = the_s[0] + [-1d0,1d0]*the_thr[0]
;;----------------------------------------------------------------------------------------
;; => Convert all DAT to phase (velocity) space density
;;----------------------------------------------------------------------------------------
n_n       = N_ELEMENTS(dat)
data      = conv_units(dat,'df')
;;  Define spacecraft frame angles
phi_sc    = data.PHI MOD 36e1       ;; Azimuthal angle (from sun direction) [deg]
the_sc    = data.THETA              ;; Poloidal angle (from ecliptic plane) [deg]
;;----------------------------------------------------------------------------------------
;; => Convert into Solar Wind (SW) frame
;;----------------------------------------------------------------------------------------
dumb      = data[0]
transform_vframe_3d,dumb,/EASY_TRAN

dumb_i    = REPLICATE(dumb[0],n_n)
FOR j=0L, n_n - 1L DO BEGIN
  del       = data[j]
  transform_vframe_3d,del,/EASY_TRAN
  dumb_i[j] = del[0]
ENDFOR
;;----------------------------------------------------------------------------------------
;; => Define DAT structure parameters
;;----------------------------------------------------------------------------------------
n_e       = dumb_i[0].NENERGY       ;; => # of energy bins     [ = E]
n_a       = dumb_i[0].NBINS         ;; => # of angle bins      [ = A]
mass      = dumb_i[0].MASS          ;; proton mass [eV c^(-2), with c in km/s]
;;  The following are:  [E,A,N]-Element Arrays
energy    = dumb_i.ENERGY           ;; Energy bin values [eV]
phi       = dumb_i.PHI              ;; Azimuthal angle (from sun direction) [deg]
theta     = dumb_i.THETA            ;; Poloidal angle (from ecliptic plane) [deg]
;;    => Magnitude of velocities from energy [km/s]
nvmag     = energy_to_vel(energy,mass[0])
;;----------------------------------------------------------------------------------------
;; => Define gyrating ion and UV contamination masks
;;----------------------------------------------------------------------------------------
mask      = REPLICATE(0e0,n_e,n_a,n_n)  ;; overall mask
FOR j=0L, n_n - 1L DO BEGIN
  ;;--------------------------------------------------------------------------------------
  ;; Determine gyrating ion elements to remove
  ;;--------------------------------------------------------------------------------------
  mask_gi = REPLICATE(0e0,n_e,n_a)  ;; gyrating ion mask [good for |V| ≤ V_thresh]
  vmag0   = nvmag[*,*,j]
  test    = (vmag0 LE v_thresh[0]) AND FINITE(vmag0)
  good    = WHERE(test,gd)
  IF (gd GT 0) THEN BEGIN
    mask_gi[good] = 1e0
  ENDIF
  ;;--------------------------------------------------------------------------------------
  ;; Determine UV contamination elements to remove
  ;;--------------------------------------------------------------------------------------
  mask_uv = REPLICATE(0e0,n_e,n_a)  ;; UV contamination mask [bad for |V| ≤ 500 km/s and within ±ø of sun dir]
  test0   = (vmag0 LE v_uv[0])
  ;; Find angles within "bad" UV range
  test1   = (phi_sc[*,*,j] LE phi_ls[1]) AND (phi_sc[*,*,j] GE phi_ls[0])
  test2   = (the_sc[*,*,j] LE the_ls[1]) AND (the_sc[*,*,j] GE the_ls[0])
  test    = test0 AND test1 AND test2
  bad     = WHERE(test,bd,COMPLEMENT=good,NCOMPLEMENT=gd)
  IF (gd GT 0) THEN BEGIN
    mask_uv[good] = 1e0
  ENDIF
  ;;--------------------------------------------------------------------------------------
  ;; Define overall mask
  ;;--------------------------------------------------------------------------------------
  mask[*,*,j] = (mask_gi*mask_uv)
;  temp0   = (mask_gi*mask_uv)
;  test    = (temp0 GT 0)        ;; [E,A]-Element Array
;  good    = WHERE(test,gd)
;  stop
;  IF (gd GT 0) THEN BEGIN
;    temp        = REPLICATE(0e0,n_e,n_a)
;    temp[good]  = 1e0
;    mask[*,*,j] = temp
;  ENDIF
  ;;  Clean up
  test0   = 0 & test1   = 0 & test2   = 0 & test    = 0
  good    = 0 & bad     = 0
ENDFOR
;;----------------------------------------------------------------------------------------
;; => Return mask to user
;;----------------------------------------------------------------------------------------
;*****************************************************************************************
ex_time = SYSTIME(1) - ex_start
MESSAGE,STRING(ex_time)+' seconds execution time.',/CONTINUE,/INFORMATIONAL
;*****************************************************************************************

RETURN,mask
END
