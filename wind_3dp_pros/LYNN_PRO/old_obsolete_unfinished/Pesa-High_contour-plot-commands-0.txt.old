;-----------------------------------------------------------------------------------------
; => Constants
;-----------------------------------------------------------------------------------------
f      = !VALUES.F_NAN
d      = !VALUES.D_NAN
epo    = 8.854187817d-12   ; -Permittivity of free space (F/m)
muo    = 4d0*!DPI*1d-7     ; -Permeability of free space (N/A^2 or H/m)
me     = 9.1093897d-31     ; -Electron mass (kg)
mp     = 1.6726231d-27     ; -Proton mass (kg)
ma     = 4d0*(mp + me)     ; -Alpha-Particle mass (kg)
qq     = 1.60217733d-19    ; -Fundamental charge (C)
kB     = 1.380658d-23      ; -Boltzmann Constant (J/K)
K_eV   = 1.160474d4        ; -Conversion = degree Kelvin/eV
c      = 2.99792458d8      ; -Speed of light in vacuum (m/s)
c2     = (c*1d-3)^2        ; -" " squared (km/s)^2
mm     = [-1d0,0d0,1d0]    ; -[Normal Cyclotron, Landau, Anomalous Cyclotron]
mass_e = 0.5109906d6       ; -Electron mass in eV/c^2
mass_p = mp*c^2/qq         ; -Proton mass in eV/c^2
u_mass = mass_e/c2         ; -Electron mass [eV/(km/s)^2]
p_mass = mass_p/c2         ; -Proton mass [eV/(km/s)^2]

invdenf = 1d-6*(2d0*!DPI)^2*(me*epo/qq^2)  ; => [cm^(-3) s^2]
;-----------------------------------------------------------------------------------------
; => Dates and time ranges for known IP shocks analyzed by Justin C. Kasper
;-----------------------------------------------------------------------------------------
date = '040396'
date = '040896'
date = '120296'  ; -> No PLB or ELB moments in time range
date = '011097'  ; -> No PLB or ELB moments in time range
date = '022797'
date = '051597'
date = '102497'
date = '121097'
date = '042398'
date = '043098'
date = '051598'
date = '082698'
date = '092498'
date = '021100'
date = '022000'
date = '040600'
date = '040900'
date = '101101'
date = '102101'
date = '102501'
date = '112401'
date = '101002'

mydate = my_str_date(DATE=date)
date   = mydate.S_DATE[0]  ; -('MMDDYY')
mdate  = mydate.DATE[0]    ; -('YYYYMMDD')
ldate  = STRMID(mdate,4L,4L)+STRMID(mdate,0L,4L)

t = ['1996-04-03/08:45:00','1996-04-03/10:45:00']  ; -For moment writing
t = ['1996-04-08/01:41:00','1996-04-08/03:41:00']  ; -For moment writing
t = ['1996-12-02/15:56:00','1996-12-02/17:56:00']
t = ['1997-01-09/23:52:00','1997-01-10/01:52:00']
t = ['1997-02-27/16:29:00','1997-02-27/18:29:00']
t = ['1997-05-15/00:15:00','1997-05-15/02:15:00']  ; -For moment writing
t = ['1997-10-24/10:14:00','1997-10-24/12:14:00']  ; -For moment writing
t = ['1997-12-10/03:33:00','1997-12-10/05:33:00']  ; -For moment writing
t = ['1998-04-23/16:29:00','1998-04-23/18:29:00']  ; -For moment writing
t = ['1998-04-30/07:43:00','1998-04-30/09:43:00']  ; -For moment writing
t = ['1998-05-15/12:53:00','1998-05-15/14:53:00']  ; -For moment writing
t = ['1998-08-26/05:40:00','1998-08-26/07:40:00']  ; -For moment writing
t = ['1998-09-24/22:20:00','1998-09-25/00:20:00']
t = ['2000-02-11/01:35:00','2000-02-11/03:35:00']
t = ['2000-02-11/22:33:00','2000-02-12/00:33:00']
t = ['2000-02-20/20:03:00','2000-02-20/22:03:00']
t = ['2000-04-06/15:00:00','2000-04-06/18:00:00']  ; -For moment writing
t = ['2000-04-09/23:00:00','2000-04-11/12:00:00']  ; -For moment writing
t = ['2001-10-11/15:50:00','2001-10-11/17:50:00']
t = ['2001-10-21/15:40:00','2001-10-21/17:40:00']
t = ['2001-10-25/07:59:00','2001-10-25/09:59:00']
t = ['2001-11-24/04:51:00','2001-11-24/06:51:00']
t = ['2002-10-10/00:00:00','2002-10-10/04:00:00']
tr3 = time_double(t)

tramp = '1996-04-03/09:47:17.152'
tramp = '1996-04-08/02:41:09.767'
tramp = '1996-12-02/16:56:20.015'
tramp = '1997-01-10/00:52:02.939'
tramp = '1997-02-27/17:29:09.050'
tramp = '1997-05-15/01:15:22.000'
tramp = '1997-10-24/11:18:10.114'
tramp = '1997-12-10/04:33:14.664'
tramp = '1998-04-23/17:29:02.445'
tramp = '1998-04-30/08:43:15.291'
tramp = '1998-05-15/13:53:46.079'
tramp = '1998-08-26/06:40:24.972'
tramp = '1998-09-24/23:20:37.000'
tramp = '2000-02-11/02:35:07.281'
tramp = '2000-02-11/23:33:55.319'
tramp = '2000-02-20/21:03:45.761'
tramp = '2000-04-06/16:32:09.237'
tramp = '2001-10-11/16:50:55.000'
tramp = '2001-10-21/16:40:43.000'
tramp = '2001-10-25/08:59:28.000'
tramp = '2001-11-24/05:51:55.000'
tura  = time_double(tramp)
;-----------------------------------------------------------------------------------------
; => Find IDL Save Files
;-----------------------------------------------------------------------------------------
default_extension = '/wind_3dp_pros/wind_data_dir/Wind_3DP_DATA/IDL_Save_Files/'
default_location  = default_extension+date+'/'

DEFSYSV,'!wind3dp_umn',EXISTS=exists
IF NOT KEYWORD_SET(exists) THEN mdir  = FILE_EXPAND_PATH('')+default_location
IF     KEYWORD_SET(exists) THEN mdir  = !wind3dp_umn.WIND_3DP_SAVE_FILE_DIR+date+'/'
IF (mdir EQ '')            THEN mdir = default_location
mfiles = FILE_SEARCH(mdir,'*.sav')
;-----------------------------------------------------------------------------------------
; -Load PHB data
;-----------------------------------------------------------------------------------------
;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; => Note:  In the IDL save files I used, variables like "ael" are arrays of all the 
;             Wind/3DP data structures within some time period (defined else where)
;             for the Eesa Low detector.  Thus, "aelb" is for Eesa Low Burst, "apl" is
;             for Pesa Low, etc.  The prefix "a" is used loosely to represent ALL here.
;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
RESTORE,mfiles[1]

;-----------------------------------------------------------------------------------------
; => Find shock info
;-----------------------------------------------------------------------------------------
sh_mit     = read_shocks_jck_database()
mit_dates  = sh_mit.SDATES                 ; => 'MMDDYY'
shocks     = sh_mit.SHOCK
header     = sh_mit.HEADER
ymdb_ra    = header.DATE_TIME              ; => ['YYYY-MM-DD/HH:MM:SS.sss']
mts        = my_time_string(ymdb_ra,STR=1,FORM=1)
unix_ra    = mts.UNIX

a_ushn     = shocks.USH_N[*,0]                 ; => Upstream normal flow speed (km/s) [shock frame]
a_dushn    = shocks.D_USH_N[*,0]               ; => Uncertainty in a_ushn
a_vshn     = shocks.VSH_N[*,0]                 ; => Upstream normal flow speed (km/s) [SC frame]
a_dvshn    = shocks.D_VSH_N[*,0]               ; => Uncertainty in a_vshn
a_compr    = shocks.COMPRESSION                ; => N_2/N_1 (density compression ratio)
a_dcompr   = shocks.D_COMPRESSION              ; => Uncertainty in a_compr
a_machf    = REFORM(shocks.MACH_FAST[*,0])     ; => Fast Mach number
a_dmachf   = REFORM(shocks.D_MACH_FAST[*,0])   ; => Uncertainty in a_machf
a_thbn     = shocks.THETA_BN                   ; => Shock normal angle (deg)
a_dthbn    = shocks.D_THETA_BN                 ; => Uncertainty in a_thbn
a_vsw      = header.VSW[*,*,0]                 ; => Upstream Avg. solar wind velocity [GSE, km/s]
a_dvsw     = header.D_VSW[*,*,0]               ; => Uncertainty in a_vsw
a_magf     = header.MAGF[*,*,0]                ; => Upstream Avg. magnetic field [GSE, nT]
a_dmagf    = header.D_MAGF[*,*,0]              ; => Uncertainty in a_magf
a_csup     = header.C_SOUND[*,0]               ; => Upstream Avg. sound speed (km/s)
a_dcsup    = header.D_C_SOUND[*,0]             ; => Uncertainty in a_csup
a_vaup     = header.V_ALFVEN[*,0]              ; => Upstream Avg. Alfven speed (km/s)
a_dvaup    = header.D_V_ALFVEN[*,0]            ; => Uncertainty in a_vaup
a_shnorms  = shocks.SH_NORM                    ; => Shock normal vector (GSE)

; => Determine shock to use
gshock     = WHERE(mit_dates EQ date,gsh)
; => There are two shocks on 2000-02-11, but the 2nd is a supercritical 
;      quasi-perpendicular shock while the first is quasi-parallel so the 2nd
;      is typically examined more frequently
IF (date EQ '021100') THEN kk = 1 ELSE kk = 0
gnorm = REFORM(a_shnorms[gshock[kk],*])
gthbn = (REFORM(a_thbn[gshock[kk]]))[0]
gcomp = (REFORM(a_compr[gshock[kk]]))[0]
gavsw = REFORM(a_vsw[gshock[kk],*])
gmagf = REFORM(a_magf[gshock[kk],*])

gvshn = (REFORM(a_vshn[gshock[kk]]))[0]
;-----------------------------------------------------------------------------------------
; => Calculate relevant reflected ion velocities [reference equations found in citation]
;
;    Gosling, Thomsen, Bame, Feldman, Paschmann, and Sckopke (1982), 
;      "Evidence for Specularly Reflected Ions Upstream from the Quasi-
;       Parallel Bow Shock," J. Geophys. Res. Vol 9, pg 1333.
;
;    Thomsen, M.F., S.J. Schwartz, and J.T. Gosling (1983), "Observational Evidence on
;        the Origin of Ions Upstream of the Earth's Bow Shock," J. Geophys. Res.
;        Vol. 88, pp. 7843-7852.
;-----------------------------------------------------------------------------------------
gbmag = NORM(gmagf)
gvmag = NORM(gavsw)
uvsw  = gavsw/gvmag[0]
umagf = gmagf/gbmag[0]
; => Calculate upstream incident ion velocity [km/s]
;    { = V_i in both Gosling et al., [1982] and Thomsen et al., [1983]  }
v_inc = gavsw - gvshn[0]*gnorm
vincm = NORM(v_inc)
uvinc = v_inc/vincm[0]
; => Note:  for the bow shock, V_i is roughly equal to Vsw

; => reflected ion total velocity [Eq. 2]
vrefl = vincm[0]*uvinc - 2d0*gnorm*vincm[0]*my_dot_prod(uvinc,gnorm)
; => component perpendicular to B [Eq. 4]
vperp = 1d0*vincm[0]*my_crossp_2(my_crossp_2(umagf,uvinc),umagf)
; => component parallel to B [Eq. 9]
vpara = 1d0*vincm[0]*ABS(my_dot_prod(uvinc,umagf) - 2d0*COS(gthbn*!DPI/18d1)*my_dot_prod(uvinc,gnorm))
; => guiding center velocity [Eq. 3 or 5]
vgc   = vperp + umagf*my_dot_prod(vrefl,umagf)
; => gyrovelocity [Eq. 6 or 8]
vgy   = vrefl - vgc

PRINT, vrefl, vperp, vgc, vgy
PRINT, NORM(vrefl), NORM(vperp), NORM(vgc), NORM(vgy), vpara

;-----------------------------------------------------------------------------------------
; => Plot all Pesa High Burst (PHB) Distribution Functions (DFs)
;-----------------------------------------------------------------------------------------
nphb     = N_ELEMENTS(aphb)
mts      = my_time_string(aphb.TIME,UNIX=1)
ymdb     = mts.DATE_TIME
UTtime   = STRMID(ymdb[*],11L,2L)+STRMID(ymdb[*],14L,2L)+$
           STRMID(ymdb[*],17L,2L)+STRMID(ymdb[*],19L,3L)
gdate    = STRMID(ymdb[*],0L,10L)
; => Non-smoothed DF cuts
mdir     = '~/Desktop/3DP_contours/'+date[0]+'/Pesa_High_Burst_Dists/'  ; => Dir. for Pesa High Burst DFs
suffx    = '-3D-20Grids_sundir_Vsw-B-Plane_DF'   ; => Suffix used when saving PHB DFs
ngrid    = 20L            ; => # of grids to use on contours
vlim     = 25e2           ; => velocity limit for X and Y axes on contour plot
sunv     = [1.,0.,0.]     ; => sun direction in GSE coordinates
sunn     = 'Sun Dir.'     ; => string associated with sun direction


dat      = aphb[j]
eh_cont3d,dat,VLIM=vlim,NGRID=ngrid,EX_VEC=sunv,EX_VN=sunn

; => Smoothed DF cuts
dat      = aphb[j]
eh_cont3d,dat,VLIM=vlim,NGRID=ngrid,EX_VEC=sunv,EX_VN=sunn,/SM_CUTS

; => Add one-count level DF parallel cut
dat      = aphb[j]
eh_cont3d,dat,VLIM=vlim,NGRID=ngrid,EX_VEC=sunv,EX_VN=sunn,/SM_CUTS,/ONE_C

; => Add shock normal vector to DF contour
dat      = aphb[j]
eh_cont3d,dat,VLIM=vlim,NGRID=ngrid,EX_VEC=sunv,EX_VN=sunn,/SM_CUTS,/ONE_C,NNORM=gnorm

; => Plot DF contour in the plane defined by the (V x B) and B x (V x B) directions
dat      = aphb[j]
eh_cont3d,dat,VLIM=vlim,NGRID=ngrid,EX_VEC=sunv,EX_VN=sunn,/SM_CUTS,/VXB_PLANE,NNORM=gnorm

; => Add circle of constant velocity (e.g. 500 km/s) to contour for reference
;      [useful for putting gyro-velocities on contours for shock reflection]
vgy = 500e0
dat      = aphb[j]
eh_cont3d,dat,VLIM=vlim,NGRID=ngrid,EX_VEC=sunv,EX_VN=sunn,/SM_CUTS,/ONE_C,VCIRC=vgy[0]

; => Force the cuts and contour levels to have a specific range of values
dfra = [1e-14,1e-9]
vgy = 500e0
dat      = aphb[j]
eh_cont3d,dat,VLIM=vlim,NGRID=ngrid,EX_VEC=sunv,EX_VN=sunn,/SM_CUTS,DFRA=dfra,VCIRC=vgy[0]



;-----------------------------------------------------------------------------------------
; => Below are options to save plots to PS files
;-----------------------------------------------------------------------------------------
; => Define directory for Pesa High Burst DFs
mdir     = '~/Desktop/3DP_contours/'+date[0]+'/Pesa_High_Burst_Dists/phb_'
suffx    = '-3D-20Grids_sundir_Vsw-B-Plane_DF'   ; => Suffix used when saving PHB DFs

FOR j=0L, nphb - 1L DO BEGIN                                                            $
  dat    = aphb[j]                                                                    & $
  pltn1  = mdir[0]+gdate[j]+'_'+UTtime[j]+suffx[0]                                    & $
  popen,pltn1,/port                                                                   & $
    eh_cont3d,dat,VLIM=vlim,NGRID=ngrid,EX_VEC=sunv,EX_VN=sunn                        & $
  pclose

; => Smoothed DF cuts
suffx    = '-3D-20Grids_sundir_Vsw-B-Plane_DF_SM'
FOR j=0L, nphb - 1L DO BEGIN                                                            $
  dat    = aphb[j]                                                                    & $
  pltn1  = mdir[0]+gdate[j]+'_'+UTtime[j]+suffx[0]                                    & $
  popen,pltn1,/port                                                                   & $
    eh_cont3d,dat,VLIM=vlim,NGRID=ngrid,EX_VEC=sunv,EX_VN=sunn,/SM_CUTS               & $
  pclose

; => Add one-count level DF parallel cut
suffx    = '-3D-20Grids_sundir_Vsw-B-Plane_DF_SM_one-count'
FOR j=0L, nphb - 1L DO BEGIN                                                            $
  dat    = aphb[j]                                                                    & $
  pltn1  = mdir[0]+gdate[j]+'_'+UTtime[j]+suffx[0]                                    & $
  popen,pltn1,/port                                                                   & $
    eh_cont3d,dat,VLIM=vlim,NGRID=ngrid,EX_VEC=sunv,EX_VN=sunn,/SM_CUTS,/ONE_C        & $
  pclose

; => Add shock normal vector to DF contour
suffx    = '-3D-20Grids_sundir_Vsw-B-Plane_DF_SM_SH-Norm'
FOR j=0L, nphb - 1L DO BEGIN                                                            $
  dat    = aphb[j]                                                                    & $
  pltn1  = mdir[0]+gdate[j]+'_'+UTtime[j]+suffx[0]                                    & $
  popen,pltn1,/port                                                                   & $
    eh_cont3d,dat,VLIM=vlim,NGRID=ngrid,EX_VEC=sunv,EX_VN=sunn,/SM_CUTS,NNORM=gnorm   & $
  pclose

; => Plot DF contour in the plane defined by the (V x B) and B x (V x B) directions
suffx    = '-3D-20Grids_sundir_VxB-BxVxB-Plane_DF'
FOR j=0L, nphb - 1L DO BEGIN                                                            $
  dat    = aphb[j]                                                                    & $
  pltn1  = mdir[0]+gdate[j]+'_'+UTtime[j]+suffx[0]                                    & $
  popen,pltn1,/port                                                                   & $
    eh_cont3d,dat,VLIM=vlim,NGRID=ngrid,EX_VEC=sunv,EX_VN=sunn,/VXB_PLANE             & $
  pclose

; => Smooth DF cuts and smooth contours by 5 points
;      [useful for plots with a lot of NaNs or data gaps to help close contours]
suffx    = '-3D-20Grids_sundir_Vsw-B-Plane_DF_SM-5pts'
FOR j=0L, nphb - 1L DO BEGIN                                                            $
  dat    = aphb[j]                                                                    & $
  pltn1  = mdir[0]+gdate[j]+'_'+UTtime[j]+suffx[0]                                    & $
  popen,pltn1,/port                                                                   & $
    eh_cont3d,dat,VLIM=vlim,NGRID=ngrid,EX_VEC=sunv,EX_VN=sunn,/SM_CUTS,NSMOOTH=5L    & $
  pclose

; => Add circle of constant velocity (e.g. 500 km/s) to contour for reference
;      [useful for putting gyro-velocities on contours for shock reflection]
suffx    = '-3D-20Grids_sundir_Vsw-B-Plane_DF_Vgyro-500km-s'
vgy      = 500e0
FOR j=0L, nphb - 1L DO BEGIN                                                            $
  dat    = aphb[j]                                                                    & $
  pltn1  = mdir[0]+gdate[j]+'_'+UTtime[j]+suffx[0]                                    & $
  popen,pltn1,/port                                                                   & $
    eh_cont3d,dat,VLIM=vlim,NGRID=ngrid,EX_VEC=sunv,EX_VN=sunn,VCIRC=vgy[0]    & $
  pclose

; => Force the cuts and contour levels to have a specific range of values
dfra     = [1e-15,1e-6]
suffx    = '-3D-20Grids_sundir_Vsw-B-Plane_DF_1E-15_1E-6'
FOR j=0L, nphb - 1L DO BEGIN                                                            $
  dat    = aphb[j]                                                                    & $
  pltn1  = mdir[0]+gdate[j]+'_'+UTtime[j]+suffx[0]                                    & $
  popen,pltn1,/port                                                                   & $
    eh_cont3d,dat,VLIM=vlim,NGRID=ngrid,EX_VEC=sunv,EX_VN=sunn,DFRA=dfra              & $
  pclose


;-----------------------------------------------------------------------------------------
; => Coordinate system definitions (DF plots are Y' vs. X')
;-----------------------------------------------------------------------------------------

; =>  X'Y'-Plane:  Defined by (V_sw x B) and V_sw
; =>  Z'        :  Defined by (V_sw x B) x V_sw
; =>  X'        :  Defined by (V_sw x B)
; =>  Y'        :  Defined by V_sw x [(V_sw x B) x V_sw]

          X'
         |
         |
         |
         |
        /|\ (V_sw x B)
 V_sw    |
   |\    |
     \   |
   |  \  |
       \ |
   |    \|___________________________ Z' [= (V_sw x B) x V_sw]
        /
   |/| /
   / |/
   | /
   |/
   /
  /
 /
/ Y' {= V_sw x [(V_sw x B) x V_sw]}




; =>  X'Y'-Plane:  Defined by B and V_sw
; =>  Z'        :  Defined by (V_sw x B)
; =>  X'        :  Defined by B
; =>  Y'        :  Defined by B x (V_sw x B)


          X'
         |
         |
         |
         |
        /|\ B
 V_sw    |
   |\    |
     \   |
   |  \  |
       \ |
   |    \|___________________________ Z' (= V_sw x B)
        /
   |/| /
   / |/
   | /
   |/
   /
  /
 /
/ Y' [= B x (V_sw x B)]



; =>  X'Y'-Plane:  Defined by (V_sw x B) and [B x (V_sw x B)]
; =>  Z'        :  Defined by B
; =>  X'        :  Defined by (V_sw x B)
; =>  Y'        :  Defined by B x (V_sw x B)


          X' (= V_sw x B)
         |
         |
         |
         |
         |
         |
         |
         |
         |
         |                       B
         |______________________\____ Z'
        / \   |_|               /
       /   \    |
      /     \   |
     /       \  |
    /         \ |
   /           \| V_sw
  /
 /
/ Y' [= B x (V_sw x B)]





