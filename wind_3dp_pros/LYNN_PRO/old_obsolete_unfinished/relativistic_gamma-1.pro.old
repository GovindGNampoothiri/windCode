;*****************************************************************************************
;
;  FUNCTION :   energy_2_relgam.pro
;  PURPOSE  :   This routine converts an input energy and rest mass to the relativistic
;                 Lorentz factor often represented as a lower-case Greek gamma.  This is
;                 calculated as:
;
;                   KE = m c^2 (¥ - 1)
;
;                 then we have for gamma:
;
;                   ¥ = 1 + KE/(m c^2)
;
;  CALLED BY:   
;               relativistic_gamma.pro
;
;  CALLS:
;               is_a_number.pro
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               NRG       :  [N]-Element [float/double] array of energies [eV]
;               MASS      :  Scalar [float/double] particle mass [eV/(km/sec)^2]
;                              [semi-optional if keywords are set]
;
;  EXAMPLES:    
;               NA
;
;  KEYWORDS:    
;               NA
;
;   CHANGED:  1)  Continued to write routine
;                                                                   [04/18/2015   v1.0.0]
;             2)  Continued to write routine [removed keywords]
;                                                                   [04/18/2015   v1.0.0]
;
;   NOTES:      
;               1)  Does not currently allow for masses smaller than the electron
;               2)  user should not call this routine directly
;
;  REFERENCES:  
;               NA
;
;   CREATED:  04/15/2015
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  04/18/2015   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************

FUNCTION energy_2_relgam,nrg,mass

FORWARD_FUNCTION is_a_number
;;----------------------------------------------------------------------------------------
;;  Constants
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
me             = 9.1093829100d-31         ;;  Electron mass [kg, 2010 CODATA/NIST]
mp             = 1.6726217770d-27         ;;  Proton mass [kg, 2010 CODATA/NIST]
mn             = 1.6749273510d-27         ;;  Neutron mass [kg, 2010 CODATA/NIST]
ma             = 6.6446567500d-27         ;;  Alpha-Particle mass [kg, 2010 CODATA/NIST]
c              = 2.9979245800d+08         ;;  Speed of light in vacuum [m/s, 2010 CODATA/NIST]
epo            = 8.8541878170d-12         ;;  Permittivity of free space [F/m, 2010 CODATA/NIST]
muo            = !DPI*4.00000d-07         ;;  Permeability of free space [N/A^2 or H/m, 2010 CODATA/NIST]
qq             = 1.6021765650d-19         ;;  Fundamental charge [C, 2010 CODATA/NIST]
kB             = 1.3806488000d-23         ;;  Boltzmann Constant [J/K, 2010 CODATA/NIST]
;;  Temp. associated with 1 eV of energy [K]
K_eV           = qq[0]/kB[0]              ;; ~ 11,604.519 K/eV [2010 CODATA/NIST]
;;  Define speed of light in km/s
c2             = c[0]^2
ckm            = c[0]*1d-3                ;;  m --> km
ckm2           = ckm[0]^2                 ;;  (km/s)^2
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
test           = (N_PARAMS() NE 2) OR (is_a_number(nrg) EQ 0)
IF (test) THEN RETURN,0b
;;----------------------------------------------------------------------------------------
;;  Define parameters
;;----------------------------------------------------------------------------------------
def_mass       = ABS(mass[0])         ;;  do not allow negative mass
ener           = ABS(REFORM(nrg))     ;;  do not allow negative energies
;;----------------------------------------------------------------------------------------
;;  Calculate Lorentz factor:  ¥ = 1 + KE/(m c^2)
;;----------------------------------------------------------------------------------------
;;  Define rest mass energy [eV]
E_0            = def_mass[0]*ckm2[0]
;;  Define Lorentz factor
gamm           = 1d0 + ener/E_0[0]
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN,gamm
END


;*****************************************************************************************
;
;  FUNCTION :   speed_2_relgam.pro
;  PURPOSE  :   This routine converts an input particle speed to the relativistic
;                 Lorentz factor often represented as a lower-case Greek gamma.  This is
;                 calculated as:
;
;                   KE = m c^2 (¥ - 1)
;
;                 then we have for gamma:
;
;                   ¥^(-2) = 1 - (v/c)^2
;
;  CALLED BY:   
;               relativistic_gamma.pro
;
;  CALLS:
;               is_a_number.pro
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               SPEED     :  [N]-Element [float/double] array of speeds [km/s]
;
;  EXAMPLES:    
;               NA
;
;  KEYWORDS:    
;               NA
;
;   CHANGED:  1)  Continued to write routine
;                                                                   [04/18/2015   v1.0.0]
;             2)  Continued to write routine
;                                                                   [04/18/2015   v1.0.0]
;
;   NOTES:      
;               1)  Does not currently allow for superluminal speeds
;               2)  **  Speeds must be in units of km/s  **
;               3)  user should not call this routine directly
;
;  REFERENCES:  
;               NA
;
;   CREATED:  04/15/2015
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  04/18/2015   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************

FUNCTION speed_2_relgam,speed

FORWARD_FUNCTION is_a_number
;;----------------------------------------------------------------------------------------
;;  Constants
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
c              = 2.9979245800d+08         ;;  Speed of light in vacuum [m/s, 2010 CODATA/NIST]
c2             = c[0]^2
ckm            = c[0]*1d-3                ;;  m --> km
ckm2           = ckm[0]^2                 ;;  (km/s)^2
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
test           = (N_PARAMS() NE 1) OR (is_a_number(speed) EQ 0)
IF (test) THEN RETURN,0b
;;  Make sure speeds are subluminal
ss             = REFORM(speed)
test           = (ss GE ckm[0])
bad            = WHERE(test,bd,COMPLEMENT=good,NCOMPLEMENT=gd)
IF (gd EQ 0) THEN RETURN,0b
IF (bd GT 0) THEN ss[bad] = f
;;----------------------------------------------------------------------------------------
;;  Calculate Lorentz factor:  ¥^(-2) = 1 - (v/c)^2
;;----------------------------------------------------------------------------------------
;;  Define beta
rbeta          = ss/ckm[0]
;;  Define denominator
denom          = SQRT(1d0 - rbeta^2)
;;  Define Lorentz factor
gamm           = 1d0/denom
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN,gamm
END


;+
;*****************************************************************************************
;
;  FUNCTION :   relativistic_gamma.pro
;  PURPOSE  :   This routine converts either an input particle speed or energy to the
;                 relativistic Lorentz factor often represented as a lower-case Greek
;                 gamma.  This is calculated as:
;
;                   ¥ = 1 + KE/(m c^2)
;
;                 or:
;
;                   ¥^(-2) = 1 - (v/c)^2
;
;  CALLED BY:   
;               NA
;
;  INCLUDES:
;               energy_2_relgam.pro
;               speed_2_relgam.pro
;
;  CALLS:
;               is_a_number.pro
;               energy_2_relgam.pro
;               speed_2_relgam.pro
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               SP_OR_EN  :  [N]-Element [float/double] array of energies [eV]
;               MASS      :  Scalar [float/double] particle mass [kg]
;                              [semi-optional if keywords are set]
;
;  EXAMPLES:    
;               ;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;               ;;  Calculate the relativistic Lorentz factor for electrons with input
;               ;;    speeds in units of km/s
;               ;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;               rgam = relativistic_gamma(speeds,me,/SPEED)
;               ;;  or
;               rgam = relativistic_gamma(speeds,/SPEED,/ELECTRON)
;               ;;  or
;               rgam = relativistic_gamma(speeds,/SPEED)
;               ;;  or
;               rgam = relativistic_gamma(speeds,/SPEED,/ELECTRON)
;               ;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;               ;;  Calculate the relativistic Lorentz factor for electrons with input
;               ;;    energies in units of eV
;               ;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;               rgam = relativistic_gamma(energies,me)
;               ;;  or
;               rgam = relativistic_gamma(energies,/ELECTRON)
;
;  KEYWORDS:    
;               SPEED     :  If set, program assumes NRG input is a speed [km/s].  If not
;                              set, then the routine assumes NRG is an array of
;                              energies [eV].
;                              [Default = FALSE]
;               ELECTRON  :  If set, use electron mass [eV/(km/sec)^2]
;                              [Default = TRUE]
;               PROTON    :  If set, use proton mass [eV/(km/sec)^2]
;                              [Default = FALSE]
;               NEUTRON   :  If set, use neutron mass [eV/(km/sec)^2]
;                              [Default = FALSE]
;               ALPHA_P   :  If set, use alpha-particle mass [eV/(km/sec)^2]
;                              [Default = FALSE]
;
;   CHANGED:  1)  Continued to write routine
;                                                                   [04/18/2015   v1.0.0]
;
;   NOTES:      
;               1)  Does not currently allow for masses smaller than the electron
;               2)  Does not currently allow for superluminal speeds
;               3)  **  Speeds must be in units of km/s  **
;
;  REFERENCES:  
;               
;
;   CREATED:  04/18/2015
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  04/18/2015   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

FUNCTION relativistic_gamma,sp_or_en,mass,SPEED=speed,ELECTRON=elec,PROTON=prot,$
                            NEUTRON=neutron,ALPHA_P=alpha_p

FORWARD_FUNCTION is_a_number
;;----------------------------------------------------------------------------------------
;;  Constants
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
me             = 9.1093829100d-31         ;;  Electron mass [kg, 2010 CODATA/NIST]
mp             = 1.6726217770d-27         ;;  Proton mass [kg, 2010 CODATA/NIST]
mn             = 1.6749273510d-27         ;;  Neutron mass [kg, 2010 CODATA/NIST]
ma             = 6.6446567500d-27         ;;  Alpha-Particle mass [kg, 2010 CODATA/NIST]
c              = 2.9979245800d+08         ;;  Speed of light in vacuum [m/s, 2010 CODATA/NIST]
epo            = 8.8541878170d-12         ;;  Permittivity of free space [F/m, 2010 CODATA/NIST]
muo            = !DPI*4.00000d-07         ;;  Permeability of free space [N/A^2 or H/m, 2010 CODATA/NIST]
qq             = 1.6021765650d-19         ;;  Fundamental charge [C, 2010 CODATA/NIST]
kB             = 1.3806488000d-23         ;;  Boltzmann Constant [J/K, 2010 CODATA/NIST]
;;  Temp. associated with 1 eV of energy [K]
K_eV           = qq[0]/kB[0]              ;; ~ 11,604.519 K/eV [2010 CODATA/NIST]
;;  Define mass of particles in units of energy [eV]
c2             = c[0]^2
me_eV          = me[0]*c2[0]/qq[0]        ;;  Electron mass ~0.510998928(11) MeV
mp_eV          = mp[0]*c2[0]/qq[0]        ;;  Proton mass ~938.272046(21) MeV
mn_eV          = mn[0]*c2[0]/qq[0]        ;;  Neutron mass ~939.565379(21) MeV
ma_eV          = ma[0]*c2[0]/qq[0]        ;;  Alpha-Particle mass ~3727.379240(82) MeV
;;  Define mass of particles in units of energy per c^2 [eV km^(-2) s^(2)]
ckm            = c[0]*1d-3                ;;  m --> km
ckm2           = ckm[0]^2                 ;;  (km/s)^2
me_eVkms2      = me_eV[0]/ckm2[0]         ;;  Electron mass [eV km^(-2) s^(2)]
mp_eVkms2      = mp_eV[0]/ckm2[0]         ;;  Proton mass [eV km^(-2) s^(2)]
mn_eVkms2      = mn_eV[0]/ckm2[0]         ;;  Neutron mass [eV km^(-2) s^(2)]
ma_eVkms2      = ma_eV[0]/ckm2[0]         ;;  Alpha-Particle mass [eV km^(-2) s^(2)]
;;  Error messages
usedef_suffx   = ';  using default = electron mass [kg]'
noinput_mssg   = 'Incorrect number of inputs were supplied...'
badinmass_mssg = 'Incorrect input:  MASS must be a scalar particle mass [kg] greater than the electron mass'+usedef_suffx[0]
usedefu_mssg   = 'User did not define an input mass'+usedef_suffx[0]
usedefukmssg   = 'User did not define an input mass or set any keywords'+usedef_suffx[0]
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
test           = ((N_PARAMS() LT 1) OR (N_PARAMS() GT 2)) OR (is_a_number(sp_or_en) EQ 0)
IF (test) THEN BEGIN
  MESSAGE,noinput_mssg[0],/INFORMATIONAL,/CONTINUE
  RETURN,0b
ENDIF

;;  Check SPEED keyword
test           = KEYWORD_SET(speed) AND (N_ELEMENTS(speed) GT 0)
IF (test) THEN BEGIN
  ;;  Input is in units of km/s --> calculate ¥ directly
  rgamma = speed_2_relgam(sp_or_en)
  RETURN,rgamma
ENDIF
;;----------------------------------------------------------------------------------------
;;  Input in energy --> define mass
;;----------------------------------------------------------------------------------------
check          = [KEYWORD_SET(elec),KEYWORD_SET(prot),KEYWORD_SET(neutron),KEYWORD_SET(alpha_p)]
good           = WHERE(check,gd)
keymasses      = [me_eVkms2[0],mp_eVkms2[0],mn_eVkms2[0],ma_eVkms2[0]]
test           = (N_PARAMS() LT 2) AND (gd EQ 0)
IF (test) THEN BEGIN
  ;;  User did not define a mass or any keywords
  MESSAGE,usedefukmssg[0],/INFORMATIONAL,/CONTINUE
  def_mass = me_eVkms2[0]
ENDIF ELSE BEGIN
  IF (N_PARAMS() EQ 1) THEN BEGIN
    ;;  User did not define a mass --> Check keywords
    IF (gd EQ 0) THEN BEGIN
      ;;  User did not set any keywords either --> use default
      MESSAGE,usedefu_mssg[0],/INFORMATIONAL,/CONTINUE
      def_mass = me_eVkms2[0]
    ENDIF ELSE BEGIN
      ;;  User set a keyword --> define associated mass
      def_mass = keymasses[good[0]]
    ENDELSE
  ENDIF ELSE BEGIN
    ;;  User defined a mass --> check
    test           = (ABS(mass[0]) LT me[0]) OR (ABS(mass[0]) GT me_eVkms2[0])
    IF (test) THEN BEGIN
      ;;  Either incorrect input units or disallowed mass
      MESSAGE,badinmass_mssg[0],/INFORMATIONAL,/CONTINUE
      def_mass = me_eVkms2[0]
    ENDIF ELSE BEGIN
      ;;  Correct input --> convert kg to eV km^(-2) s^(2)
      mass_eV  = ABS(mass[0])*c2[0]/qq[0]  ;;  kg --> eV
      def_mass = mass_eV[0]/ckm2[0]        ;;  eV --> eV km^(-2) s^(2)
    ENDELSE
  ENDELSE
ENDELSE
;;----------------------------------------------------------------------------------------
;;  Make sure a mass is defined
;;----------------------------------------------------------------------------------------
IF ((gd GT 0) AND (N_ELEMENTS(def_mass) EQ 0)) THEN BEGIN
  ;;  At least one keyword is set --> use first
  CASE good[0] OF
    0     :  def_mass = me_eVkms2[0]
    1     :  def_mass = mp_eVkms2[0]
    2     :  def_mass = mn_eVkms2[0]
    3     :  def_mass = ma_eVkms2[0]
    ELSE  :  def_mass = me_eVkms2[0]  ;;  use default [not sure how this happened]
  ENDCASE
ENDIF
;;----------------------------------------------------------------------------------------
;;  Calculate ¥
;;----------------------------------------------------------------------------------------
rgamma         = energy_2_relgam(sp_or_en,def_mass[0])
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN,rgamma
END