;+
;*****************************************************************************************
;
;  FUNCTION :   rotate_3dp_structure.pro
;  PURPOSE  :   Rotates a 3DP data structure into coordinate system defined by user
;                 defined keyword inputs.  The routine adds tags to the input structure
;                 that define triangulated data in three plane projections.  The new
;                 structure tags are:
;                   VX2D[VY2D]  :  Regularly gridded velocities to use as X[Y]-axis
;                                    input for contour plot outputs
;                   DF2D_JK     :  Regularly gridded phase space densities projected
;                                    onto the JK-Plane [e.g. XY-Plane]
;                   VELX_JK     :  Horizontal axis velocities (actual data) that can be
;                                    projected onto contours to show where actual data
;                                    points were observed in JK-Plane
;                   VELY_JK     :  Vertical axis velocities (actual data) that can be
;                                    projected onto contours to show where actual data
;                                    points were observed in JK-Plane
;                   VELZ_JK     :  Velocities orthogonal to plane containing DF2D_JK
;                   ROT_MAT     :  [3,3]-Element array defining the rotation matrix to
;                                    convert from the input basis to new rotated basis
;                   ROT_MAT_Z   :  [3,3]-Element array defining the rotation matrix to
;                                    convert from the input basis to the YZ-Projection
;
;  CALLED BY:   
;               contour_3d_1plane.pro
;
;  CALLS:
;               test_wind_vs_themis_esa_struct.pro
;               conv_units.pro
;               str_element.pro
;               cal_rot.pro
;               rot_mat.pro
;               velocity.pro
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               DAT        :  3DP data structure either from get_??.pro
;                               with defined structure tag quantities for VSW
;               VECTOR1    :  3-Element vector to be used for horizontal axis in a 2D
;                               projected contour plot [e.g. see eh_cont3d.pro]
;                               [Default = {1.,0.,0.} or sun direction]
;               VECTOR2    :  3-Element vector to be used to define the plane made with 
;                               VECTOR1  [Default = {0.,1.,0.}]
;
;  EXAMPLES:    
;               ;;....................................................................
;               ;; => Define a time of interest
;               ;;....................................................................
;               to      = time_double('1998-08-09/16:00:00')
;               ;;....................................................................
;               ;; => Get a Wind 3DP PESA High data structure from level zero files
;               ;;....................................................................
;               dat     = get_ph(to)
;               ;;....................................................................
;               ;; => in the following lines, the strings correspond to TPLOT handles
;               ;;      and thus may be different for each user's preference
;               ;;....................................................................
;               add_vsw2,dat,'V_sw2'          ; => Add solar wind velocity to struct.
;               add_magf2,dat,'wi_B3(GSE)'    ; => Add magnetic field to struct.
;               add_scpot,dat,'sc_pot_3'      ; => Add spacecraft potential to struct.
;               ;;....................................................................
;               ;; => Convert to solar wind frame
;               ;;....................................................................
;               transform_vframe_3d,dat,/EASY_TRAN
;               ;;....................................................................
;               ;; => Rotate into field-aligned coordinates in plane defined by the
;               ;;      solar wind velocity and ambient magnetic field
;               ;;....................................................................
;               vec1  = dat.MAGF
;               vec2  = dat.VSW
;               vlim  = 25d2                   ; => velocity range limit [km/s]
;               rotate_3dp_structure,dat,vec1,vec2,VLIM=vlim
;               ;;....................................................................
;               ;; => Define parameters for contour plot
;               ;;....................................................................
;               ngrid    = 20L                 ; => # of grids to use
;               dfra     = [1e-16,2e-10]       ; => define a range for contour levels
;               !P.MULTI = [0,1,2]
;               xyra     = [-1d0,1d0]*vlim[0]  ; => XY-Axes range for contour plot
;               range    = ALOG10(dfra)
;               dlogra   = (range[1] - range[0])/(ngrid[0] - 1L)
;               loglev   = FINDGEN(ngrid[0])*dlogra[0] + range[0]
;               levels   = 1d1^loglev          ; => Values of contour plot levels
;               ; => Define colors associated with contour levels
;               c_cols   = LINDGEN(ngrid[0])*(250L - 30L)/(ngrid[0] - 1L) + 30L
;               ; => Define contour plot limits structures
;               lim_c0   = {XSTYLE:1,YSTYLE:1,XRANGE:xyra,YRANGE:xyra,NODATA:1}
;               constr   = {OVERPLOT:1,LEVELS:levels,C_COLORS:c_cols}
;               ; => Define a new user symbol for outputting velocity locations
;               xxo      = FINDGEN(17)*(!PI*2./16.)
;               USERSYM,0.25*COS(xxo),0.25*SIN(xxo),/FILL
;               ;;....................................................................
;               ;;....................................................................
;               ;; => Plot contours of phase space density
;               ;;....................................................................
;               ;;....................................................................
;               ;; => XY-Plane
;               PLOT,[0.0,1.0],[0.0,1.0],_EXTRA=lim_c0    ; => empty plot
;                 ; => overplot locations of actual data points
;                 OPLOT,dat.VELX_XY,dat.VELY_XY,PSYM=8,SYMSIZE=1.0,COLOR=100
;                 ; => plot contours
;                 CONTOUR,dat.DF2D_XY,dat.VX2D,dat.VY2D,_EXTRA=constr
;               ;; => XZ-Plane
;               PLOT,[0.0,1.0],[0.0,1.0],_EXTRA=lim_c0    ; => empty plot
;                 ; => overplot locations of actual data points
;                 OPLOT,dat.VELX_XZ,dat.VELY_XZ,PSYM=8,SYMSIZE=1.0,COLOR=100
;                 ; => plot contours
;                 CONTOUR,dat.DF2D_XZ,dat.VX2D,dat.VY2D,_EXTRA=constr
;
;  KEYWORDS:    
;               VLIM       :  Scalar velocity [km/s] range limit
;                               [Default = max vel. from energy bin values]
;
;   CHANGED:  1)  Now calls test_wind_vs_themis_esa_struct.pro and no longer calls
;                   test_3dp_struc_format.pro                      [03/29/2012   v1.1.0]
;
;   NOTES:      
;               1)  This routine modifies the input structure, DAT, so make sure
;                     you make a copy of the original prior to calling.
;               2)  To be useful, the data should be transformed into the solar wind
;                     frame prior to calling this routine.
;
;   CREATED:  02/09/2012
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  03/29/2012   v1.1.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

PRO rotate_3dp_structure,dat,vector1,vector2,VLIM=vlim

;-----------------------------------------------------------------------------------------
; => Define some constants and dummy variables
;-----------------------------------------------------------------------------------------
f          = !VALUES.F_NAN
d          = !VALUES.D_NAN
; => Dummy error messages
notstr_msg = 'Must be an IDL structure...'
;-----------------------------------------------------------------------------------------
; => Check input
;-----------------------------------------------------------------------------------------
; => Check DAT structure format
;  LBW III  03/29/2012   v1.3.0
;test       = test_3dp_struc_format(dat)
test0      = test_wind_vs_themis_esa_struct(dat,/NOM)
test       = (test0.(0) + test0.(1)) NE 1
IF (test) THEN BEGIN
  MESSAGE,notstr_msg,/INFORMATIONAL,/CONTINUE
  RETURN
ENDIF
data       = dat[0]
; => convert to phase space density
;  LBW III  03/29/2012   v1.4.0
IF (test0.(0)) THEN BEGIN
  ;-------------------------------------------
  ; Wind
  ;-------------------------------------------
  ; => Check which instrument is being used
  strns   = dat_3dp_str_names(data[0])
  IF (SIZE(strns,/TYPE) NE 8) THEN BEGIN
    ; => Create empty plot
    !P.MULTI = 0
    PLOT,[0.0,1.0],[0.0,1.0],/NODATA
    RETURN
  ENDIF
  shnme   = STRLOWCASE(STRMID(strns.SN[0],0L,2L))
  CASE shnme[0] OF
    'ph' : BEGIN
      convert_ph_units,data,'df'
    END
    ELSE : BEGIN
      data   = conv_units(data,'df')
    END
  ENDCASE
ENDIF ELSE BEGIN
  ;-------------------------------------------
  ; THEMIS
  ;-------------------------------------------
  ; => make sure the structure has been modified
  test_un = STRLOWCASE(data.UNITS_PROCEDURE) NE 'thm_convert_esa_units_lbwiii'
  IF (test_un) THEN BEGIN
    bad_in = 'If THEMIS ESA structures used, then they must be modified using modify_themis_esa_struc.pro'
    MESSAGE,bad_in[0],/INFORMATIONAL,/CONTINUE
    RETURN
  ENDIF
  ; => structure modified appropriately so convert units
  data   = conv_units(data,'df')
ENDELSE

IF (N_ELEMENTS(vector1) NE 3) THEN vec1 = [1.,0.,0.] ELSE vec1 = REFORM(vector1)
IF (N_ELEMENTS(vector2) NE 3) THEN vec2 = [0.,1.,0.] ELSE vec2 = REFORM(vector2)

IF NOT KEYWORD_SET(vlim) THEN BEGIN
  vlim = MAX(SQRT(2*data[0].ENERGY/data[0].MASS),/NAN)
ENDIF ELSE BEGIN
  vlim = FLOAT(vlim)
ENDELSE
dgs        = vlim[0]/5e1
gs         = [dgs,dgs]                   ; => grid spacing for triangulation used later
xylim      = [-1*vlim[0],-1*vlim[0],vlim[0],vlim[0]]
dumb1d     = REPLICATE(d,101L)
dumb2d     = REPLICATE(d,101L,101L)
; => Force regularly gridded velocities (for contour plots)
vx2d       = -1e0*vlim[0] + gs[0]*FINDGEN(FIX((2e0*vlim[0])/gs[0]) + 1L)
vy2d       = -1e0*vlim[0] + gs[1]*FINDGEN(FIX((2e0*vlim[0])/gs[1]) + 1L)

; => Add the regularly gridded velocities to data structure
;      Note:  these velocities correspond to the results from triangulation
str_element,data,'VX2D',vx2d,/ADD_REPLACE
str_element,data,'VY2D',vy2d,/ADD_REPLACE
;-----------------------------------------------------------------------------------------
; => Define rotation matrix
;-----------------------------------------------------------------------------------------
rotm       = cal_rot(vec1,vec2)
rotz       = rot_mat(vec1,vec2)
;-----------------------------------------------------------------------------------------
; => Define DAT structure parameters
;-----------------------------------------------------------------------------------------
n_e        = data.NENERGY            ; => # of energy bins
n_a        = data.NBINS              ; => # of angle bins

energy     = data.ENERGY             ; => Energy bin values [eV]
df_dat     = data.DATA               ; => Data values [data.UNITS_NAME]
phi        = data.PHI                ; => Azimuthal angle (from sun direction) [deg]
the        = data.THETA              ; => Poloidal angle (from ecliptic plane) [deg]
mass       = data[0].MASS[0]         ; => particle mass [eV km^(-2) s^(2)]
;-----------------------------------------------------------------------------------------
; => Reform 2D arrays into 1D
;-----------------------------------------------------------------------------------------
dat_1d     = REFORM(df_dat,n_e*n_a)
ener_1d    = REFORM(energy,n_e*n_a)
phi_1d     = REFORM(phi,n_e*n_a)
the_1d     = REFORM(the,n_e*n_a)
; => Magnitude of velocities from energy (km/s)
vmag       = velocity(ener_1d,mass[0],/TRUE)
;-----------------------------------------------------------------------------------------
; => Convert energies/angles to cartesian velocity equivalents
;-----------------------------------------------------------------------------------------
coth       = COS(the_1d*!DPI/18d1)
sith       = SIN(the_1d*!DPI/18d1)
coph       = COS(phi_1d*!DPI/18d1)
siph       = SIN(phi_1d*!DPI/18d1)
uvecx      = coth*coph             ; => X-direction
uvecy      = coth*siph             ; => Y-direction
uvecz      = sith                  ; => Z-direction

velx       = vmag*uvecx
vely       = vmag*uvecy
velz       = vmag*uvecz
vel_0      = [[velx],[vely],[velz]]
;-----------------------------------------------------------------------------------------
; => Rotate velocities into new coordinate basis and triangulate
;-----------------------------------------------------------------------------------------
vel_r      = REFORM(rotm ## vel_0)
vel2dx     = REFORM(vel_r[*,0])
vyz2d      = SQRT(TOTAL(vel_r[*,1:2]^2,2,/NAN))
vel2dy     = vyz2d*REFORM(vel_r[*,1])/ABS(REFORM(vel_r[*,1]))
vel2dz     = vyz2d*REFORM(vel_r[*,2])/ABS(REFORM(vel_r[*,2]))

vel_z      = REFORM(rotz ## vel_0)
vyz2d_z    = SQRT(TOTAL(vel_z[*,1:2]^2,2,/NAN))
vel2dx_z   = REFORM(vel_z[*,0])
vel2dy_z   = vyz2d_z*REFORM(vel_z[*,1])/ABS(REFORM(vel_z[*,1]))
vel2dz_z   = vyz2d_z*REFORM(vel_z[*,2])/ABS(REFORM(vel_z[*,2]))
;-----------------------------------------------------------------------------------------
;  => ONLY Finite data is allowed in TRIANGULATE.PRO and TRIGRID.PRO
;-----------------------------------------------------------------------------------------
testf      = (FINITE(dat_1d) EQ 1) AND (dat_1d GE 0.)
testv      = (FINITE(vel2dx) EQ 1) AND (FINITE(vel2dy) EQ 1) AND (FINITE(vel2dz) EQ 1)
indx       = WHERE(testf AND testv,cnt)
IF (cnt GT 0L) THEN BEGIN
  vel2dx_2 = vel2dx[indx]
  vel2dy_2 = vel2dy[indx]
  vel2dz_2 = vel2dz[indx]
  dat_1d2  = dat_1d[indx]
  ;---------------------------------------------------------------------------------------
  ; => Y vs. X Plane projection
  ;---------------------------------------------------------------------------------------
  TRIANGULATE, vel2dx_2, vel2dy_2, tr
  ; => put DF on regular grid
  df2d_xy  = TRIGRID(vel2dx_2,vel2dy_2,dat_1d2,tr,gs,xylim)
  vx2d_xy  = vel2dx_2
  vy2d_xy  = vel2dy_2
  vz2d_xy  = vel2dz_2
  ;---------------------------------------------------------------------------------------
  ; => X vs. Z Plane projection
  ;---------------------------------------------------------------------------------------
  TRIANGULATE, vel2dz_2, vel2dx_2, tr
  ; => put DF on regular grid
  df2d_xz  = TRIGRID(vel2dz_2,vel2dx_2,dat_1d2,tr,gs,xylim)
  vx2d_xz  = vel2dz_2
  vy2d_xz  = vel2dx_2
  vz2d_xz  = vel2dy_2
ENDIF ELSE BEGIN
  MESSAGE,'No finite XY data',/CONTINUE,/INFORMATIONAL
  ; => X-Y Plane projection
  df2d_xy  = dumb2d
  vx2d_xy  = dumb1d
  vy2d_xy  = dumb1d
  vz2d_xy  = dumb1d
  ; => X-Z Plane projection
  df2d_xz  = dumb2d
  vx2d_xz  = dumb1d
  vy2d_xz  = dumb1d
  vz2d_xz  = dumb1d
ENDELSE

testf      = (FINITE(dat_1d) EQ 1) AND (dat_1d GE 0.)
testv      = (FINITE(vel2dx_z) EQ 1) AND (FINITE(vel2dy_z) EQ 1) AND (FINITE(vel2dz_z) EQ 1)
indx       = WHERE(testf AND testv,cnt)
IF (cnt GT 0L) THEN BEGIN
  vel2dx_z = vel2dx_z[indx]
  vel2dy_z = vel2dy_z[indx]
  vel2dz_z = vel2dz_z[indx]
  dat_1dz  = dat_1d[indx]
  ;---------------------------------------------------------------------------------------
  ; => Z vs. Y Plane projection
  ;---------------------------------------------------------------------------------------
  TRIANGULATE, vel2dx_z, vel2dy_z, tr
  df2d_yz  = TRIGRID(vel2dx_z,vel2dy_z,dat_1dz,tr,gs,xylim)
  vx2d_yz  = vel2dx_z
  vy2d_yz  = vel2dy_z
  vz2d_yz  = vel2dz_z
ENDIF ELSE BEGIN
  MESSAGE,'No finite Z data',/CONTINUE,/INFORMATIONAL
  ; => Y-Z Plane projection
  df2d_yz  = dumb2d
  vx2d_yz  = dumb1d
  vy2d_yz  = dumb1d
  vz2d_yz  = dumb1d
  vx2d_yzg = dumb1d
  vy2d_yzg = dumb1d
ENDELSE
;-----------------------------------------------------------------------------------------
; => Add new data to original structure
;-----------------------------------------------------------------------------------------
; => X-Y Plane projection
str_element,data,'DF2D_XY',df2d_xy,/ADD_REPLACE
str_element,data,'VELX_XY',vx2d_xy,/ADD_REPLACE
str_element,data,'VELY_XY',vy2d_xy,/ADD_REPLACE
str_element,data,'VELZ_XY',vz2d_xy,/ADD_REPLACE
; => X-Z Plane projection
str_element,data,'DF2D_XZ',df2d_xz,/ADD_REPLACE
str_element,data,'VELX_XZ',vx2d_xz,/ADD_REPLACE
str_element,data,'VELY_XZ',vy2d_xz,/ADD_REPLACE
str_element,data,'VELZ_XZ',vz2d_xz,/ADD_REPLACE
; => Y-Z Plane projection
str_element,data,'DF2D_YZ',df2d_yz,/ADD_REPLACE
str_element,data,'VELX_YZ',vx2d_yz,/ADD_REPLACE
str_element,data,'VELY_YZ',vy2d_yz,/ADD_REPLACE
str_element,data,'VELZ_YZ',vz2d_yz,/ADD_REPLACE
; => X-Y and X-Z Plane projection rotation
str_element,data,'ROT_MAT',rotm,/ADD_REPLACE
; => Y-Z Plane projection rotation
str_element,data,'ROT_MAT_Z',rotz,/ADD_REPLACE
;-----------------------------------------------------------------------------------------
; => Return altered data structure to user
;-----------------------------------------------------------------------------------------
dat        = data

RETURN
END
