;+
;*****************************************************************************************
;
;  FUNCTION :   merge_adjacent_int.pro
;  PURPOSE  :   This routine merges adjacent intervals that are separated by ≤ 1
;                 element.
;
;  CALLED BY:   
;               t_interval_find.pro
;
;  CALLS:
;               NA
;
;  REQUIRES:    
;               NA
;
;  INPUT:
;               SE_INT  :  [N,2]-Element [integer] array from t_interval_find.pro
;
;  EXAMPLES:    
;               NA
;
;  KEYWORDS:    
;               NA
;
;   CHANGED:  1)  NA [MM/DD/YYYY   v1.0.0]
;
;   NOTES:      
;               1)  User should not call this routine
;
;  REFERENCES:  
;               
;
;   CREATED:  09/09/2013
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  09/09/2013   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

FUNCTION merge_adjacent_int,se_int

;;----------------------------------------------------------------------------------------
;;  Define dummy variables
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
IF (N_PARAMS() NE 1) THEN RETURN,-1
test           = (N_ELEMENTS(se_int) LE 2)
IF (test) THEN RETURN,se_int
;;----------------------------------------------------------------------------------------
;;  Define Parameters
;;----------------------------------------------------------------------------------------
start          = se_int[*,0]
stops          = se_int[*,1]
thick          = stops - start
wint           = N_ELEMENTS(start)
;;----------------------------------------------------------------------------------------
;;  Check intervals
;;----------------------------------------------------------------------------------------
test           = (thick LE 0)
badn           = WHERE(test,bdn)
test0          = (bdn GT 0) AND (badn[0] NE 0)
test1          = (bdn GT 0) AND (badn[0] EQ 0) AND (MAX(badn) NE wint)
test2          = (test0 OR test1)

test           = (bdn GT 0)
IF (test) THEN BEGIN
  ;;  adjacent intervals exist
  merge      = REPLICATE(0L,bdn,2)
  nmer       = bdn
  ;;  fill values
  IF (test0) THEN BEGIN
    merge = ([[badn - 1L],[badn]]) > 0L
  ENDIF ELSE BEGIN
    merge = ([[badn],[badn + 1L]]) < (wint - 1L)
  ENDELSE
ENDIF ELSE BEGIN
  ;;  all intervals are at least 2 elements long
  out_se     = se_int
  nmer       = 0
  merge      = 0
ENDELSE
;;----------------------------------------------------------------------------------------
;;  Merge intervals if necessary
;;----------------------------------------------------------------------------------------
IF (nmer GT 0) THEN BEGIN
  se_nint = se_int
  FOR j=0L, nmer - 1L DO BEGIN
    bels            = REFORM(merge[j,*])
    lels            = se_nint[bels[0],0]
    hels            = se_nint[bels[1],1]
    se_nint[bels,0] = lels
    se_nint[bels,1] = hels
  ENDFOR
  ;;  Determine unique elements
  unql    = UNIQ(se_nint[*,0],SORT(se_nint[*,0]))
  sp      = SORT(unql)
  unql    = unql[sp]
  ;;  Redefine intervals
  out_se  = se_nint[unql,*]
ENDIF
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN,out_se
END


;+
;*****************************************************************************************
;
;  FUNCTION :   t_interval_find.pro
;  PURPOSE  :   Finds the start/end elements of the data gaps in a timeseries that
;                 contains data gaps or is composed of discontinuously sampled data
;                 [e.g. THEMIS EFI or SCM in Wave Burst mode].
;
;  CALLED BY:   
;               NA
;
;  CALLS:
;               sample_rate.pro
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               TIME        :  [N]-Element array of time stamps [s] associated with
;                                a time series with data gaps or is discontinuously
;                                sampled
;
;  EXAMPLES:    
;               NA
;
;  KEYWORDS:    
;               GAP_THRESH  :  Scalar [double/float] defining the maximum data gap [s] allowed in
;                                the calculation
;                                [Default = 4/Sr, Sr = sample rate (sampls/s)]
;               NAN         :  If set, routine will treat NaNs as data gaps
;                                [Default = 0]
;               MERGE       :  If set, routine will merge adjacent indices to avoid
;                                a return array where the difference between the
;                                start and end elements equals zero.  This keyword is
;                                useful when the NAN keyword is set.
;                                [Default = 0]
;
;   CHANGED:  1)  Continued writing routine
;                   --> Fixed an issue with element definitions
;                                                                   [07/17/2012   v1.0.0]
;             2)  Added keywords:  NAN and MERGE and
;                   now calls merge_adjacent_int.pro
;                                                                   [09/09/2013   v1.1.0]
;
;   NOTES:      
;               1)  The output is a [K,2]-element array of [start,end] elements
;                     corresponding to the regions of uniformly sampled data
;               2)  Technically the units do not matter so long as they are consistent
;                     between TIME and GAP_THRESH
;
;  REFERENCES:  
;               
;
;   CREATED:  07/16/2012
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  09/09/2013   v1.1.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

FUNCTION t_interval_find,time,GAP_THRESH=gap_thresh,NAN=nan,MERGE=merge

;;----------------------------------------------------------------------------------------
;;  Define dummy variables
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
IF (N_PARAMS() NE 1) THEN RETURN,-1

tt             = REFORM(time)
nt             = N_ELEMENTS(tt)
IF (nt LE 3) THEN RETURN,-1
;;  Define the total time between the first and last data point
trange         = MAX(tt,/NAN) - MIN(tt,/NAN)
;;  Define shifted difference, ∆t [s]
lower          = LINDGEN(nt - 1L)
upper          = lower + 1L
sh_diff        = [0d0,(tt[upper] - tt[lower])]
;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;;  Note:
;;          t[k]   =   kth element of timestamps
;;                {= [N]-element array}
;;         ∆t_ij   =   t[j] - t[i]
;;                {= [N]-element array of time differences between adjacent elements}
;;         ∂t      =   sample period
;;          S[k]   =   kth element of start elements
;;          E[k]   =   kth element of end   elements
;;
;;         ∆t[k]  ==   kth element of ∆t { <---> ∆t_ij }
;;            k   -->  upper[j]
;;
;;         1)  ∆t[0] = NaN
;;         2)   (S[0] = 0L) & (E[{last element}] = N - 1L)
;;         3)  IF (∆t_ij > a * ∂t) => (S[k] = j) & (E[k] = i)
;;               {a = some factor > 1}
;;
;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
s0             = 0L       ;; 1st element of start element array
ee             = nt - 1L  ;; Last element of end element array
e_els          = [-1,upper]
s_els          = [lower,-1]
;;----------------------------------------------------------------------------------------
;;  Estimate the sample rate and gap threshold
;;----------------------------------------------------------------------------------------
srate          = DOUBLE(ROUND(sample_rate(tt,/AVERAGE)))
IF NOT KEYWORD_SET(gap_thresh) THEN BEGIN
  mx_gap = 4d0/srate[0]
ENDIF ELSE BEGIN
  mx_gap = gap_thresh[0]
  ;; check if finite
  test   = (FINITE(mx_gap[0]) EQ 0)
  IF (test) THEN BEGIN
    ;; use default
    mx_gap = 4d0/srate[0]
  ENDIF
ENDELSE

;;  Check if user wants to include NaNs as gaps
test           = (N_ELEMENTS(nan) EQ 0) OR ~KEYWORD_SET(nan)
IF (test) THEN use_nans = 0 ELSE use_nans = 1
;IF (test) THEN ignore_nans = 1 ELSE ignore_nans = 0
;;----------------------------------------------------------------------------------------
;;  Find where time-shifts exceed gap threshold
;;----------------------------------------------------------------------------------------
;IF (ignore_nans) THEN BEGIN
IF (use_nans) THEN BEGIN
;  test = (sh_diff GT mx_gap[0])
;ENDIF ELSE BEGIN
  find = WHERE(FINITE(sh_diff) EQ 0,fd)
  IF (fd GT 0) THEN sh_diff[find] = 1.01*mx_gap[0]
ENDIF
;  test = (sh_diff GT mx_gap[0]) OR (FINITE(sh_diff) EQ 0)
;ENDELSE
test           = (sh_diff GT mx_gap[0])
bad            = WHERE(test,bd,COMPLEMENT=good,NCOMPLEMENT=gd)
IF (bd GT 0 AND bd LT nt) THEN BEGIN
  ;;--------------------------------------------------------------------------------------
  ;;  found data gaps
  ;;--------------------------------------------------------------------------------------
  ;;  Define START elements
;  gel_sta = s_els[bad]
  gel_sta = [s0[0],s_els[bad]]  ;; add first element
  ;;  Define END elements
;  gel_end = e_els[bad] - 1L
  gel_end = [(e_els[bad] - 1L),ee[0]]  ;; add last element
ENDIF ELSE BEGIN
  IF (bd EQ nt) THEN RETURN,-1
  ;;  Define START elements
  gel_sta = [s0[0]]
  ;;  Define END elements
  gel_end = [ee[0]]
ENDELSE
;;----------------------------------------------------------------------------------------
;;  Check if user wishes to merge adjacent intervals
;;----------------------------------------------------------------------------------------
se_int         = [[gel_sta],[gel_end]]
test           = (N_ELEMENTS(merge) NE 0)
IF (test) THEN test   = (merge[0] NE 0)
IF (test) THEN out_int = merge_adjacent_int(se_int) ELSE out_int = se_int
;;----------------------------------------------------------------------------------------
;;  Return start/end elements to user
;;----------------------------------------------------------------------------------------

RETURN,out_int
END