;+
;*****************************************************************************************
;
;  PROCEDURE:   temp_create_stacked_energy_spec_2_tplot.pro
;  PURPOSE  :   
;
;  CALLED BY:   
;               
;
;  CALLS:
;               
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               DAT         :  [N]-Element [structure] array of THEMIS ESA or Wind/3DP
;                                IDL data structures containing the 3D velocity
;                                distribution functions to use to create the stacked
;                                energy spectra and pitch-angle plots
;
;  EXAMPLES:    
;               
;
;  KEYWORDS:    
;               **********************************
;               ***       DIRECT  INPUTS       ***
;               **********************************
;               LIMITS      :  Scalar [structure] that may contain any combination of the
;                                following structure tags or keywords accepted by
;                                PLOT.PRO:
;                                  XLOG,   YLOG,   ZLOG,
;                                  XRANGE, YRANGE, ZRANGE,
;                                  XTITLE, YTITLE,
;                                  TITLE, POSITION, REGION, etc.
;                                  (see IDL documentation for a description)
;               UNITS       :  Scalar [string] defining the units to use for the
;                                vertical axis of the plot and the outputs YDAT and DYDAT
;                                [Default = 'flux' or number flux]
;               BINS        :  [N]-Element [byte] array defining which solid angle bins
;                                should be plotted [i.e., BINS[good] = 1b] and which
;                                bins should not be plotted [i.e., BINS[bad] = 0b].
;                                One can also define bins as an array of indices that
;                                define which solid angle bins to plot.  If this is the
;                                case, then on output, BINS will be redefined to an
;                                array of byte values specifying which bins are TRUE or
;                                FALSE.
;                                [Default:  BINS[*] = 1b]
;               NAME        :  Scalar [string] defining the TPLOT handle for the energy
;                                spectra and prefix for the pitch-angle spectra
;                                [Default : '??_spec', ?? = 'el','eh','elb',etc.]
;               TRANGE      :  [2]-Element [double] array of Unix times specifying the
;                                time range over which to calculate spectra
;                                [Default : [MIN(DAT.TIME),MAX(DAT.END_TIME)] ]
;               ERANGE      :  [2]-Element [double] array defining the energy [eV] range
;                                over which to calculate spectra
;                                [Default : [MIN(DAT.ENERGY),MAX(DAT.ENERGY)] ]
;               _EXTRA      :  Scalar [structure] used by get_??.pro routines for Wind
;                                or thm_part_dist_array.pro routine for THEMIS
;
;   CHANGED:  1)  Continued to write routine
;                                                                   [02/01/2015   v1.0.0]
;
;   NOTES:      
;               
;
;  REFERENCES:  
;               
;
;   CREATED:  02/01/2015
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  02/01/2015   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

PRO temp_create_stacked_energy_spec_2_tplot,dat,LIMITS=limits,UNITS=units,BINS=bins,$
                                            NAME=name,TRANGE=trange,ERANGE=erange,  $
                                            _EXTRA=ex_str

;;----------------------------------------------------------------------------------------
;;  Define some constants and dummy variables
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
slash          = get_os_slash()         ;;  '/' for Unix, '\' for Windows
mission_logic  = [0b,0b]                ;;  Logic variable used for determining which mission is associated with DAT
;;  Dummy error messages
noinpt_msg     = 'User must supply an array of velocity distribution functions as IDL structures...'
notstr_msg     = 'DAT must be an array of IDL structures...'
notvdf_msg     = 'Input must be a velocity distribution function as an IDL structure...'
badtra_msg     = 'TRANGE must be a 2-element array of Unix times and DAT must have a range of times as well...'
badera_msg     = 'ERANGE must be a 2-element array of energies [eV] and DAT.ENERGY must have a range of energies as well...'
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
IF (N_PARAMS() LT 1) THEN BEGIN
  MESSAGE,noinpt_msg,/INFORMATIONAL,/CONTINUE
  RETURN
ENDIF
IF (SIZE(dat,/TYPE) NE 8L OR N_ELEMENTS(dat) LT 2) THEN BEGIN
  MESSAGE,notstr_mssg,/INFORMATIONAL,/CONTINUE
  RETURN
ENDIF
;;  Check to make sure distribution has the correct format
test0          = test_wind_vs_themis_esa_struct(dat[0],/NOM)
test           = (test0.(0) + test0.(1)) NE 1
IF (test[0]) THEN BEGIN
  MESSAGE,notvdf_msg,/INFORMATIONAL,/CONTINUE
  RETURN
ENDIF
;;  Determine instrument (i.e., ESA or 3DP) and define electric charge
dat0           = dat[0]
IF (test0.(0)) THEN BEGIN
  ;;--------------------------------------------------------------------------------------
  ;;  Wind
  ;;--------------------------------------------------------------------------------------
  mission      = 'Wind'
  strns        = dat_3dp_str_names(dat0[0])
  IF (SIZE(strns,/TYPE) NE 8) THEN BEGIN
    ;;  Neither Wind/3DP nor THEMIS/ESA VDF
    MESSAGE,not3dp_msg[0],/INFORMATIONAL,/CONTINUE
    RETURN
  ENDIF
  inst_nm_mode = strns.LC[0]         ;;  e.g., 'Pesa Low Burst'
ENDIF ELSE BEGIN
  IF (test0.(1)) THEN BEGIN
    ;;------------------------------------------------------------------------------------
    ;;  THEMIS
    ;;------------------------------------------------------------------------------------
    mission      = 'THEMIS'
    strns        = dat_themis_esa_str_names(dat0[0])
    IF (SIZE(strns,/TYPE) NE 8) THEN BEGIN
      ;;  Neither Wind/3DP nor THEMIS/ESA VDF
      MESSAGE,notthm_msg[0],/INFORMATIONAL,/CONTINUE
      RETURN
    ENDIF
    temp         = strns.LC[0]                  ;;  e.g., 'IESA 3D Reduced Distribution'
    tposi        = STRPOS(temp[0],'Distribution') - 1L
    inst_nm_mode = STRMID(temp[0],0L,tposi[0])  ;;  e.g., 'IESA 3D Reduced'
  ENDIF ELSE BEGIN
    ;;------------------------------------------------------------------------------------
    ;;  Other mission?
    ;;------------------------------------------------------------------------------------
    ;;  Not handling any other missions yet
    MESSAGE,badvdf_msg[0],/INFORMATIONAL,/CONTINUE
    RETURN
  ENDELSE
ENDELSE
mission_logic  = [(test0.(0))[0],(test0.(1))[0]]
data_str       = strns.SN[0]     ;;  e.g., 'el' for Wind EESA Low or 'peeb' for THEMIS EESA
;;----------------------------------------------------------------------------------------
;;  Define parameters relevant to structure format
;;----------------------------------------------------------------------------------------
n_dat          = N_ELEMENTS(dat)        ;;  # of data structures
n_b            = dat[0].NBINS[0]        ;;  # of solid angle bins per structure
n_e            = dat[0].NENERGY[0]      ;;  # of energy bins per structure
;;----------------------------------------------------------------------------------------
;;  Check keywords
;;----------------------------------------------------------------------------------------
;;  Check NAME
test           = (N_ELEMENTS(name) EQ 0) OR (SIZE(name,/TYPE) NE 7)
IF (test[0]) THEN name = data_str[0]+'_spec'
;;;  Check UNITS
;test           = (N_ELEMENTS(units) EQ 0)
;IF (test[0]) THEN str_element,limits,'UNITS'     ,VALUE=units
;test           = (N_ELEMENTS(units) EQ 0)
;IF (test[0]) THEN gunits = 'flux' ELSE gunits = units[0]
;;;  Check ERANGE
;test           = (N_ELEMENTS(erange) NE 2)
;ener0          = dat.ENERGY
;def_eran       = [MIN(ener0,/NAN),MAX(ener0,/NAN)]      ;;  Default energy range [eV]
;IF (test[0]) THEN eran = def_eran ELSE eran = [MIN(erange),MAX(erange)]
;test           = (eran[0] EQ eran[1]) AND (def_eran[0] EQ def_eran[1])
;IF (test[0]) THEN BEGIN
;  MESSAGE,badera_msg,/INFORMATIONAL,/CONTINUE
;  RETURN
;ENDIF ELSE BEGIN
;  IF (eran[0] EQ eran[1]) THEN eran = def_eran
;ENDELSE
;;;  Clean up
;ener0          = 0
;;;  Check TRANGE
;test           = (N_ELEMENTS(trange) NE 2)
;IF (test[0]) THEN tra = [MIN(dat.TIME),MAX(dat.END_TIME)] ELSE tra = [MIN(trange),MAX(trange)]
;test           = (N_ELEMENTS(tra) NE 2) OR (tra[0] EQ tra[1])
;IF (test[0]) THEN BEGIN
;  MESSAGE,badtra_msg,/INFORMATIONAL,/CONTINUE
;  RETURN
;ENDIF
;;;  Check BINS
;test           = ~KEYWORD_SET(bins)
;IF (test[0]) THEN str_element,limits,'BINS',            bins
;test           = (N_ELEMENTS(bins) EQ 0)
;IF (test[0]) THEN BEGIN
;  ;;--------------------------------------------------------------------------------------
;  ;;  Nothing was set or provided by user
;  ;;    --> Use all solid angle bins
;  ;;--------------------------------------------------------------------------------------
;  bins = REPLICATE(1b,n_b[0])
;ENDIF ELSE BEGIN
;  ;;--------------------------------------------------------------------------------------
;  ;;  User set or provided BINS --> check format
;  ;;--------------------------------------------------------------------------------------
;  test  = (N_ELEMENTS(bins) NE n_b[0])
;  bin0  = REPLICATE(0b,n_b[0])
;  ind   = LINDGEN(n_b[0])
;  bran  = [0L,n_b[0] - 1L]
;  IF (test[0]) THEN BEGIN
;    ;;------------------------------------------------------------------------------------
;    ;;  User provided a subset
;    ;;    --> Assume they provided indices of bins to plot
;    ;;          ** Make sure users bin values fall within range of possible values **
;    ;;------------------------------------------------------------------------------------
;    good  = WHERE(bins GE bran[0] AND bins LE bran[1],gd)
;    IF (gd[0] EQ 0) THEN BEGIN
;      ;;  Incorrect format --> Plot ALL bins
;      bin0[*] = 1b
;    ENDIF ELSE BEGIN
;      gind       = VALUE_LOCATE(ind,bins[good])
;      bin0[gind] = 1b
;    ENDELSE
;    ;;  Redefine BINS
;    bins       = bin0
;  ENDIF ELSE BEGIN
;    ;;------------------------------------------------------------------------------------
;    ;;  User provided correct number
;    ;;    --> check format (i.e., did user provide indices of bins to plot)
;    ;;------------------------------------------------------------------------------------
;    test  = (MAX(bins,/NAN) GT 1)
;    IF (test[0]) THEN BEGIN
;      ;;  User provided indices?
;      good  = WHERE(bins GE bran[0] AND bins LE bran[1],gd)
;      test  = (gd[0] EQ 0)
;      IF (test[0]) THEN bin0[*] = 1b ELSE bin0[VALUE_LOCATE(ind,bins[good])] = 1b
;      ;;  Redefine BINS
;      bins       = bin0
;    ENDIF ELSE BEGIN
;      ;;  Good input --> make sure values ≥ 0
;      bad   = WHERE(bins LT 0,bd)
;      IF (bd[0] GT 0) THEN bins[bad] = 0
;    ENDELSE
;  ENDELSE
;ENDELSE
;;----------------------------------------------------------------------------------------
;;  Determine energy bin values
;;----------------------------------------------------------------------------------------
eners          = dat_3dp_energy_bins(dat[0])
eners0         = eners.ALL_ENERGIES     ;;  [E]-element array of energies [eV], where E = DAT.NENERGY
;;;----------------------------------------------------------------------------------------
;;;  Get desired data
;;;----------------------------------------------------------------------------------------
;;STOP
;;;  Keep DAT within TRANGE
;test           = (dat.TIME GE tra[0]) AND (dat.END_TIME LE tra[1])
;good           = WHERE(test,gd,COMPLEMENT=bad,NCOMPLEMENT=bd)
;IF (gd[0] GT 0 AND gd[0] LT n_dat[0]) THEN BEGIN
;  ;;  Remove data out of time range
;  data = dat[good]
;ENDIF ELSE data = dat ;;  Else --> use all
;;;  Redefine # of structures
;n_dat          = N_ELEMENTS(data)       ;;  # of data structures
;;STOP
;;;  Keep DAT.ENERGY within ERANGE
;n_all_en       = N_ELEMENTS(data.ENERGY)
;test           = (data.ENERGY GE eran[0]) AND (data.ENERGY LE eran[1])
;good           = WHERE(test,gd,COMPLEMENT=bad,NCOMPLEMENT=bd)
;test           = (gd[0] GT 20) AND (bd[0] LT n_all_en[0] - 30L)
;;STOP
;IF (test) THEN BEGIN
;  ;;  Remove data out of energy range
;  bind         = REPLICATE(f,n_e[0],n_b[0],n_dat[0])
;  bind[good]   = 1e0
;  data.ENERGY *= bind
;  data.DATA   *= bind
;  ;;  Clean up
;  bind         = 0
;;  ;;  Remove data out of energy range
;;  bind = ARRAY_INDICES(data.ENERGY,bad)
;;  data[bind[2,*]].ENERGY[bind[0,*],bind[1,*]] = f
;;  data[bind[2,*]].DATA[bind[0,*],bind[1,*]]   = f
;ENDIF ;;  Else --> use all
;;;  Keep only DAT.DATA satisfying BINS
;good           = WHERE(bins,gd,COMPLEMENT=bad,NCOMPLEMENT=bd)
;test           = (gd[0] GT 5) AND (bd[0] LT data[0].NBINS - 5L)
;;test         = (gd GT 5) AND (bd LT N_ELEMENTS(data[0].NBINS) - 5L)
;;STOP
;IF (test) THEN BEGIN
;  IF (mission_logic[1]) THEN BEGIN
;    ;;  Remove bad bins for THEMIS only
;    bind           = REPLICATE(f,n_e[0],n_b[0],n_dat[0])
;    bind[*,good,*] = 1e0
;    data.DATA     *= bind
;    ;;  Clean up
;    bind           = 0
;  ENDIF
;;  ;;  Remove bad bins for THEMIS only
;;  IF (mission_logic[1]) THEN data.DATA[*,bad] = f
;ENDIF ELSE bins = REPLICATE(1b,data[0].NBINS) ;;  Else --> use all
;;STOP
;;----------------------------------------------------------------------------------------
;;  Calculate energy spectra
;;----------------------------------------------------------------------------------------

;;  ********************
;;  **  Future Plans  **
;;  ********************
;;  1)  calculate my own energy spectra
;;    A)  create subroutine inside this one to calculate omni spectra [vectorized]
;;    B)  create another subroutine inside this one to calculate pitch-angle spectra [vectorized]

IF (mission_logic[0]) THEN BEGIN
  ;;  Wind
  gbins    = bins
  get_spec,data_str[0],NAME=name[0],UNITS=gunits[0],DAT_ARR=data,BINS=gbins
  out_name = tnames(data_str[0])
ENDIF ELSE BEGIN
  ;;  THEMIS
  thm_part_getspec,DATA_TYPE=data_str[0],UNITS=gunits[0],TRANGE=trange,ERANGE=erange,_EXTRA=ex_str
  out_names = tnames(INDEX=out_ind)  ;;  Guessing only one TPLOT handle was created
  IF (out_names[0] NE '') THEN BEGIN
    out_name = tnames(INDEX=MAX(out_ind))
  ENDIF ELSE out_name = ''
ENDELSE
;;  Add LIMITS info if applicable
IF (SIZE(limits,/TYPE) EQ 8 AND out_name[0] NE '') THEN BEGIN
  get_data,out_name[0],DATA=data0,DLIMITS=dlim0,LIMITS=lim0
  extract_tags,dlim,dlim0             ;;  Get current default plot limits settings
  extract_tags,dlim,limits,/PLOT      ;;  Get plot limits settings from LIMITS, if present
  dlim_tags = TAG_NAMES(dlim)
  extract_tags,lim,lim0,EXCEPT_TAGS=dlim_tags  ;;  Try to avoid overlapping tags
  store_data,out_name[0],DATA=data0,DLIM=dlim,LIM=lim
ENDIF
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN
END

