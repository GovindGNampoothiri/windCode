;*****************************************************************************************
;
;  PROCEDURE:   temp_get_def_keywords_iterate_mva.pro
;  PURPOSE  :   This routine tests and constrains the interval and subinterval keywords
;                 to prevent code breaking and conflicts/issues.
;
;  CALLED BY:   
;               temp_get_mva_inds_iterate_mva.pro
;
;  INCLUDES:
;               NA
;
;  CALLS:
;               is_a_number.pro
;               sample_rate.pro
;               get_valid_trange.pro
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               UNIXT          :  [N]-Element [double] array of Unix times defined by
;                                   the calling/wrapping routine
;
;  EXAMPLES:    
;               [calling sequence]
;               temp_get_def_keywords_iterate_mva, unix [,TRANGE=trange]              $   ;;  Inputs
;                                      [,PRECISION=prec]                              $   ;;  Inputs
;                                      [,LOW_FREQ=low_freq] [,HIGHFREQ=highfreq]      $   ;;  Inputs
;                                      [,NSHIFT=nshift] [,NSUBINT=nsubint]            $   ;;  Inputs
;                                      [,NTWINDS=ntwinds] [,DNWINDS=dnwinds]          $   ;;  Inputs
;                                      [,N_MIN=n_min] [,N_MAX=n_max] [,N_SUB=n_sub]   $   ;;  Outputs
;                                      [,N_SFT=n_sft] [,N_WIN=n_win] [,D__NW=d__nw]   $   ;;  Outputs
;                                      [,N_INT=n_int] [,GIND_SE=gind_se]              $   ;;  Outputs
;                                      [,FRANGE=frange] [,LOGIC_OUT=logic_out]
;
;  KEYWORDS:    
;               ****************
;               ***  INPUTS  ***
;               ****************
;               TRANGE         :  [2]-Element [double] array specifying the Unix time
;                                   range for which to limit the data in DATA
;                                   [Default = prompted by get_valid_trange.pro]
;               PRECISION      :  Scalar [long] defining precision of the string output:
;                                   = -5  :  Year only
;                                   = -4  :  Year, month
;                                   = -3  :  Year, month, date
;                                   = -2  :  Year, month, date, hour
;                                   = -1  :  Year, month, date, hour, minute
;                                   = 0   :  Year, month, date, hour, minute, sec
;                                   = >0  :  fractional seconds
;                                   [Default = 0]
;               LOW_FREQ       :  Scalar [numeric] defining the lower frequency bound for
;                                   a bandpass filter to be applied to the entire time
;                                   series in STRUC prior to clipping and performing MVA
;                                   [Default = 0.0]
;               HIGHFREQ       :  Scalar [numeric] defining the upper frequency bound for
;                                   a bandpass filter to be applied to the entire time
;                                   series in STRUC prior to clipping and performing MVA
;                                   [Default = (sample rate)]
;               NSHIFT         :  Scalar [long] defining the index shift for each new
;                                   time window set (i.e., each subinterval) such that
;                                   the following constraint is met:
;                                     ((Nmax + NSUBINT*NSHIFT) MOD Nint) = 0
;                                   where Nmax is the maximum # of time steps in each
;                                   subinterval and Nint is the # of time steps within
;                                   the range defined by TRANGE
;                                   [Default = 1]
;               NSUBINT        :  Scalar [long] defining the number of subintervals that
;                                   each contain NTWINDS time windows
;                                   [Default = 5]
;               NTWINDS        :  Scalar [long] defining the number of time windows to
;                                   use between Nmin and Nmax (i.e., each subinterval)
;                                   before shifting by NSHIFT
;                                   [Default = 4]
;               DNWINDS        :  Scalar [long] defining the integer # of time steps by
;                                   which to increase each time window such that there
;                                   are an integer number of window, NTWINDS, within the
;                                   range between Nmin and Nmax such that:
;                                     N_MAX = N_MIN + (NTWINDS - 1)*DNWINDS
;                                   [Default = 1]
;               NTMIN          :  Scalar [long] defining the minimum integer # of time
;                                   steps to use when defining the time windows within
;                                   each subinterval
;                                   [Default = 7 > (Sr*Co/HIGHFREQ)]
;               NTMAX          :  Scalar [long] defining the maximum integer # of time
;                                   steps to use when defining the time windows within
;                                   each subinterval
;                                   [Default = N_MIN + (NTWINDS - 1)*DNWINDS]
;               *****************
;               ***  OUTPUTS  ***
;               *****************
;               TRANGE         :  On output, routine returns the validated unix time
;                                   range as a [2]-element [double] array
;               N_MIN          :  Set to a named variable to return the minimum # of
;                                   time steps in each subinterval
;                                   (output for NTMIN)
;                                   [integer/long]
;               N_MAX          :  Set to a named variable to return the maximum # of
;                                   time steps in each subinterval
;                                   (output for NTMAX)
;                                   [integer/long]
;               N_SUB          :  Set to a named variable to return the # of subintervals
;                                   within the interval defined by TRANGE
;                                   (output for NSUBINT)
;                                   [integer/long]
;               N_SFT          :  Set to a named variable to return the # of time
;                                   steps by which to shift after each subinterval
;                                   (output for NSHIFT)
;                                   [integer/long]
;               N_WIN          :  Set to a named variable to return the # of time
;                                   windows within each subinterval
;                                   (output for NTWINDS)
;                                   [integer/long]
;               D__NW          :  Set to a named variable to return the # of time steps
;                                   between each time window within each subinterval
;                                   (output for DNWINDS)
;                                   [integer/long]
;               N_INT          :  Set to a named variable to return the # of time steps
;                                   within the interval defined by TRANGE
;                                   [integer/long]
;               GIND_SE        :  Set to a named variable to return the start and end
;                                   indices corresponding to the interval defined by
;                                   TRANGE
;                                   [integer/long]
;               FRANGE         :  Set to a named variable to return the frequency [Hz]
;                                   range as a [2]-element [double] array
;               LOGIC_OUT      :  Set to a named variable to return an array of TRUE or
;                                   FALSE values for informational purposes regarding
;                                   whether the user correctly set input keywords.  The
;                                   output indices correspond to the following inputs:
;                                     0  :  LOW_FREQ
;                                     1  :  HIGHFREQ
;                                     2  :  NTMIN
;                                     3  :  NTMAX
;                                     4  :  NSUBINT
;                                     5  :  NSHIFT
;                                     6  :  NTWINDS
;                                     7  :  DNWINDS
;                                   If LOGIC_OUT[j] = TRUE, then the corresponding input
;                                   keyword was set correctly and the routine did not
;                                   need to redefine in order to satisfy the constraints
;                                   defined in the NOTES section below.  The output for
;                                   this keyword is purely informational.
;
;   CHANGED:  1)  Continued to write routine
;                                                                   [05/25/2016   v1.0.0]
;             2)  Continued to write routine
;                                                                   [05/26/2016   v1.0.0]
;             3)  Continued to write routine
;                                                                   [05/26/2016   v1.0.0]
;             4)  Continued to write routine
;                                                                   [05/26/2016   v1.0.0]
;
;   NOTES:      
;               1)  We define the following constraints for the subinterval and windows:
;                     a) N_INT ≥ 50
;                     b) N_SUB ≥ 1  &  N_WIN ≥ 1
;                     c) D__NW ≥ 0  &  N_SFT ≥ 0
;                     d) N_MIN ≥ 7
;                     e) N_MIN ≤ N_MAX ≤ N_INT
;                     f) IF ( N_MAX = N_MIN || N_SFT = 0 ) THEN
;                          N_SUB = 1
;                        ENDIF ELSE
;                          IF ( N_WIN = 1 || N_MAX = N_MIN || D__NW = 0 ) THEN
;                            N_SUB = 1 + (N_INT - N_MIN)/N_SFT
;                          ENDIF ELSE
;                            N_SUB = 1 + (N_INT - N_MAX)/N_SFT
;                          ENDELSE
;                        ENDELSE
;                     g) IF ( N_MAX = N_MIN || D__NW = 0 ) THEN
;                          N_WIN = 1
;                        ENDIF ELSE
;                          IF ( N_SUB = 1 || N_MAX = N_MIN || N_SFT = 0 ) THEN
;                            N_WIN = 1 + (N_INT - N_MIN)/D__NW
;                          ENDIF ELSE
;                            N_WIN = 1 + (N_MAX - N_MIN)/D__NW
;                          ENDELSE
;                        ENDELSE
;                     h) N_MAX = N_MIN + (N_WIN - 1)*D__NW
;                     i) N_INT = N_MIN + (N_WIN - 1)*D__NW + (N_SUB - 1)*N_SUB
;                              = N_MAX + (N_SUB - 1)*N_SUB
;
;                   which results in the following possible cases:
;
;                     N_MIN = N_MAX = N_INT
;                     =====================
;                       N_SUB = 1  &  N_WIN = 1
;                       N_SFT = 0  &  D__NW = 0
;
;                     (7 ≤ N_MIN < N_INT)
;                     ===================
;
;                       (N_MIN = N_MAX)  &  (N_SUB ≥ 2) :
;                           N_WIN = 1  &  D__NW = 0
;                           N_SFT = (N_INT - N_MIN)/(N_SUB - 1)
;
;                       (N_MIN < N_MAX < N_INT)  &  (N_SUB ≥ 2)  &  (N_WIN ≥ 2) :
;                           N_SFT = (N_INT - N_MAX)/(N_SUB - 1)
;                           D__NW = (N_MAX - N_MIN)/(N_WIN - 1)
;
;                       ((N_MAX = N_INT)  ||  (N_SUB = 1))  &  (N_WIN ≥ 2) :
;                           N_SFT = 0
;                           D__NW = (N_INT - N_MIN)/(N_WIN - 1)
;
;  REFERENCES:  
;               NA
;
;   CREATED:  05/25/2016
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  05/26/2016   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************

PRO temp_get_def_keywords_iterate_mva,unixt,TRANGE=trange,PRECISION=prec,              $   ;;  Inputs
                                            LOW_FREQ=low_freq,HIGHFREQ=highfreq,       $
                                            NSHIFT=nshift,NSUBINT=nsubint,             $
                                            NTWINDS=ntwinds,DNWINDS=dnwinds,           $
                                            NTMIN=ntmin,NTMAX=ntmax,                   $
                                            N_MIN=n_min,N_MAX=n_max,N_SUB=n_sub,       $   ;;  Outputs
                                            N_SFT=n_sft,N_WIN=n_win,D__NW=d__nw,       $
                                            N_INT=n_int,GIND_SE=gind_se,FRANGE=frange, $
                                            LOGIC_OUT=logic_out

;;----------------------------------------------------------------------------------------
;;  Constants
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
;;  Dummy error messages
no_inpt_msg    = 'User must supply an array of Unix times...'
baddfor_msg    = 'Incorrect input format:  STRUC must be an IDL TPLOT structure'
bad_tra_msg    = 'Could not define proper time range... Using entire data interval...'
nod_tra_msg    = 'No data within user specified TRANGE... Exiting without computation...'
notenpt_msg    = 'Not enough time steps in entire time series.  Must supply at least 100 time steps...'
notenit_msg    = 'Not enough time steps in interval defined by TRANGE.  Must contain at least 50 time steps...'
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
test           = (N_PARAMS() LT 1) OR (is_a_number(unixt,/NOMSSG) EQ 0) OR $
                 (N_ELEMENTS(unixt) LT 1)
IF (test[0]) THEN BEGIN
  MESSAGE,no_inpt_msg,/INFORMATIONAL,/CONTINUE
  RETURN
ENDIF
;;----------------------------------------------------------------------------------------
;;  Define some parameters
;;----------------------------------------------------------------------------------------
unix           = REFORM(unixt)
n_tot          = N_ELEMENTS(unix)            ;;  Total # of time steps in input
;;  Determine sample rate [sps]
srate          = sample_rate(unix,/AVERAGE,OUT_MED_AVG=medavg)
;;  Define positive FFT frequencies [Hz]
n_fft          = n_tot[0]/2L                 ;;  # of frequency bins in FFT
fft_fbins      = DINDGEN(n_fft[0])*srate[0]/(n_fft[0] - 1L)
;;----------------------------------------------------------------------------------------
;;  Define # of time steps in interval
;;----------------------------------------------------------------------------------------
;;  Check TRANGE and PRECISION
tra_struc      = get_valid_trange(TRANGE=trange,PRECISION=prec)
tran           = tra_struc.UNIX_TRANGE
test           = (TOTAL(FINITE(tran)) LT 2)
IF (test[0]) THEN BEGIN
  MESSAGE,bad_tra_msg,/INFORMATIONAL,/CONTINUE
  ;;  Define entire data interval
  tran           = [MIN(unix,/NAN),MAX(unix,/NAN)]
ENDIF
test           = (unix LE tran[1]) AND (unix GE tran[0])
good           = WHERE(test,gd)
IF (gd EQ 0) THEN BEGIN
  ;;  No data between specified time range limits
  MESSAGE,nod_tra_msg,/INFORMATIONAL,/CONTINUE
  RETURN
ENDIF
;;  Define interval parameters
n_int          = gd[0]                       ;;  # of time steps in time interval defined by TRANGE
dt_int         = (tran[1] - tran[0])         ;;  duration [s] of time interval defined by TRANGE
test           = (n_int[0] LT 50)
IF (test[0]) THEN BEGIN
  ;;  Not enough time steps in interval defined by TRANGE
  MESSAGE,notenit_msg,/INFORMATIONAL,/CONTINUE
  RETURN
ENDIF
;;  Define TRANGE output
trange         = tran
;;  Define GIND_SE output
gind_se        = [MIN(good,/NAN),MAX(good,/NAN)]
;;----------------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------------
;;  Check keywords
;;----------------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------------
;;  Check HIGHFREQ
test_hf0       = (N_ELEMENTS(highfreq) EQ 1) AND is_a_number(highfreq,/NOMSSG)
IF (test_hf0[0]) THEN highf = (highfreq[0] < srate[0]) ELSE highf = srate[0]
good_hf        = WHERE(fft_fbins LT highf[0],gd_hf)
test_hf        = (gd_hf[0] GT 3) AND test_hf0[0]          ;;  TRUE --> User set keyword correctly
IF (gd_hf[0] LE 3) THEN BEGIN
  ;;  resort to default in event of negative input
  highf          = srate[0]
  good_hf        = WHERE(fft_fbins LT highf[0],gd_hf)
ENDIF
def_lf_ind     = (MAX(good_hf) - 3L) > 0L
def_lf_upp     = fft_fbins[def_lf_ind[0]]                 ;;  Upper bound on LOW_FREQ in case improperly set
;;  Check LOW_FREQ
test_lf0       = (N_ELEMENTS(low_freq) EQ 1) AND is_a_number(low_freq,/NOMSSG)
IF (test_lf0[0]) THEN lowf = (low_freq[0] < def_lf_upp[0]) ELSE lowf = 0d0
good_lf        = WHERE(fft_fbins GT lowf[0],gd_lf)
test_lf        = (gd_lf[0] GT 3) AND test_lf0[0]          ;;  TRUE --> User set keyword correctly
IF (gd_lf[0] LE 3) THEN BEGIN
  ;;  resort to default in event of negative input
  lowf           = 0d0
  good_lf        = WHERE(fft_fbins GT lowf[0],gd_lf)
ENDIF
;;  Define subinterval time ranges allowed for later
IF (highf[0] GE srate[0]/2d0) THEN uppf = highf[0]/4d0 ELSE uppf = highf[0]
dt_min         = 1.25d0/uppf[0]                           ;;  lower bound --> window width ≥ 125% of shortest periods
IF (lowf[0] EQ 0) THEN BEGIN
  dt_max         = dt_int[0]
ENDIF ELSE BEGIN
  dt_max         = 1d0/lowf[0]
ENDELSE
;;  Define FRANGE output
frange         = [lowf[0],highf[0]]
;;----------------------------------------------------------------------------------------
;;  Check subinterval keywords
;;    --> Define initial settings and/or defaults
;;----------------------------------------------------------------------------------------
;;  Check NSUBINT
test_ns        = (N_ELEMENTS(nsubint) EQ 1) AND is_a_number(nsubint,/NOMSSG)
IF (test_ns[0]) THEN test_ns = (LONG(nsubint[0]) GE 1L) AND (LONG(nsubint[0]) LT FLOOR(9d-1*n_int[0]))
IF (test_ns[0]) THEN ns = LONG(nsubint[0]) ELSE ns = 5L
IF (ns[0] EQ 1) THEN sfac = 1L ELSE sfac = (ns[0] - 1L)
;;  Check NSHIFT
test_nshft     = (N_ELEMENTS(nshift) EQ 1) AND is_a_number(nshift,/NOMSSG)
IF (test_nshft[0]) THEN test_nshft = (LONG(nshift[0])*sfac[0] LT FLOOR(75d-1*n_int[0])) AND (LONG(nshift[0]) GE 0L)
IF (test_nshft[0]) THEN nshft = LONG(nshift[0]) ELSE nshft = 1L
;IF (test_nshft[0]) THEN nshft = 1L > (LONG(nshift[0]) < FLOOR(n_int[0]/2L)) ELSE nshft = 1L
;;  Check NTWINDS
test_nw        = (N_ELEMENTS(ntwinds) EQ 1) AND is_a_number(ntwinds,/NOMSSG)
IF (test_nw[0])  THEN test_nw = (LONG(ntwinds[0]) GE 1L) AND (LONG(ntwinds[0]) LT FLOOR(9d-1*(n_int[0] - nshft[0]*sfac[0])))
IF (test_nw[0])  THEN ntw = LONG(ntwinds[0]) ELSE ntw = 4L
IF (ntw[0] EQ 1) THEN wfac = 1L ELSE wfac = (ntw[0] - 1L)
;IF (test_nw[0]) THEN ntw = 1L > LONG(ntwinds[0]) ELSE ntw = 4L
;;  Check DNWINDS
test_dnw       = (N_ELEMENTS(dnwinds) EQ 1) AND is_a_number(dnwinds,/NOMSSG)
IF (test_dnw[0]) THEN test_dnw = (LONG(dnwinds[0]) GE 0L) AND (LONG(dnwinds[0])*wfac[0] LE FLOOR(n_int[0] - nshft[0]*sfac[0]))
IF (test_dnw[0]) THEN dntw = LONG(dnwinds[0]) ELSE dntw = 1L
;IF (test_dnw[0]) THEN dntw = 1L > LONG(dnwinds[0]) ELSE dntw = 1L
;;  Check NTMIN
test_nmin      = (N_ELEMENTS(ntmin) EQ 1) AND is_a_number(ntmin,/NOMSSG)
IF (test_nmin[0]) THEN test_nmin = (LONG(ntmin[0]) GE 7L) AND (LONG(ntmin[0]) LE n_int[0])  ;;  Check constrains --> turn on/off logic accordingly
IF (test_nmin[0]) THEN nf_min = LONG(ntmin[0]) ELSE nf_min = CEIL(srate[0]*dt_min[0]) > 7L
;;  Check NTMAX
test_nmax      = (N_ELEMENTS(ntmax) EQ 1) AND is_a_number(ntmax,/NOMSSG)
IF (test_nmax[0]) THEN BEGIN
  IF (test_nmin[0]) THEN BEGIN
    test_nmax = (LONG(ntmin[0]) LE LONG(ntmax[0])) AND (LONG(ntmax[0]) LE n_int[0])
  ENDIF ELSE BEGIN
    test_nmax = (LONG(ntmax[0]) LE n_int[0])
  ENDELSE
ENDIF
IF (test_nmax[0]) THEN nf_max = LONG(ntmax[0]) $
                  ELSE nf_max = (nf_min[0] + (ntw[0] - 1L)*dntw[0]) < n_int[0]
;;----------------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------------
;;  Define tests for constraints
;;----------------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------------
test_mneqmx    = (nf_min[0] EQ nf_max[0])
test_mxeqni    = (nf_max[0] EQ n_int[0])
test_lev1_a    = (test_mneqmx[0] AND test_mxeqni[0])
test_lev1_b    = (nf_min[0] GE 7L) AND (nf_min[0] LT n_int[0])
test_ieqnxi    = (nf_min[0] LT nf_max[0]) AND (nf_max[0] LT n_int[0])
test_nwge2     = (ntw[0] GE 2L)
test_nsge2     = ( ns[0] GE 2L)
test_wsge2     = ( test_nwge2[0] AND  test_nsge2[0])    ;;  (N_SUB ≥ 2)  &  (N_WIN ≥ 2)
test_case1     = (test_mneqmx[0] AND  test_nsge2[0])    ;;  (N_MIN = N_MAX)  &  (N_SUB ≥ 2)
test_case2     = (test_ieqnxi[0] AND  test_wsge2[0])    ;;  (N_MIN < N_MAX < N_INT)  &  (N_SUB ≥ 2)  &  (N_WIN ≥ 2)
test____03     = (test_mxeqni[0]  OR  (ns[0] EQ 1) )    ;;  (N_MAX = N_INT)  ||  (N_SUB = 1)
test_ns_03     = (test_mxeqni[0] AND  (ns[0] NE 1) )    ;;  (N_MAX = N_INT)  &  (N_SUB ≠ 1)
test_ne_03     = (~test_mxeqni[0] AND (ns[0] EQ 1) )    ;;  (N_MAX ≠ N_INT)  &  (N_SUB = 1)
test_case3     = ( test____03[0] AND  test_nwge2[0])    ;;  ((N_MAX = N_INT)  ||  (N_SUB = 1))  &  (N_WIN ≥ 2)
const_lev1     = WHERE([test_lev1_a[0],test_lev1_b[0]],cst_lv1)
const_lev2     = WHERE([test_case1[0],test_case2[0],test_case3[0]],cst_lv2)
;;----------------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------------
;;  Constrain parameters
;;----------------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------------
CASE const_lev1[0] OF
  0L    :  BEGIN
    ;;------------------------------------------------------------------------------------
    ;;  N_MIN = N_MAX = N_INT
    ;;------------------------------------------------------------------------------------
    n_min = nf_min[0]
    n_max = nf_max[0]
    IF (   test_ns[0]) THEN IF (   ns[0] NE 1) THEN test_ns    = 0b  ;;  shut off logic
    IF (test_nshft[0]) THEN IF (nshft[0] NE 0) THEN test_nshft = 0b  ;;  shut off logic
    IF (   test_nw[0]) THEN IF (  ntw[0] NE 1) THEN test_nw    = 0b  ;;  shut off logic
    IF (  test_dnw[0]) THEN IF ( dntw[0] NE 0) THEN test_dnw   = 0b  ;;  shut off logic
    n_sub = 1L
    n_sft = 0L
    n_win = 1L
    d__nw = 0L
  END
  1L    :  BEGIN
    ;;####################################################################################
    ;;  (7 ≤ N_MIN < N_INT)
    ;;####################################################################################
    CASE const_lev2[0] OF
      0L    :  BEGIN
        ;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        ;;  (N_MIN = N_MAX)  &  (N_SUB ≥ 2)
        ;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        IF (   test_nw[0]) THEN IF (  ntw[0] NE 1) THEN test_nw    = 0b  ;;  shut off logic
        IF (  test_dnw[0]) THEN IF ( dntw[0] NE 0) THEN test_dnw   = 0b  ;;  shut off logic
        n_min = nf_min[0]
        n_max = nf_min[0]
        IF (test_nshft[0]) THEN BEGIN
          ;;  User defined N_SFT
          n_sft = nshft[0]
          IF (test_ns[0]) THEN BEGIN
            ;;  Constrain user defined value (N_SUB)
            upper = 1L + (n_int[0] - n_min[0])/n_sft[0]
            ;;  2 ≤ N_SUB ≤ 1 + (N_INT - N_MIN)/N_SFT
            n_sub = (ns[0] > 2L) < upper[0]
          ENDIF ELSE BEGIN
            ;;  N_SUB = 1 + (N_INT - N_MIN)/N_SFT
            n_sub = FLOOR(1d0 + 1d0*(n_int[0] - n_min[0])/n_sft[0])
          ENDELSE
        ENDIF ELSE BEGIN
          ;;  N_SFT = (N_INT - N_MIN)/(N_SUB - 1)
          n_sub = ns[0]
          n_sft = (n_int[0] - n_min[0])/(n_sub[0] - 1L)
        ENDELSE
        n_win = 1L
        d__nw = 0L
        ;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        ;;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      END
      1L    :  BEGIN
        ;;--------------------------------------------------------------------------------
        ;;  (N_MIN < N_MAX < N_INT)  &  (N_SUB ≥ 2)  &  (N_WIN ≥ 2)
        ;;--------------------------------------------------------------------------------
        n_min = nf_min[0]
        n_max = nf_max[0]
        IF (test_nshft[0]) THEN BEGIN
          ;;  User defined N_SFT
          n_sft = nshft[0]
          IF (test_ns[0]) THEN BEGIN
            ;;  Constrain user defined value (N_SUB)
            upper = 1L + (n_int[0] - n_max[0])/n_sft[0]
            ;;  2 ≤ N_SUB ≤ 1 + (N_INT - N_MAX)/N_SFT
            n_sub = (ns[0] > 2L) < upper[0]
          ENDIF ELSE BEGIN
            ;;  N_SUB = 1 + (N_INT - N_MAX)/N_SFT
            n_sub = FLOOR(1d0 + 1d0*(n_int[0] - n_max[0])/n_sft[0])
          ENDELSE
        ENDIF ELSE BEGIN
          ;;  N_SFT = (N_INT - N_MAX)/(N_SUB - 1)
          n_sub = ns[0]
          n_sft = (n_int[0] - n_max[0])/(n_sub[0] - 1L)
        ENDELSE
        IF (test_dnw[0]) THEN BEGIN
          ;;  User defined D__NW
          d__nw = dntw[0]
          IF (test_nw[0]) THEN BEGIN
            ;;  Constrain user defined value (N_WIN)
            upper = 1L + (n_max[0] - n_min[0])/d__nw[0]
            ;;  2 ≤ N_WIN ≤ 1 + (N_MAX - N_MIN)/D__NW
            n_win = (ntw[0] > 2L) < upper[0]
          ENDIF ELSE BEGIN
            ;;  N_WIN = 1 + (N_MAX - N_MIN)/D__NW
            n_win = FLOOR(1d0 + 1d0*(n_max[0] - n_min[0])/d__nw[0])
          ENDELSE
        ENDIF ELSE BEGIN
          ;;  D__NW = (N_MAX - N_MIN)/(N_WIN - 1)
          n_win = ntw[0]
          d__nw = (n_int[0] - n_max[0])/(n_win[0] - 1L)
        ENDELSE
        ;;--------------------------------------------------------------------------------
        ;;--------------------------------------------------------------------------------
      END
      2L    :  BEGIN
        ;;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        ;;  ((N_MAX = N_INT)  ||  (N_SUB = 1))  &  (N_WIN ≥ 2)
        ;;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        n_min = nf_min[0]
        n_max = nf_max[0]
        n_sub = 1L
        n_sft = 0L
        IF (test_nshft[0]) THEN IF (nshft[0] NE 0) THEN test_nshft = 0b  ;;  shut off logic
        IF (test_ns_03[0]) THEN BEGIN
          ;;  (N_MAX = N_INT)  &  (N_SUB ≠ 1)
          IF (   test_ns[0]) THEN test_ns    = 0b  ;;  shut off logic (user set incorrectly)
        ENDIF ELSE BEGIN
          IF (test_ne_03[0]) THEN BEGIN
            ;;  (N_MAX ≠ N_INT)  &  (N_SUB = 1)
            IF (test_nmin[0]) THEN test_nmin = 0b  ;;  shut off logic (user set incorrectly)
            IF (test_nmax[0]) THEN test_nmax = 0b  ;;  shut off logic (user set incorrectly)
            n_max = n_int[0]
            n_min = n_max[0]
          ENDIF;; ELSE --> do nothing
               ;;  (N_MAX = N_INT)  &  (N_SUB = 1)
        ENDELSE
        ;;  Check D__NW and N_WIN
        IF (test_dnw[0]) THEN BEGIN
          ;;  User defined D__NW
          d__nw = dntw[0]
          IF (test_nw[0]) THEN BEGIN
            ;;  Constrain user defined value (N_WIN)
            upper = 1L + (n_int[0] - n_min[0])/d__nw[0]
            ;;  2 ≤ N_WIN ≤ 1 + (N_INT - N_MIN)/D__NW
            n_win = (ntw[0] > 2L) < upper[0]
          ENDIF ELSE BEGIN
            ;;  N_WIN = 1 + (N_INT - N_MIN)/D__NW
            n_win = FLOOR(1d0 + 1d0*(n_int[0] - n_min[0])/d__nw[0])
          ENDELSE
        ENDIF ELSE BEGIN
          ;;  User did not define D__NW
          n_win = ntw[0]
          ;;  D__NW = (N_INT - N_MIN)/(N_WIN - 1)
          d__nw = (n_int[0] - n_min[0])/(n_win[0] - 1L)
        ENDELSE
        ;;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        ;;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      END
      ELSE  :  BEGIN
        ;;  Something is wrong!!!  -->  Debug
        MESSAGE,'Something is wrong!!!  -->  Debug [Level 2]',/INFORMATIONAL,/CONTINUE
        STOP
      END
    ENDCASE
    ;;####################################################################################
    ;;  (7 ≤ N_MIN < N_INT)
    ;;####################################################################################
  END
  ELSE  :  BEGIN
    ;;  Something is wrong!!!  -->  Debug
    MESSAGE,'Something is wrong!!!  -->  Debug [Level 1]',/INFORMATIONAL,/CONTINUE
    STOP
  END
ENDCASE
;;----------------------------------------------------------------------------------------
;;  Define output for logic [informational]
;;----------------------------------------------------------------------------------------
test_nsub      = test_ns[0] & test_nsft = test_nshft[0] & test_nwin = test_nw[0]
test_d_nw      = test_dnw[0]
logic_out      = [  test_lf[0],  test_hf[0],test_nmin[0],test_nmax[0],test_nsub[0],$
                  test_nsft[0],test_nwin[0],test_d_nw[0]]
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN
END














