;+
;*****************************************************************************************
;
;  PROCEDURE:   rotate_3dp_structure.pro
;  PURPOSE  :   Rotates a 3DP data structure into coordinate system defined by user
;                 defined keyword inputs.  The routine adds tags to the input structure
;                 that define triangulated data in three plane projections.  The new
;                 structure tags are:
;                   VX2D[VY2D]  :  Regularly gridded velocities to use as X[Y]-axis
;                                    input for contour plot outputs
;                   DF2D_JK     :  Regularly gridded phase space densities projected
;                                    onto the JK-Plane [e.g. XY-Plane]
;                   VELX_JK     :  Horizontal axis velocities (actual data) that can be
;                                    projected onto contours to show where actual data
;                                    points were observed in JK-Plane
;                   VELY_JK     :  Vertical axis velocities (actual data) that can be
;                                    projected onto contours to show where actual data
;                                    points were observed in JK-Plane
;                   VELZ_JK     :  Velocities orthogonal to plane containing DF2D_JK
;                   ROT_MAT     :  [3,3]-Element array defining the rotation matrix to
;                                    convert from the input basis to new rotated basis
;                   ROT_MAT_Z   :  [3,3]-Element array defining the rotation matrix to
;                                    convert from the input basis to the YZ-Projection
;
;                 The input rotation matrices are defined by the routine,
;                 rot_matrix_array_dfs.pro, and produce a new primed basis given by the
;                 following:
;
;                           Z'
;                           |
;                           |
;                           |
;                           |
;                           |
;                           |
;                           |
;                           |
;                           O --------------- Y'
;                          /
;                        /
;                      /
;                    /
;                  /
;                 X'
;
;                 where ROTMXY gives the following unit vectors:
;                   X'  :  V1
;                   Z'  :  (V1 x V2)       = (X x V2)
;                   Y'  :  (V1 x V2) x V1  = (Z x X)
;
;                 and ROTMZY gives the following unit vectors:
;                   Z'  :  V1
;                   Y'  :  (V1 x V2)       = (Z x V2)
;                   X'  :  (V1 x V2) x V1  = (Y x Z)
;
;                 where V1 and V2 are the input 3-vectors for VECTOR1 and VECTOR2 defined
;                 below.  Thus, the following plane projections/slices are produced:
;                   Y vs. X  :  [(V1 x V2) x V1] vs. [V1]
;                   X vs. Z  :  [V1] vs. [(V1 x V2)]
;                   Z vs. Y  :  [(V1 x V2)] vs. [(V1 x V2) x V1]
;
;  CALLED BY:   
;               contour_3d_1plane.pro
;
;  INCLUDES:
;               NA
;
;  CALLS:
;               is_a_number.pro
;               test_wind_vs_themis_esa_struct.pro
;               dat_3dp_str_names.pro
;               convert_ph_units.pro
;               conv_units.pro
;               is_a_3_vector.pro
;               eulermat.pro
;               energy_to_vel.pro
;               rot_matrix_array_dfs.pro
;               rotate_and_triangulate_dfs.pro
;               str_element.pro
;               extract_tags.pro
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               DAT        :  Scalar [structure] associated with a known THEMIS ESA or
;                               SST data structure
;                               [e.g., see get_th?_p*@b.pro, ? = a-f, * = e,s @ = e,i]
;                               or a Wind/3DP data structure
;                               [see get_?.pro, ? = el, elb, pl, ph, eh, etc.]
;               VECTOR1    :  [3]-Element [numeric] array used to define, with VECTOR2,
;                               a new coordinate basis onto which the data within DAT
;                               will be projected and triangulated
;                               [ Default = [1.,0.,0.] or +X-ICB ]
;               VECTOR2    :  [3]-Element [numeric] array used to define, with VECTOR1,
;                               a new coordinate basis onto which the data within DAT
;                               will be projected and triangulated
;                               [ Default = [0.,1.,0.] or +Y-ICB ]
;
;  EXAMPLES:    
;               ;;....................................................................
;               ;;;  Define a time of interest
;               ;;....................................................................
;               to      = time_double('1998-08-09/16:00:00')
;               ;;....................................................................
;               ;;;  Get a Wind 3DP PESA High data structure from level zero files
;               ;;....................................................................
;               dat     = get_ph(to)
;               ;;....................................................................
;               ;;;  in the following lines, the strings correspond to TPLOT handles
;               ;;      and thus may be different for each user's preference
;               ;;....................................................................
;               add_vsw2,dat,'V_sw2'          ;;  Add solar wind velocity to struct.
;               add_magf2,dat,'wi_B3(GSE)'    ;;  Add magnetic field to struct.
;               add_scpot,dat,'sc_pot_3'      ;;  Add spacecraft potential to struct.
;               ;;....................................................................
;               ;;;  Convert to solar wind frame
;               ;;....................................................................
;               transform_vframe_3d,dat,/EASY_TRAN
;               ;;....................................................................
;               ;;;  Rotate into field-aligned coordinates in plane defined by the
;               ;;      solar wind velocity and ambient magnetic field
;               ;;....................................................................
;               vec1  = dat.MAGF
;               vec2  = dat.VSW
;               vlim  = 25d2                   ;;  velocity range limit [km/s]
;               rotate_3dp_structure,dat,vec1,vec2,VLIM=vlim
;               ;;....................................................................
;               ;;;  Define parameters for contour plot
;               ;;....................................................................
;               ngrid    = 20L                 ;;  # of grids to use
;               dfra     = [1e-16,2e-10]       ;;  define a range for contour levels
;               !P.MULTI = [0,1,2]
;               xyra     = [-1d0,1d0]*vlim[0]  ;;  XY-Axes range for contour plot
;               range    = ALOG10(dfra)
;               dlogra   = (range[1] - range[0])/(ngrid[0] - 1L)
;               loglev   = FINDGEN(ngrid[0])*dlogra[0] + range[0]
;               levels   = 1d1^loglev          ;;  Values of contour plot levels
;               ;;  Define colors associated with contour levels
;               c_cols   = LINDGEN(ngrid[0])*(250L - 30L)/(ngrid[0] - 1L) + 30L
;               ;;  Define contour plot limits structures
;               lim_c0   = {XSTYLE:1,YSTYLE:1,XRANGE:xyra,YRANGE:xyra,NODATA:1}
;               constr   = {OVERPLOT:1,LEVELS:levels,C_COLORS:c_cols}
;               ;;  Define a new user symbol for outputting velocity locations
;               xxo      = FINDGEN(17)*(!PI*2./16.)
;               USERSYM,0.25*COS(xxo),0.25*SIN(xxo),/FILL
;               ;;....................................................................
;               ;;....................................................................
;               ;;;  Plot contours of phase space density
;               ;;....................................................................
;               ;;....................................................................
;               ;;;  XY-Plane
;               PLOT,[0.0,1.0],[0.0,1.0],_EXTRA=lim_c0    ;;  empty plot
;                 ;;  overplot locations of actual data points
;                 OPLOT,dat.VELX_XY,dat.VELY_XY,PSYM=8,SYMSIZE=1.0,COLOR=100
;                 ;;  plot contours
;                 CONTOUR,dat.DF2D_XY,dat.VX2D,dat.VY2D,_EXTRA=constr
;               ;;;  XZ-Plane
;               PLOT,[0.0,1.0],[0.0,1.0],_EXTRA=lim_c0    ;;  empty plot
;                 ;;  overplot locations of actual data points
;                 OPLOT,dat.VELX_XZ,dat.VELY_XZ,PSYM=8,SYMSIZE=1.0,COLOR=100
;                 ;;  plot contours
;                 CONTOUR,dat.DF2D_XZ,dat.VX2D,dat.VY2D,_EXTRA=constr
;
;  KEYWORDS:    
;               VLIM       :  Scalar [numeric] defining the speed limit for the velocity
;                               grids over which to triangulate the data [km/s]
;                               [Default = Max. speed defined by Max. energy bin value]
;
;   CHANGED:  1)  Now calls test_wind_vs_themis_esa_struct.pro and no longer calls
;                   test_3dp_struc_format.pro                      [03/29/2012   v1.1.0]
;             2)  Fixed a typo in the error handling and now forces the new output tags
;                   to have a fixed format and updated man page and now calls
;                   energy_to_vel.pro instead of velocity.pro      [05/24/2012   v1.2.0]
;             3)  Now calls rot_matrix_array_dfs.pro, rotate_and_triangulate_dfs.pro,
;                   and extract_tags.pro and no longer calls cal_rot.pro or rot_mat.pro
;                                                                  [08/20/2012   v1.3.0]
;             4)  Added error handling for "bad" VECTOR2 input and now calls
;                   eulermat.pro
;                                                                  [10/09/2012   v1.4.0]
;             5)  Cleaned up, added more documentation and error handling, and now calls
;                   is_a_number.pro, is_a_3_vector.pro
;                                                                  [11/24/2015   v1.5.0]
;
;   NOTES:      
;               0)  Definitions
;                     ICB  :  Input Coordinate Basis (e.g., GSE)
;                     NIF  :  Normal Incidence Frame
;                     SCF  :  SpaceCraft Frame
;                     NCB  :  Normal incidence frame Coordinate Basis
;                     SHF  :  SHock rest Frame
;                     SWF  :  Solar Wind rest Frame
;               1)  This routine modifies the input structure, DAT, so make sure
;                     you make a copy of the original prior to calling.
;               2)  To be useful, the data should be transformed into the SWF prior to
;                     calling this routine.  The transformation will also help to
;                     prevent "co-linear points" errors returned by the routine
;                     TRIANGULATE.PRO.
;
;  REFERENCES:  
;               1)  Carlson et al., "An instrument for rapidly measuring
;                      plasma distribution functions with high resolution,"
;                      Adv. Space Res. Vol. 2, pp. 67-70, (1983).
;               2)  Curtis et al., "On-board data analysis techniques for
;                      space plasma particle instruments," Rev. Sci. Inst. Vol. 60,
;                      pp. 372, (1989).
;               3)  Lin et al., "A Three-Dimensional Plasma and Energetic
;                      particle investigation for the Wind spacecraft," Space Sci. Rev.
;                      Vol. 71, pp. 125, (1995).
;               4)  Paschmann, G. and P.W. Daly "Analysis Methods for Multi-
;                      Spacecraft Data," ISSI Scientific Report, Noordwijk, 
;                      The Netherlands., Int. Space Sci. Inst., (1998).
;               5)  McFadden, J.P., C.W. Carlson, D. Larson, M. Ludlam, R. Abiad,
;                      B. Elliot, P. Turin, M. Marckwordt, and V. Angelopoulos
;                      "The THEMIS ESA Plasma Instrument and In-flight Calibration,"
;                      Space Sci. Rev. 141, pp. 277-302, (2008).
;               6)  McFadden, J.P., C.W. Carlson, D. Larson, J.W. Bonnell,
;                      F.S. Mozer, V. Angelopoulos, K.-H. Glassmeier, U. Auster
;                      "THEMIS ESA First Science Results and Performance Issues,"
;                      Space Sci. Rev. 141, pp. 477-508, (2008).
;               7)  Auster, H.U., K.-H. Glassmeier, W. Magnes, O. Aydogar, W. Baumjohann,
;                      D. Constantinescu, D. Fischer, K.H. Fornacon, E. Georgescu,
;                      P. Harvey, O. Hillenmaier, R. Kroth, M. Ludlam, Y. Narita,
;                      R. Nakamura, K. Okrafka, F. Plaschke, I. Richter, H. Schwarzl,
;                      B. Stoll, A. Valavanoglou, and M. Wiedemann "The THEMIS Fluxgate
;                      Magnetometer," Space Sci. Rev. 141, pp. 235-264, (2008).
;               8)  Angelopoulos, V. "The THEMIS Mission," Space Sci. Rev. 141,
;                      pp. 5-34, (2008).
;               9)  Ipavich, F.M. "The Compton-Getting effect for low energy particles,"
;                      Geophys. Res. Lett. 1(4), pp. 149-152, (1974).
;              10)  Jackson, J.D. "Classical Electrodynamics," 3rd Edition,
;                     ISBN 0-471-30932-X. John Wiley & Sons, Inc., (1999)
;
;   CREATED:  02/09/2012
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  11/24/2015   v1.5.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

PRO rotate_3dp_structure,dat,vector1,vector2,VLIM=vlim

;;  Let IDL know that the following are functions
FORWARD_FUNCTION is_a_number, is_a_3_vector
;;----------------------------------------------------------------------------------------
;;  Define some constants and dummy variables
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
def_uconv_r_th = ['thm_convert_esa_units_lbwiii','thm_convert_sst_units_lbwiii']
;;  Dummy error messages
notstr_msg     = 'Must be an IDL structure...'
badstr_mssg    = 'Not an appropriate 3DP structure...'
badthm_msg     = 'If THEMIS ESA structures used, then they must be modified using modify_themis_esa_struc.pro'
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
test           = (N_PARAMS() LT 3) OR (N_ELEMENTS(dat) EQ 0) OR (SIZE(dat,/TYPE) NE 8) OR $
                 (is_a_number(vector1,/NOMSSG) EQ 0) OR (is_a_number(vector2,/NOMSSG) EQ 0)
IF (test[0]) THEN RETURN
;;  Check DAT structure format
test0          = test_wind_vs_themis_esa_struct(dat,/NOM)
test           = (test0.(0) + test0.(1)) NE 1
IF (test) THEN BEGIN
  MESSAGE,notstr_msg,/INFORMATIONAL,/CONTINUE
  RETURN
ENDIF
data           = dat[0]
;;----------------------------------------------------------------------------------------
;;  Convert units to phase space density
;;----------------------------------------------------------------------------------------
IF (test0.(0)) THEN BEGIN
  ;;-------------------------------------------
  ;; Wind
  ;;-------------------------------------------
  ;;  Check which instrument is being used
  strns   = dat_3dp_str_names(data[0])
  IF (SIZE(strns,/TYPE) NE 8) THEN BEGIN
    ;;  Incorrect structure type
    MESSAGE,badstr_mssg[0],/INFORMATIONAL,/CONTINUE
    RETURN
  ENDIF
  shnme   = STRLOWCASE(STRMID(strns.SN[0],0L,2L))
  CASE shnme[0] OF
    'ph' :  convert_ph_units,data,'df'
    ELSE :  data   = conv_units(data,'df')
  ENDCASE
ENDIF ELSE BEGIN
  ;;-------------------------------------------
  ;; THEMIS
  ;;-------------------------------------------
  ;;  make sure the structure has been modified
  temp_proc = STRLOWCASE(str[0].UNITS_PROCEDURE)
  test_un   = (temp_proc[0] NE def_uconv_r_th[0]) AND (temp_proc[0] NE def_uconv_r_th[1])
  IF (test_un[0]) THEN BEGIN
    ;;  THEMIS structure, but not modified yet --> routine would crash later
    MESSAGE,badthm_msg[0],/INFORMATIONAL,/CONTINUE
    RETURN
  ENDIF
  ;;  structure modified appropriately so convert units
  data   = conv_units(data,'df')
ENDELSE
;;----------------------------------------------------------------------------------------
;;  Check format of input vectors
;;----------------------------------------------------------------------------------------
;;  Make sure inputs are both 3-vectors
test1          = is_a_3_vector(vector1,V_OUT=v10,/NOMSSG)
test2          = is_a_3_vector(vector2,V_OUT=v20,/NOMSSG)
;IF (N_ELEMENTS(vector1) NE 3) THEN vec1 = [1.,0.,0.] ELSE vec1 = REFORM(vector1)
;IF (N_ELEMENTS(vector2) NE 3) THEN vec2 = [0.,1.,0.] ELSE vec2 = REFORM(vector2)
IF (test1[0] EQ 0) THEN vec1 = [1.,0.,0.] ELSE vec1 = REFORM(v10)
IF (test2[0] EQ 0) THEN vec2 = [0.,1.,0.] ELSE vec2 = REFORM(v20)
;; Check to see if VEC2 is finite and > 0
;sumv2          = TOTAL(vec2,/NAN)
;test           = (sumv2[0] EQ 0) OR (TOTAL(FINITE(vec2),/NAN) NE 3)
test           = (TOTAL(vec2,/NAN) EQ 0) OR (TOTAL(FINITE(vec2),/NAN) NE 3)
IF (test[0]) THEN BEGIN
  ;;  Redefine VEC2
  r90deg         = TRANSPOSE(eulermat(0d0,9d1,0d0,/DEG))
  vec2           = REFORM(r90deg ## vec1)
  ;;  Normalize
  vec2           = vec2/SQRT(TOTAL(vec2^2,/NAN))
ENDIF
;;----------------------------------------------------------------------------------------
;;  Check keywords
;;----------------------------------------------------------------------------------------
mass           = data[0].MASS[0]         ;;  particle mass [eV km^(-2) s^(2)]
energy         = data[0].ENERGY          ;;  Energy bin values [eV]
mnmx_en        = [MIN(energy,/NAN),MAX(energy,/NAN)]
;;  Check VLIM
test           = (N_ELEMENTS(vlim) EQ 0) OR ~KEYWORD_SET(vlim)
v_mxmn         = energy_to_vel(mnmx_en,mass[0])
IF (test[0]) THEN BEGIN
;IF NOT KEYWORD_SET(vlim) THEN BEGIN
  vlim           = MAX(SQRT(2e0*data[0].ENERGY/data[0].MASS),/NAN)
ENDIF ELSE BEGIN
  vlim           = (FLOAT(vlim[0]) > v_mxmn[0])
ENDELSE
;;----------------------------------------------------------------------------------------
;;  Define DAT structure parameters
;;----------------------------------------------------------------------------------------
n_e            = data[0].NENERGY         ;;  # of energy bins
n_a            = data[0].NBINS           ;;  # of solid angle bins
kk             = n_e[0]*n_a[0]           ;;  define K for [K]-element arrays below

df_dat         = data[0].DATA            ;;  Data values [s^(3) cm^(-3) km^(-3)]
phi            = data[0].PHI             ;;  Azimuthal/longitude angle (from sun direction) [deg]
the            = data[0].THETA           ;;  Poloidal/latitude angle (from ecliptic plane) [deg]
;;----------------------------------------------------------------------------------------
;;  Reform 2D arrays into 1D
;;----------------------------------------------------------------------------------------
dat_1d         = REFORM(df_dat,n_e*n_a)
ener_1d        = REFORM(energy,n_e*n_a)
phi_1d         = REFORM(phi,n_e*n_a)
the_1d         = REFORM(the,n_e*n_a)
;;  Magnitude of velocities [km/s] from energy bin values [eV]
nvmag          = energy_to_vel(ener_1d,mass[0])
;;----------------------------------------------------------------------------------------
;;  Convert energies/angles to cartesian velocity equivalents
;;----------------------------------------------------------------------------------------
coth           = COS(the_1d*!DPI/18d1)
sith           = SIN(the_1d*!DPI/18d1)
coph           = COS(phi_1d*!DPI/18d1)
siph           = SIN(phi_1d*!DPI/18d1)
;;  Define velocities from energies and solid angle look directions
swfv           = DBLARR(kk,3L)                         ;;  [K,3]-Element array
swfv[*,0]      = nvmag*coth*coph                       ;;  Define X-Velocity at each energy and solid angle bin
swfv[*,1]      = nvmag*coth*siph                       ;;  Define Y-Velocity " "
swfv[*,2]      = nvmag*sith                            ;;  Define Z-Velocity " "
;;----------------------------------------------------------------------------------------
;;  Define rotation matrices
;;----------------------------------------------------------------------------------------
v1             = REPLICATE(1d0,kk) # vec1              ;; [K,3]-Element array
v2             = REPLICATE(1d0,kk) # vec2              ;; [K,3]-Element array
;;  Define rotation matrices equivalent to cal_rot.pro
;;    CAL_ROT = TRUE  --> Primed unit basis vectors are given by:
;;           X'  :  V1
;;           Z'  :  (V1 x V2)       = (X x V2)
;;           Y'  :  (V1 x V2) x V1  = (Z x X)
rotm           = rot_matrix_array_dfs(v1,v2,/CAL_ROT)  ;;  [K,3,3]-element array
;;  Define rotation matrices equivalent to rot_mat.pro
;;    CAL_ROT = FALSE  --> Primed unit basis vectors are given by:
;;           Z'  :  V1
;;           Y'  :  (V1 x V2)       = (Z x V2)
;;           X'  :  (V1 x V2) x V1  = (Y x Z)
rotz           = rot_matrix_array_dfs(v1,v2)           ;;  [K,3,3]-element array
;;----------------------------------------------------------------------------------------
;;  Rotate velocities into new coordinate basis and triangulate
;;----------------------------------------------------------------------------------------
r_vels         = rotate_and_triangulate_dfs(swfv,dat_1d,rotm,rotz,VLIM=vlim)
;;  Regularly gridded velocities (for contour plots)
vx2d           = r_vels.VX2D
vy2d           = r_vels.VY2D

str_xy         = r_vels.PLANE_XY
str_xz         = r_vels.PLANE_XZ
str_yz         = r_vels.PLANE_YZ
;;  Add these parameters to the ESA data structure
str_element,data,'VX2D',vx2d,/ADD_REPLACE
str_element,data,'VY2D',vy2d,/ADD_REPLACE
;;  Get structure tag values from each plane-dependent structure
extract_tags,data,str_xy
extract_tags,data,str_xz
extract_tags,data,str_yz
;;  Define rotation matrices in output structure
;;    (Y vs. X) Plane  -->  [(V1 x V2) x V1] vs. [V1]
;;    (X vs. Z) Plane  -->  [V1] vs. [(V1 x V2)]
str_element,data,'ROT_MAT',REFORM(rotm[0,*,*]),/ADD_REPLACE
;;    (Z vs. Y) Plane  -->  [(V1 x V2)] vs. [(V1 x V2) x V1]
str_element,data,'ROT_MAT_Z',REFORM(rotz[0,*,*]),/ADD_REPLACE
;;----------------------------------------------------------------------------------------
;;  Redefine input data structure
;;----------------------------------------------------------------------------------------
dat       = data
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN
END
