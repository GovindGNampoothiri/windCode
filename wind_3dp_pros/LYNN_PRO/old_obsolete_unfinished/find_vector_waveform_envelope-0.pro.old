;+
;*****************************************************************************************
;
;  FUNCTION :   find_vector_waveform_envelope.pro
;  PURPOSE  :   This routine finds the outer envelope of a three-component vector time
;                 series of data, e.g., an electric field waveform.
;
;  CALLED BY:   
;               NA
;
;  INCLUDES:
;               NA
;
;  CALLS:
;               is_a_number.pro
;               format_2d_vec.pro
;               partition_data.pro
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               TIME      :  [N]-Element [double] array of time [s] abscissa points for
;                              each field vector component in FIELD
;               VECTOR    :  [N,3]-Element [float/double] array of data points defining
;                              the vectors (i.e., V^3) for each timestamp in TIME
;
;  EXAMPLES:    
;               test = find_vector_waveform_envelope(time,vector,SM_WIDTH=sm_width,  $
;                                                    RM_EDGES=rm_edges,LENGTH=length,$
;                                                    OFFSET=offset)
;
;  KEYWORDS:    
;               SM_WIDTH  :  Scalar [long] defining the width to use for smoothing the
;                              lower and upper bounds of the waveform envelope
;                              [Default = 3]
;               RM_EDGES  :  If set, routine sets the start and end envelope values to
;                              NaNs.  This is useful for filtered data that has
;                              artificial divergences at the start/end of the time
;                              series due to the filtering.
;               *********************************************
;               ***  keywords used by partition_data.pro  ***
;               *********************************************
;               LENGTH       :  Scalar [long] defining the # of elements to use when
;                                 defining the frequency bins for partitioning the data
;                                 to find the envelope around the power spectra.
;                                 [Default = 8]
;               OFFSET       :  Scalar [long] defining the # of elements to shift from
;                                 the start of each frequency bin
;                                 [Default = 8]
;
;   CHANGED:  1)  NA [MM/DD/YYYY   v1.0.0]
;
;   NOTES:      
;               1)  The routine requires that N â‰¥ 64
;               2)  Units do not matter as long as one is consistent
;
;  REFERENCES:  
;               NA
;
;   CREATED:  08/10/2015
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  08/10/2015   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

FUNCTION find_vector_waveform_envelope,time,vector,SM_WIDTH=sm_width,RM_EDGES=rm_edges,$
                                       LENGTH=length,OFFSET=offset

;;  Let IDL know that the following are functions
FORWARD_FUNCTION is_a_number, format_2d_vec, partition_data
;;----------------------------------------------------------------------------------------
;;  Constants
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
min_n          = 64L                         ;;  Minimum # of time stamps for TIME and FIELD
min_n_str      = STRTRIM(STRING(min_n[0],FORMAT='(I)'),2L)
;;  Defaults
def_smwd       = 3L                          ;;  Default value for SM_WIDTH keyword
def_len        = 8L                          ;;  Default value for LENGTH keyword
def_off        = 8L                          ;;  Default value for OFFSET keyword
;;  Dummy error messages
no_inpt_msg    = 'User must supply dependent and independent data arrays'
badvfor_msg    = 'Incorrect input format:  VECTOR must be an [N,3]-element [numeric] array'
badin_n_msg    = 'Incorrect input format:  TIME and FIELD[*,0] must have at least '+min_n_str[0]+' elements'
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
test           = (N_PARAMS() LT 2) OR (is_a_number(time,/NOMSSG) EQ 0) OR  $
                 (is_a_number(vector,/NOMSSG) EQ 0)
IF (test[0]) THEN BEGIN
  MESSAGE,no_inpt_msg,/INFORMATIONAL,/CONTINUE
  RETURN,0b
ENDIF
;;  Check formats
vec2d          = format_2d_vec(vector)
test           = (N_ELEMENTS(vec2d) LT 3) OR ((N_ELEMENTS(vec2d) MOD 3) NE 0)
IF (test[0]) THEN BEGIN
  MESSAGE,badvfor_msg,/INFORMATIONAL,/CONTINUE
  RETURN,0b
ENDIF
;;  So far so good --> define time and check format
tt             = REFORM(time)
szdt           = SIZE(tt,/DIMENSIONS)
szdv           = SIZE(vec2d,/DIMENSIONS)
test           = (szdv[0] NE szdt[0]) OR (szdt[0] LE min_n[0])
IF (test[0]) THEN BEGIN
  MESSAGE,badin_n_msg,/INFORMATIONAL,/CONTINUE
  RETURN,0b
ENDIF
;;----------------------------------------------------------------------------------------
;;  Define relevant parameters
;;----------------------------------------------------------------------------------------
nt             = szdt[0]                  ;;  N = # of elements in each array
ttr            = [tt,tt,tt]               ;;  3N array of times for combined vector
vecr           = [vec2d[*,0],vec2d[*,1],vec2d[*,2]]
sp             = SORT(ttr)
tts            = ttr[sp]
vecs           = vecr[sp]
;;----------------------------------------------------------------------------------------
;;  Check keywords
;;----------------------------------------------------------------------------------------
;;  Check SM_WIDTH
test           = (N_ELEMENTS(sm_width) EQ 1) AND is_a_number(sm_width,/NOMSSG)
IF (test[0]) THEN smwd = (sm_width[0] < (nt[0]/def_smwd[0]/2L)) ELSE smwd = def_smwd[0]
smwd           = smwd[0] > def_smwd[0]            ;;  Make sure SM_WIDTH is at least the default minimum
;;  Check RM_EDGES
test           = (N_ELEMENTS(rm_edges) EQ 1) AND KEYWORD_SET(rm_edges)
IF (test[0]) THEN kill_edge = 1b ELSE kill_edge = 0b
;;  Check LENGTH
test           = (N_ELEMENTS(length) EQ 1) AND is_a_number(length,/NOMSSG)
IF (test[0]) THEN nlen = (length[0] < (nt[0]/def_len[0])) ELSE nlen = def_len[0]
nlen           = nlen[0] > def_len[0]             ;;  Make sure LENGTH is at least the default minimum
;;  Check OFFSET
test           = (N_ELEMENTS(offset) EQ 1) AND is_a_number(offset,/NOMSSG)
IF (test[0]) THEN nshft = (offset[0] < (nt[0]/def_off[0])) ELSE nshft = def_off[0]
nshft          = nshft[0] > nlen[0]               ;;  Make sure OFFSET is at least LENGTH
;;----------------------------------------------------------------------------------------
;;  Find envelope around waveform (i.e., high/low values for each time range)
;;
;;    Note:  return value has [NN, MM, LL]-Elements where
;;             NN = # of elements in LENGTH
;;             MM = # of divisions = K/NN, where K = # of points in input array
;;             LL = 2 => 0 = times, 1 = vectors
;;----------------------------------------------------------------------------------------
envelope_x     = partition_data(tts,nlen[0],nshft[0],YY=vecs)
n_envel        = N_ELEMENTS(envelope_x[0,*,0])
env_xx         = REPLICATE(d,n_envel[0])
env_yy         = REPLICATE(d,n_envel[0],2L)
FOR i=0L, n_envel[0] - 1L DO BEGIN
  tempx = REFORM(envelope_x[*,i,0])
  tempy = REFORM(envelope_x[*,i,1])
  env_xx[i]   = MEAN(tempx,/NAN)    ;;  Avg. time [time units] of binned range
  env_yy[i,0] = MIN(tempy,/NAN)     ;;  Lower bound on waveform [vector units] in binned range
  env_yy[i,1] = MAX(tempy,/NAN)     ;;  Upper bound on waveform [vector units] in binned range
ENDFOR
;;  Smooth envelope [use boxcar average and median filter]
env_yy_md      = env_yy             ;;  initialize variable
env_yy_sm      = env_yy             ;;  initialize variable
;;  boxcar smooth
env_yy_sm[*,0] = SMOOTH(env_yy[*,0],smwd[0],/NAN)
env_yy_sm[*,1] = SMOOTH(env_yy[*,1],smwd[0],/NAN)
;;  median filter
env_yy_md[*,0] = MEDIAN(env_yy[*,0],smwd[0])
env_yy_md[*,1] = MEDIAN(env_yy[*,1],smwd[0])
IF (kill_edge[0]) THEN BEGIN
  ;;  User wishes to remove the edges --> set to NaNs
  se              = [0L,(n_envel[0] - 1L)]
  env_yy[se,*]    = d
  env_yy_md[se,*] = d
  env_yy_sm[se,*] = d
ENDIF
;;----------------------------------------------------------------------------------------
;;  Define return structure
;;----------------------------------------------------------------------------------------
tags           = 'ENV_'+['TIME','VALS'+['','_SM','_MED']]
struc          = CREATE_STRUCT(tags,env_xx,env_yy,env_yy_sm,env_yy_md)
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN,struc
END

