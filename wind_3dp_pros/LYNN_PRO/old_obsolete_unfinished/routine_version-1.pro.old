;+
;*****************************************************************************************
;
;  FUNCTION :   routine_version.pro
;  PURPOSE  :   This routine determines the version number associated with an input
;                 file name by examining the man page of the IDL routine defined by
;                 the file name.
;
;  CALLED BY:   
;               NA
;
;  INCLUDES:
;               NA
;
;  CALLS:
;               read_gen_ascii.pro
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               FNAME  :  Scalar [string] defining the name of the IDL routine to find the
;                           version number for
;               *************************
;               ***  Optional Inputs  ***
;               *************************
;               FDIR   :  Scalar [string] defining the full directory path to FNAME
;
;  EXAMPLES:    
;               ;;  With a well defined path specified before calling
;               UMN> fname = 'routine_version.pro'
;               UMN> fdir  = FILE_EXPAND_PATH('wind_3dp_pros/LYNN_PRO/')+'/'
;               UMN> vers  = routine_version(fname,fdir)
;               UMN> PRINT, vers
;               routine_version.pro : 08/08/2012   v1.0.0, 2012-08-08/14:27:08.951
;               ;;  Without a well defined path specified before calling
;               UMN> fname = 'routine_version.pro'
;               UMN> vers  = routine_version(fname)
;               UMN> PRINT, vers
;
;  KEYWORDS:    
;               NA
;
;   CHANGED:  1)  Updated Man. page and
;                   now calls get_os_slash.pro, add_os_slash.pro
;                                                                   [10/01/2015   v1.1.0]
;
;   NOTES:      
;               1)  FNAME must have a man page with version history with the following
;                     format:
;                        ;+
;                        .
;                        .
;                        .
;                        ;   CREATED:  MM/DD/YYYY
;                        ;   CREATED BY:  Lynn B. Wilson III
;                        ;    LAST MODIFIED:  MM/DD/YYYY   v1.0.0
;                        ;    MODIFIED BY: Lynn B. Wilson III
;                        .
;                        .
;                        .
;                        ;-
;               2)  See also:  man.pro
;
;  REFERENCES:  
;               NA
;
;   CREATED:  08/08/2012
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  10/01/2015   v1.1.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

FUNCTION routine_version,fname,fdir

FORWARD_FUNCTION get_os_slash, add_os_slash
;;----------------------------------------------------------------------------------------
;;  Define some system-dependent variables
;;----------------------------------------------------------------------------------------
;;  Get file path separator or slash
slash          = get_os_slash()
vers           = !VERSION.OS_FAMILY     ;;  e.g., 'unix'
vern           = !VERSION.RELEASE       ;;  e.g., '7.1.1'
;;  Get current working directory
test           = (vern[0] GE '6.0')
IF (test[0]) THEN cwd_char = FILE_DIRNAME('',/MARK_DIRECTORY) ELSE cwd_char = '.'+slash[0]
cur_wdir       = add_os_slash(FILE_EXPAND_PATH(cwd_char[0]))
;;  Get list of currently compiled procedures and functions
comp_pros      = ROUTINE_INFO(/SOURCE)
comp_func      = ROUTINE_INFO(/SOURCE,/FUNCTIONS)
comp_pros_n    = comp_pros.NAME
comp_pros_p    = comp_pros.PATH
comp_func_n    = comp_func.NAME
comp_func_p    = comp_func.PATH
all_routine_n  = STRLOWCASE([comp_pros_n,comp_func_n])
all_routine_p  = [comp_pros_p,comp_func_p]
;;----------------------------------------------------------------------------------------
;;  Define some constants and dummy variables
;;----------------------------------------------------------------------------------------
;mdir       = 'wind_3dp_pros'+slash[0]+'LYNN_PRO'+slash[0]
;def_dir    = FILE_EXPAND_PATH(mdir[0])+slash[0]
def_dir        = cur_wdir[0]
def_fnm        = 'routine_version.pro'
;;  Dummy error messages
no_inpt_msg    = 'User must supply at least a routine name (FNAME) as a scalar string...'
notdir_msg     = 'FDIR is not an existing directory...'
notfnm_msg     = 'FNAME is not an IDL routine...'
badnfor_msg    = 'Incorrect input format:  FNAME must be a scalar [string] defining the name of a compiled IDL routine'
baddfor_msg    = 'Incorrect input format:  FDIR must be a scalar [string] defining the full path to FNAME'
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
;IF (N_PARAMS() LT 1) THEN RETURN,''
CASE 1 OF
  (N_PARAMS() LT 1)  :  BEGIN
    ;;------------------------------------------------------------------------------------
    ;;  User provided no input
    ;;------------------------------------------------------------------------------------
    MESSAGE,no_inpt_msg,/INFORMATIONAL,/CONTINUE
    RETURN,''
  END
  (N_PARAMS() LT 2)  :  BEGIN
    ;;------------------------------------------------------------------------------------
    ;;  User provided routine name, but no file path
    ;;------------------------------------------------------------------------------------
    test           = (SIZE(fname,/TYPE) NE 7)
    IF (test[0]) THEN BEGIN
      ;;  User did not supply a string
      MESSAGE,badnfor_msg,/INFORMATIONAL,/CONTINUE
      RETURN,''
    ENDIF
    ;;  Correct variable type --> look for routine
    fnm_full       = STRTRIM(fname[0],2L)
    fnm_suff       = STRLOWCASE(STRMID(fnm_full[0],3L,/REVERSE_OFFSET))
    test           = (fnm_full[0] EQ '') OR (fnm_suff[0] NE '.pro')
    IF (test[0]) THEN BEGIN
      ;;  User provided a name, but not a routine name --> will not search blindly for it...
      MESSAGE,notfnm_msg,/INFORMATIONAL,/CONTINUE
      RETURN,''
    ENDIF
    gposi          = STRPOS(fnm_full[0],'.pro')
    fnm_pref       = STRLOWCASE(STRMID(fnm_full[0],0L,gposi[0]))  ;;  e.g., 'routine_version'
    test           = TOTAL(all_routine_n EQ fnm_pref[0]) EQ 0
    IF (test[0]) THEN BEGIN
      ;;  User provided a name for an uncompiled routine --> will not search blindly for it...
      MESSAGE,badnfor_msg,/INFORMATIONAL,/CONTINUE
      RETURN,''
    ENDIF
    ;;  Routine found --> check associated path
    good           = WHERE(all_routine_n EQ fnm_pref[0],gd)
    test           = (all_routine_p[good[0]] EQ '')
    IF (test[0]) THEN BEGIN
      ;;  User provided a name for an uncompiled routine --> will not search blindly for it...
      MESSAGE,badnfor_msg,/INFORMATIONAL,/CONTINUE
      RETURN,''
    ENDIF
    ;;  Routine and path found --> define full file path
    fdir           = all_routine_p[good[0]]
    file           = FILE_SEARCH(fdir[0],fnm_full[0])
  END
  ELSE               :  BEGIN
    ;;------------------------------------------------------------------------------------
    ;;  User provided both a routine name and a file path
    ;;------------------------------------------------------------------------------------
    
  END
ENDCASE
fnm            = STRTRIM(fname[0],2L)

;test           = (N_PARAMS() LT 1)
;IF (test[0]) THEN BEGIN
;  MESSAGE,no_inpt_msg,/INFORMATIONAL,/CONTINUE
;  RETURN,''
;ENDIF
test       = FILE_TEST(fdir[0],/DIRECTORY) NE 1
test       = FILE_TEST(fdir[0],/DIRECTORY) NE 1
IF (test) THEN BEGIN
  MESSAGE,notdir_msg,/INFORMATIONAL,/CONTINUE
  RETURN,''
ENDIF

fnm        = STRTRIM(fname[0],2L)
test       = (fnm[0] EQ '') OR (STRMID(fnm[0],3L,/REVERSE_OFFSET) NE '.pro')
IF (test) THEN BEGIN
  MESSAGE,notfnm_msg,/INFORMATIONAL,/CONTINUE
  RETURN,''
ENDIF
;;########################################################################################
;;  Define version for output
;;########################################################################################
file       = FILE_SEARCH(fdir[0],fnm[0])
IF (file[0] NE '') THEN BEGIN
  fstring  = read_gen_ascii(file[0])
  test     = STRPOS(fstring,';    LAST MODIFIED:  ') GE 0
  gposi    = WHERE(test,gpf)
  shifts   = STRLEN(';    LAST MODIFIED:  ')
  vers     = STRMID(fstring[gposi[0]],shifts[0])
ENDIF ELSE BEGIN
  vers     = '(Not Found)'
ENDELSE
vers0    = fnm[0]+' : '+vers[0]+', '
version  = vers0[0]+time_string(SYSTIME(1,/SECONDS),PREC=3)
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN,version
END

