;+
;*****************************************************************************************
;
;  FUNCTION :   pad_template.pro
;  PURPOSE  :   Create a dummy PAD structure to prevent code breaking upon
;                 multiple callings of the program my_pad_dist.pro.
;
;  CALLED BY:   
;               pad.pro
;
;  CALLS:       NA
;
;  REQUIRES:    NA
;
;  INPUT:
;               DAT  :  A 3d data structure such as those gotten from get_el,get_pl,etc.
;                         [e.g. "get_el"]
;                         Note:  If dat is not a 3DP data structure, NaNs, zeros, and
;                                  null strings replace quantities like dat.NENERGY
;
;  EXAMPLES:    NA
;
;  KEYWORDS:  
;               NUM_PA :  Number of pitch-angles to sum over (Default = 8L)
;               ESTEPS :  Energy bins to use [an array of energy bin elements defined in
;                           pad.pro]
;
;   CHANGED:  1)  Added keyword ESTEPS                 [12/08/2008   v2.0.0]
;             2)  Changed name from my_pad_template.pro to pad_template.pro
;                   and altered a few things           [07/20/2009   v2.1.0]
;             3)  Fixed a syntax issue                 [08/05/2009   v2.1.1]
;
;   CREATED:  04/20/2008
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  08/05/2009   v2.1.1
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

FUNCTION pad_template,dat,NUM_PA=num_pa,ESTEPS=esteps

;-----------------------------------------------------------------------------------------
; => Check input data
;-----------------------------------------------------------------------------------------
dtype = SIZE(dat,/TYPE)
f     = !VALUES.F_NAN
d     = !VALUES.D_NAN
IF (dtype[0] NE 8L) THEN BEGIN
  IF KEYWORD_SET(esteps) THEN BEGIN
    nenergy = N_ELEMENTS(esteps)
  ENDIF ELSE BEGIN
    nenergy = 15L   ; => Default value (value used by ES analyzers)
  ENDELSE
  unconv  = 'convert_esa_units'   ; => Unit Conversion Program
  pronme  = 'Wind 3D Plasma'      ; => 'Wind 3D Plasma'
  datnme  = 'Eesa Low Burst'      ; => e.g. 'Pesa High Burst'
  untnme  = 'Counts'              ; => e.g. 'df'
  sttime  = 0d0                   ; => Unix time at start of sample
  entime  = 0d0                   ; => " " end of sample
  intime  = 0d0                   ; => Integration time of sample
ENDIF ELSE BEGIN
  IF KEYWORD_SET(esteps) THEN BEGIN
    nenergy = N_ELEMENTS(esteps)
  ENDIF ELSE BEGIN
    nenergy = dat.NENERGY
  ENDELSE
  unconv = dat.UNITS_PROCEDURE   ; => Unit Conversion Program
  pronme = dat.PROJECT_NAME      ; => 'Wind 3D Plasma'
  datnme = dat.DATA_NAME         ; => e.g. 'Pesa High Burst'
  untnme = dat.UNITS_NAME        ; => e.g. 'df'
  sttime = dat.TIME              ; => Unix time at start of sample
  entime = dat.END_TIME          ; => " " end of sample
  intime = dat.INTEG_T           ; => Integration time of sample
ENDELSE
;-----------------------------------------------------------------------------------------
; => Define number of pitch-angles
;-----------------------------------------------------------------------------------------
IF KEYWORD_SET(num_pa) THEN BEGIN
  pang = num_pa
ENDIF ELSE BEGIN
  pang = 8
ENDELSE
;-----------------------------------------------------------------------------------------
; => Define dummy variables and dummy structure template
;-----------------------------------------------------------------------------------------
newd   = REPLICATE(f,nenergy,pang)   ; => Dummy Data array
newp   = REPLICATE(f,nenergy,pang)   ; => Dummy Pitch-Angle array
energy = REPLICATE(f,nenergy,pang)   ; => Dummy Energy Bin array
dnergy = REPLICATE(f,nenergy,pang)   ; => Dummy Differential " "
geom   = REPLICATE(f,nenergy,pang)   ; => Dummy Geometry Factor array
dt     = REPLICATE(f,nenergy,pang)   ; => Dummy Integration Time array
deadt  = REPLICATE(f,nenergy,pang)   ; => Dummy Dead Time array
bph    = f                           ; => Dummy B-field azimuthal angle
bth    = f                           ; => Dummy B-field poloidal angle

pad = CREATE_STRUCT('PROJECT_NAME',pronme,'DATA_NAME',datnme+' PAD',                  $
                    'VALID',0,'UNITS_NAME',untnme,'TIME',sttime,                      $
                    'END_TIME',entime,'INTEG_T',intime,'NBINS',pang,                  $
                    'NENERGY',nenergy,'DATA',newd,'ENERGY',energy,'ANGLES',newp,      $
                    'DENERGY',dnergy,'BTH',f,'BPH',f,'GF',geom,'DT',dt,               $
                    'GEOMFACTOR',d,'MASS',dat.MASS,'UNITS_PROCEDURE',unconv,          $
                    'DEADTIME',deadt)
RETURN,pad
END
