;+
;*****************************************************************************************
;
;  FUNCTION :   add_magf2.pro
;  PURPOSE  :   Adds the magnetic field vector (nT) to an array of 3DP data
;                 structures obtained from get_??.pro (e.g. ?? = el, eh, sf, phb, etc.)
;                 with the tag name MAGF.  This program is vectorized and at least
;                 an order of magnitude faster than add_magf.pro for inputs being
;                 arrays of 3DP data structures.
;
;  CALLED BY:   NA
;
;  CALLS:
;               get_data.pro
;               interp.pro
;
;  REQUIRES:    
;               Magnetic field data must be loaded first...
;
;  INPUT:
;               DAT    :  An array of 3DP data structures
;               SOURCE :  A string or TPLOT data structure specifying the data to use for
;                           magnetic field vector (nT) estimates
;                           [TPLOT Structure Format:  {X:(N-Unix Times),Y:[N,3]-Vectors}]
;
;  EXAMPLES:
;               elb = my_3dp_str_call_2('elb',TRANGE=tr)
;               de  = elb.DATA
;               add_scpot,de,'wi_B3(GSE)'
;
;  KEYWORDS:    NA
;
;   CHANGED:  1)  Rewrote entire program to vectorize as many operations as possible
;                   for increased speed                        [11/06/2008   v2.0.0]
;             2)  Changed function INTERPOL.PRO to interp.pro  [11/07/2008   v2.0.1]
;             3)  Updated man page                             [06/17/2009   v2.0.2]
;             4)  Rewrote to optimize a few parts and clean up some cludgy parts
;                                                              [06/22/2009   v2.1.0]
;             5)  Changed a little syntax                      [08/28/2009   v2.1.1]
;             6)  Added error handling to check if DAT is a data structure and
;                   added NO_EXTRAP option to interp.pro call
;                                                              [12/15/2011   v2.1.2]
;
;   ADAPTED FROM: add_magf.pro  BY: Davin Larson
;   CREATED:  04/27/2008
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  12/15/2011   v2.1.2
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

PRO add_magf2,dat,source

;*****************************************************************************************
ex_start = SYSTIME(1)
;*****************************************************************************************
;-----------------------------------------------------------------------------------------
; => Check input parameters
;-----------------------------------------------------------------------------------------
IF (SIZE(dat[0],/TYPE) NE 8L) THEN BEGIN
  errmsg = 'Input DAT must be a data structure!'
  MESSAGE,errmsg[0],/CONTINUE,/INFORMATIONAL
  RETURN
ENDIF

IF (SIZE(source,/TYPE) EQ 8L) THEN BEGIN
  magf = source
ENDIF
IF (SIZE(source,/TYPE) EQ 7L) THEN BEGIN
  get_data,source,DATA=magf,INDEX=h
  IF (h EQ 0) THEN BEGIN
    cnt = 0
    RETURN
  ENDIF
ENDIF
;-----------------------------------------------------------------------------------------
; => Define time ranges
;-----------------------------------------------------------------------------------------
n       = N_ELEMENTS(dat)
b       = FLTARR(n,3)
delt    = MIN(dat.END_TIME - dat.TIME,/NAN)   ; => Minimum length of data structure event
myavt   = (dat.TIME + dat.END_TIME)/2d0
tra     = [MIN(dat.TIME,/NAN)-delt,MAX(dat.END_TIME,/NAN)+delt]

gmag = WHERE(magf.X LE tra[1] AND magf.X GE tra[0],gmg)
IF (gmg GT 0) THEN BEGIN
  magx = interp(magf.Y[*,0],magf.X,myavt,/NO_EXTRAP)
  magy = interp(magf.Y[*,1],magf.X,myavt,/NO_EXTRAP)
  magz = interp(magf.Y[*,2],magf.X,myavt,/NO_EXTRAP)
  mag  = [[magx],[magy],[magz]]
ENDIF ELSE BEGIN
  MESSAGE,'Data times are outside of magnetic field times... check input!',/CONTINUE,/INFORMATIONAL
  mag             = REPLICATE(!VALUES.F_NAN,n,3)
  dat[*].MAGF[*]  = TRANSPOSE(mag)
  RETURN
ENDELSE
b   = REFORM(mag)
bsz = SIZE(b,/N_DIMENSIONS)
ccc = 0L
;=========================================================================================
JUMP_RETRY:
;=========================================================================================
;-----------------------------------------------------------------------------------------
; => Check if only one structure was passed through
;-----------------------------------------------------------------------------------------
IF (bsz[0] LE 1) THEN BEGIN
  gmag = WHERE(FINITE(b),gmg,COMPLEMENT=bmag)
  IF (gmg EQ 3L) THEN BEGIN
    dat[0].MAGF = REFORM(b)
    RETURN
  ENDIF ELSE BEGIN
    MESSAGE,'There is no finite magnetic field for this time!',/CONTINUE,/INFORMATIONAL
    dat[0].MAGF = REPLICATE(!VALUES.F_NAN,3)
    RETURN
  ENDELSE
ENDIF ELSE BEGIN
  ;---------------------------------------------------------------------------------------
  ; -If one element of the 3 in any vector is not finite when the other two are
  ;   then I force all of them to be !VALUES.F_NAN so that the number of "good"
  ;   points are integer multiples of 3.  Once I have eliminated all the 
  ;   vectors which aren't symmetrically finite or non-finite, then I can 
  ;   interpolate the ones which remain.
  ;---------------------------------------------------------------------------------------
  gmagx = WHERE(FINITE(b[*,0]),gmgx,COMPLEMENT=bmagx,NCOMPLEMENT=bmgx)
  gmagy = WHERE(FINITE(b[*,1]),gmgy,COMPLEMENT=bmagy,NCOMPLEMENT=bmgy)
  gmagz = WHERE(FINITE(b[*,2]),gmgz,COMPLEMENT=bmagz,NCOMPLEMENT=bmgz)
  agmag = CREATE_STRUCT('T0',gmagx,'T1',gmagy,'T2',gmagz)
  abmag = CREATE_STRUCT('T0',bmagx,'T1',bmagy,'T2',bmagz)
  chgm  = WHERE([gmgx,gmgy,gmgz] GT 0,ch)
  chbm  = WHERE([bmgx,bmgy,bmgz] GT 0,bh)
  gtest = ((gmgx EQ gmgy) AND (gmgx EQ gmgz))
  ntest = ((gmgx EQ gmgy) AND (gmgx EQ gmgz)) AND (gmgx EQ n AND gmgy EQ n AND gmgz EQ n)
  ;---------------------------------------------------------------------------------------
  IF (ntest) THEN BEGIN 
    mymag = FLOAT(b)
    GOTO,JUMP_GOOD  ; => All good
  ENDIF
  ;---------------------------------------------------------------------------------------
  IF (bh GT 0L) THEN BEGIN
    FOR j=0L, bh - 1L DO BEGIN
      bels      = abmag.(chbm[j])
      gels      = agmag.(chbm[j])
      b[bels,*] = REPLICATE(!VALUES.F_NAN,N_ELEMENTS(bels),3)
      IF (gels[0] NE -1) THEN BEGIN
        tmagx     = interp(b[gels,0],myavt[gels],myavt,/NO_EXTRAP)
        tmagy     = interp(b[gels,1],myavt[gels],myavt,/NO_EXTRAP)
        tmagz     = interp(b[gels,2],myavt[gels],myavt,/NO_EXTRAP)
        b         = [[tmagx],[tmagy],[tmagz]]
      ENDIF
    ENDFOR
    ccc      += 1L
    IF (ccc LT 3L) THEN GOTO,JUMP_RETRY ELSE mymag = FLOAT(b)
  ENDIF ELSE BEGIN
    MESSAGE,'There is no finite magnetic field for these times!',/CONTINUE,/INFORMATIONAL
    mag = REPLICATE(!VALUES.F_NAN,n,3)
    dat[*].MAGF[*] = TRANSPOSE(mag)
    RETURN
  ENDELSE
ENDELSE
;-----------------------------------------------------------------------------------------
; => Add magnetic field data to structure
;-----------------------------------------------------------------------------------------
;=========================================================================================
JUMP_GOOD:
;=========================================================================================
dat[*].MAGF[*]  = TRANSPOSE(mymag)
;*****************************************************************************************
ex_time = SYSTIME(1) - ex_start
MESSAGE,STRING(ex_time)+' seconds execution time.',/CONTINUE,/INFORMATIONAL
;*****************************************************************************************
RETURN
END
