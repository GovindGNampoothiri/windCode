;+
;*****************************************************************************************
;
;  FUNCTION :   extract_good_mva_from_adapint.pro
;  PURPOSE  :   This is a wrapping routine for adaptive_mva_interval_wrapper.pro that
;                 extracts the good MVA intervals from the bad.  The output structure
;                 contains all the MVA results and separate tags for the "good" and
;                 "best" results.  The "good"/"best" results are defined as follows:
;                   Let L_j be the jth eigenvalue, then we have:
;                     good = ((L_mid/L_min ≥ 10) && (L_max/L_mid < 3)) || 
;                             (L_mid/L_min)/(L_max/L_mid) > 3
;                     best = the subintervals that satisfy both of the following:
;                             Maximize  :  (L_mid/L_min - L_max/L_mid) && (L_mid/L_min)
;                             Minimize  :  (L_max/L_mid)
;
;  CALLED BY:   
;               NA
;
;  INCLUDES:
;               NA
;
;  CALLS:
;               adaptive_mva_interval_wrapper.pro
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               STRUC          :  Scalar [structure] defining a valid TPLOT structure
;                                   the the user wishes to clip (in time) in order to
;                                   examine only data between the limits defined by the
;                                   TRANGE keyword and then perform MVA on subintervals.
;
;                                   The required structure tags for STRUC are:
;                                     X  :  [N]-Element array of Unix times
;                                     Y  :  [N,3]-Element array of 3-vectors
;
;                                   If the TSHIFT tag is present, the routine will assume
;                                   that STRUC.X is seconds from STRUC.TSHIFT[0].
;
;  EXAMPLES:    
;               [calling sequence]
;               mva_out = adaptive_mva_interval_wrapper(struc [,TRANGE=trange]         $
;                                       [,PRECISION=prec] [,LOW_FREQ=low_freq]         $
;                                       [,HIGHFREQ=highfreq] [,NSHIFT=nshift]          $
;                                       [,NSUBINT=nsubint] [,NTWINDS=ntwinds]          $
;                                       [,DNWINDS=dnwinds] [,NTMIN=ntmin]              $
;                                       [,NTMAX=ntmax] [,/CONS_NSHFNMIN]               $
;                                       [,MIN_AMP_THRSH=min_amp_thrsh] [,/GOOD_10_3])
;
;  KEYWORDS:    
;               TRANGE         :  [2]-Element [double] array specifying the Unix time
;                                   range for which to limit the data in STRUC
;                                   [Default = prompted by get_valid_trange.pro]
;               PRECISION      :  Scalar [long] defining precision of the string output:
;                                   = -5  :  Year only
;                                   = -4  :  Year, month
;                                   = -3  :  Year, month, date
;                                   = -2  :  Year, month, date, hour
;                                   = -1  :  Year, month, date, hour, minute
;                                   = 0   :  Year, month, date, hour, minute, sec
;                                   = >0  :  fractional seconds
;                                   [Default = 0]
;               LOW_FREQ       :  Scalar [numeric] defining the lower frequency bound for
;                                   a bandpass filter to be applied to the entire time
;                                   series in STRUC prior to clipping and performing MVA
;                                   [Default = 0.0]
;               HIGHFREQ       :  Scalar [numeric] defining the upper frequency bound for
;                                   a bandpass filter to be applied to the entire time
;                                   series in STRUC prior to clipping and performing MVA
;                                   [Default = (sample rate)]
;               NSHIFT         :  Scalar [long] defining the index shift for each new
;                                   time window set (i.e., each subinterval) such that
;                                   the following constraint is met:
;                                     ((Nmax + NSUBINT*NSHIFT) MOD Nint) = 0
;                                   where Nmax is the maximum # of time steps in each
;                                   subinterval and Nint is the # of time steps within
;                                   the range defined by TRANGE
;                                   [Default = 1]
;               NSUBINT        :  Scalar [long] defining the number of subintervals that
;                                   each contain NTWINDS time windows
;                                   [Default = 5]
;               NTWINDS        :  Scalar [long] defining the number of time windows to
;                                   use between Nmin and Nmax (i.e., each subinterval)
;                                   before shifting by NSHIFT
;                                   [Default = 4]
;               DNWINDS        :  Scalar [long] defining the integer # of time steps by
;                                   which to increase each time window such that there
;                                   are an integer number of window, NTWINDS, within the
;                                   range between Nmin and Nmax such that:
;                                     Nmax = Nmin + (NTWINDS - 1)*DNWINDS
;                                   [Default = (Nmax - Nmin)/(NTWINDS - 1)]
;               NTMIN          :  Scalar [long] defining the minimum integer # of time
;                                   steps to use when defining the time windows within
;                                   each subinterval
;                                   [Default = 7 > (Sr*Co/HIGHFREQ)]
;               NTMAX          :  Scalar [long] defining the maximum integer # of time
;                                   steps to use when defining the time windows within
;                                   each subinterval
;                                   [Default = N_MIN + (NTWINDS - 1)*DNWINDS]
;               CONS_NSHFNMIN  :  If set, routine will force NSHIFT ≥ N_MIN/2
;                                   (idea is to prevent too much overlap)
;                                   [Default = FALSE]
;               MIN_AMP_THRSH  :  Scalar [numeric] defining the minimum vector component
;                                   peak-to-peak amplitude necessary for an interval
;                                   to undergo minimum variance analysis.  The input must
;                                   be positive definite.
;                                   [Default = 0]
;               GOOD_10_3      :  If set, routine redefines "good" as satisfying the
;                                   following:
;                                     good = ((L_mid/L_min ≥ 10) && (L_max/L_mid < 3))
;                                   [Default = FALSE]
;
;   CHANGED:  1)  Continued to write routine
;                                                                   [06/07/2016   v1.0.0]
;
;   NOTES:      
;               1)  See Man. pages from adaptive_mva_interval_wrapper.pro
;
;  REFERENCES:  
;               1)  G. Paschmann and P.W. Daly "Analysis Methods for Multi-Spacecraft
;                     Data," ISSI Scientific Report, Noordwijk, The Netherlands.,
;                     Int. Space Sci. Inst., 1998.
;               2)  J.C. Samson and J.V. Olson, "Some Comments on the Descriptions of
;                      the Polarization States of Waves," Geophys. J. Astr. Soc. 61,
;                      pp. 115-129, 1980.
;               3)  J.D. Means, "Use of the Three-Dimensional Covariance Matrix in
;                      Analyzing the Polarization Properties of Plane Waves,"
;                      J. Geophys. Res. 77(28), pg 5551-5559, 1972.
;               4)  H. Kawano and T. Higuchi "The bootstrap method in space physics:
;                     Error estimation for the minimum variance analysis," Geophys.
;                     Res. Lett. 22(3), pp. 307-310, 1995.
;               5)  A.V. Khrabrov and B.U.Ö Sonnerup "Error estimates for minimum
;                     variance analysis," J. Geophys. Res. 103(A4), pp. 6641-6651,
;                     1998.
;
;   CREATED:  06/07/2016
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  06/07/2016   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

FUNCTION extract_good_mva_from_adapint,struc,TRANGE=trange,PRECISION=prec,            $
                                             LOW_FREQ=low_freq,HIGHFREQ=highfreq,     $
                                             NSHIFT=nshift,NSUBINT=nsubint,           $
                                             NTWINDS=ntwinds,DNWINDS=dnwinds,         $
                                             NTMIN=ntmin,NTMAX=ntmax,                 $
                                             CONS_NSHFNMIN=cons_nshfnmin,             $
                                             MIN_AMP_THRSH=min_amp_thrsh,             $
                                             GOOD_10_3=good_10_3

;;****************************************************************************************
ex_start = SYSTIME(1)
;;****************************************************************************************
;;----------------------------------------------------------------------------------------
;;  Constants
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
;;----------------------------------------------------------------------------------------
;;  Get MVA intervals and other parameters
;;----------------------------------------------------------------------------------------
mva_struc      = adaptive_mva_interval_wrapper(struc,TRANGE=trange,PRECISION=prec,      $
                                               LOW_FREQ=low_freq,HIGHFREQ=highfreq,     $
                                               NSHIFT=nshift,NSUBINT=nsubint,           $
                                               NTWINDS=ntwinds,DNWINDS=dnwinds,         $
                                               NTMIN=ntmin,NTMAX=ntmax,                 $
                                               CONS_NSHFNMIN=cons_nshfnmin,             $
                                               MIN_AMP_THRSH=min_amp_thrsh              )
;;  Make sure valid outputs were returned
test           = (SIZE(mva_struc,/TYPE) NE 8)
IF (test[0]) THEN BEGIN
  ;;  Not enough time steps in entire input time series
  MESSAGE,"Adaptive interval routine failure:  Exiting without computation...",/INFORMATIONAL,/CONTINUE
  RETURN,0b
ENDIF
;;----------------------------------------------------------------------------------------
;;  Check keywords
;;----------------------------------------------------------------------------------------
;;  Check GOOD_10_3
test           = KEYWORD_SET(good_10_3) AND (N_ELEMENTS(good_10_3) GT 0)
IF (test[0]) THEN gd103_on = 1b ELSE gd103_on = 0b
;;----------------------------------------------------------------------------------------
;;  Define relevant parameters
;;----------------------------------------------------------------------------------------
int_struc      = mva_struc.MVA_INT_STR
;;  Define start/end indices of subintervals
ind_st         = int_struc.INDW_START     ;;  Start indices from beginning of interval defined by TRANGE
ind_en         = int_struc.INDW___END     ;;  End " "
;;  Define start/end indices of time interval defined by TRANGE
gind_se        = int_struc.TW_IND_SE      ;;  Start/End index from beginning of time series for points within TRANGE
;;  Define "good" arrays
gind_mva_1d    = mva_struc.GOOD_MVA_INDS
best_mva_sub   = mva_struc.BEST_UNQ_INDS
gind_mva_sub   = WHERE(best_mva_sub GE 0,gd_mva_sub)
;;  Define N_MIN, N_MAX, N_INT, N_SUB, N_SFT, N_WIN, D__NW
n_min          = int_struc.N_VALS[0]
n_max          = int_struc.N_VALS[1]
n_sub          = int_struc.N_VALS[2]
n_sft          = int_struc.N_VALS[3]
n_win          = int_struc.N_VALS[4]
d__nw          = int_struc.N_VALS[5]
n_int          = int_struc.N_VALS[6]
;;  Define eigenvalues and eigenvectors
eigval_min     = mva_struc.ALL_EIGVALS.MIN_VAR     ;;  [N_SUB,N_WIN]-Element array for Min.   Var. eigenvalue
eigval_mid     = mva_struc.ALL_EIGVALS.MID_VAR     ;;  " " Inter. Var. eigenvalue
eigval_max     = mva_struc.ALL_EIGVALS.MAX_VAR     ;;  " " Max.   Var. eigenvalue
eigvec_min     = mva_struc.ALL_EIGVECS.MIN_VAR     ;;  [N_SUB,N_WIN,3]-Element array for Min.   Var. eigenvector
eigvec_mid     = mva_struc.ALL_EIGVECS.MID_VAR     ;;  " " Inter. Var. eigenvector
eigvec_max     = mva_struc.ALL_EIGVECS.MAX_VAR     ;;  " " Max.   Var. eigenvector
;;----------------------------------------------------------------------------------------
;;  Find "good" eigenvalues and eigenvectors
;;----------------------------------------------------------------------------------------
dumb_val       = REPLICATE(d,n_sub[0],n_win[0])
dumb_vec       = REPLICATE(d,n_sub[0],n_win[0],3L)
min_eval       = dumb_val     ;;  Array for Min.   Var. eigenvalue
mid_eval       = dumb_val     ;;  Array for Inter. Var. eigenvalue
max_eval       = dumb_val     ;;  Array for Max.   Var. eigenvalue
min_evec       = dumb_vec     ;;  Array for Min.   Var. eigenvector
mid_evec       = dumb_vec     ;;  Array for Inter. Var. eigenvector
max_evec       = dumb_vec     ;;  Array for Max.   Var. eigenvector
;;  Fill eigenvalue arrays
min_eval[gind_mva_1d] = eigval_min[gind_mva_1d]
mid_eval[gind_mva_1d] = eigval_mid[gind_mva_1d]
max_eval[gind_mva_1d] = eigval_max[gind_mva_1d]
;;  Fill eigenvector arrays
FOR k=0L, 2L DO BEGIN
  ;;  Create dummy arrays
  tempmin              = eigvec_min[*,*,k]
  tempmid              = eigvec_mid[*,*,k]
  tempmax              = eigvec_max[*,*,k]
  new_min              = dumb_val
  new_mid              = dumb_val
  new_max              = dumb_val
  ;;  Fill dummy arrays
  new_min[gind_mva_1d] = tempmin[gind_mva_1d]
  new_mid[gind_mva_1d] = tempmid[gind_mva_1d]
  new_max[gind_mva_1d] = tempmax[gind_mva_1d]
  ;;  Fill output arrays
  min_evec[*,*,k]      = new_min
  mid_evec[*,*,k]      = new_mid
  max_evec[*,*,k]      = new_max
ENDFOR
;;----------------------------------------------------------------------------------------
;;  Check if we need to redefine "good"
;;----------------------------------------------------------------------------------------
IF (gd103_on[0]) THEN BEGIN
  ;;  Require:  ((L_mid/L_min ≥ 10) && (L_max/L_mid < 3))
  d2n_rat = mid_eval/min_eval
  x2d_rat = max_eval/mid_eval
  test    = (d2n_rat GE 10) AND (x2d_rat LT 3) AND FINITE(d2n_rat) AND FINITE(x2d_rat)
  good    = WHERE(test,gd,COMPLEMENT=bad,NCOMPLEMENT=bd)
  IF (bd[0] GT 0) THEN BEGIN
    ;;  At least one element failed --> set to NaNs
    min_eval[bad] = d
    mid_eval[bad] = d
    max_eval[bad] = d
    FOR k=0L, 2L DO BEGIN
      tempmin              = min_evec[*,*,k]
      tempmid              = mid_evec[*,*,k]
      tempmax              = max_evec[*,*,k]
      tempmin[bad]         = d
      tempmid[bad]         = d
      tempmax[bad]         = d
      min_evec[*,*,k]      = tempmin
      mid_evec[*,*,k]      = tempmid
      max_evec[*,*,k]      = tempmax
    ENDFOR
  ENDIF
ENDIF
;;----------------------------------------------------------------------------------------
;;  Find MVA results satisfying "good" and are the unique "best"
;;----------------------------------------------------------------------------------------
dumb_1d        = REPLICATE(d,n_sub[0])
dumb_2d        = REPLICATE(d,n_sub[0],3L)
dumb_l11d      = REPLICATE(-1L,n_sub[0])
dumb_l12d      = REPLICATE(-1L,n_sub[0],2L)
best_min_val   = dumb_1d           ;;  [N_SUB]-Element array for the "best" "good" Min.   Var. eigenvalue
best_mid_val   = dumb_1d           ;;  " " Inter. Var. eigenvalue
best_max_val   = dumb_1d           ;;  " " Max.   Var. eigenvalue
best_min_vec   = dumb_2d           ;;  [N_SUB,3]-Element array for the "best" "good" Min.   Var. eigenvector
best_mid_vec   = dumb_2d           ;;  " " Inter. Var. eigenvector
best_max_vec   = dumb_2d           ;;  " " Max.   Var. eigenvector
;b_sw_ind       = dumb_l12d         ;;  Indices of the "best" "good" [subinterval,window]
;b_st_ind       = dumb_l11d         ;;  "best" "good" start indices of input array
;b_en_ind       = dumb_l11d         ;;  "best" "good" end " "
FOR s=0L, n_sub[0] - 1L DO BEGIN
  w                 = best_mva_sub[s]
  IF (w[0] LT 0) THEN CONTINUE
  best_min_val[s]   = min_eval[s[0],w[0]]
  best_mid_val[s]   = mid_eval[s[0],w[0]]
  best_max_val[s]   = max_eval[s[0],w[0]]
  best_min_vec[s,*] = min_evec[s[0],w[0],*]
  best_mid_vec[s,*] = mid_evec[s[0],w[0],*]
  best_max_vec[s,*] = max_evec[s[0],w[0],*]
  ;;  Check indices
  test              = FINITE(min_eval[s[0],w[0]]) AND FINITE(mid_eval[s[0],w[0]]) AND $
                      FINITE(max_eval[s[0],w[0]])
  IF (~test[0]) THEN CONTINUE
  ;;  Okay --> Define indices
  sw0               = TRANSPOSE([s[0],w[0]])
  st0               = ind_st[s[0],w[0]]
  en0               = ind_en[s[0],w[0]]
  IF (N_ELEMENTS(b_sw_ind) LT 2) THEN b_sw_ind = sw0 ELSE b_sw_ind = [b_sw_ind,sw0]
  IF (N_ELEMENTS(b_st_ind) LT 0) THEN b_st_ind = st0 ELSE b_st_ind = [b_st_ind,st0]
  IF (N_ELEMENTS(b_en_ind) LT 0) THEN b_en_ind = en0 ELSE b_en_ind = [b_en_ind,en0]
;  b_sw_ind[s,*]     = [s[0],w[0]]
;  b_st_ind[s]       = ind_st[s[0],w[0]]
;  b_en_ind[s]       = ind_en[s[0],w[0]]
ENDFOR
;;  Define rotation matrices from ICB to MVA
bg_r_icb2mva   = [[[best_min_vec]],[[best_mid_vec]],[[best_max_vec]]]
;;----------------------------------------------------------------------------------------
;;  Define output structure
;;----------------------------------------------------------------------------------------
tags           = ['MIN_VAR','MID_VAR','MAX_VAR']
eigval_good    = CREATE_STRUCT(tags,min_eval,mid_eval,max_eval)
eigval_best    = CREATE_STRUCT(tags,best_min_val,best_mid_val,best_max_val)
eigvec_good    = CREATE_STRUCT(tags,min_evec,mid_evec,max_evec)
eigvec_best    = CREATE_STRUCT(tags,best_min_vec,best_mid_vec,best_max_vec)
tags           = ['BEST_IND_SW','BEST_ST_SIND','BEST_EN_SIND']
best_ind_str   = CREATE_STRUCT(tags,b_sw_ind,b_st_ind,b_en_ind)
tags           = ['ALL_MVA_RESULTS','GOOD_EIGVALS','GOOD_EIGVECS','BEST_EIGVALS',$
                  'BEST_EIGVECS','BEST_ROT_ICB2MVA','BEST_IND_STRUC']
out_struc      = CREATE_STRUCT(tags,mva_struc,eigval_good,eigvec_good,eigval_best,$
                               eigvec_best,bg_r_icb2mva,best_ind_str)
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------
;;****************************************************************************************
ex_time        = SYSTIME(1) - ex_start[0]
MESSAGE,'Execution Time: '+STRING(ex_time)+' seconds',/INFORMATIONAL,/CONTINUE
;;****************************************************************************************

RETURN,out_struc
END



