;+
;*****************************************************************************************
;
;  PROCEDURE:   model_powerlaw.pro
;  PURPOSE  :   Creates a model power-law, from user defined inputs, represented by:
;                 Y = A X^(B) + C
;
;  CALLED BY:   
;               wrapper_multi_func_fit.pro
;
;  CALLS:
;               NA
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               XX        :  [N]-Element array of independent variable values
;               PARAM     :  [4]-Element array containing the following initialization
;                              quantities for the model functions (see below):
;                                PARAM[0] = A
;                                PARAM[1] = B
;                                PARAM[2] = C
;                                PARAM[3] = *** Not Used Here ***
;
;  OUTPUT:
;               FF        :  Set to a named variable to return an [N]-element array of
;                              values corresponding to the evaluated function
;               PDER      :  Set to a named variable to return an [N,4]-element array
;                              containing the partial derivatives of Y with respect to
;                              each element of PARAM.
;
;  EXAMPLES:    
;               NA
;
;  KEYWORDS:    
;               NA
;
;   CHANGED:  1)  NA [MM/DD/YYYY   v1.0.0]
;
;   NOTES:      
;               1)  Called when FIT_FUNC = 1
;
;  REFERENCES:  
;               NA
;
;   CREATED:  05/01/2014
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  05/01/2014   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

PRO model_powerlaw,xx,param,ff,pder

;;----------------------------------------------------------------------------------------
;;  Define some constants and dummy variables
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
IF (N_PARAMS() LT 2) THEN BEGIN
  ;;  no input???
  RETURN
ENDIF

np             = N_ELEMENTS(param)
IF (np LT 4) THEN BEGIN
  ;;  bad input???
  RETURN
ENDIF
;;----------------------------------------------------------------------------------------
;;  Calculate function
;;    Y = PARAM[0] * XX^(PARAM[1]) + PARAM[2]
;;----------------------------------------------------------------------------------------
ff             = param[0]*xx^(param[1]) + param[2]
;;----------------------------------------------------------------------------------------
;;  Calculate partial derivatives of Y = A X^(B) + C
;;    dY/dA = X^(B)
;;    dY/dB = A X^(B) Log_{e} |X|
;;    dY/dC = 1
;;    dY/dD = 0
;;----------------------------------------------------------------------------------------
nx             = N_ELEMENTS(xx)
zeros          = REPLICATE(0d0,nx)
ones           = REPLICATE(1d0,nx)
dY_dA          = xx^(param[1])
dY_dB          = param[0]*xx^(param[1])*ALOG(xx)
dY_dC          = ones
dY_dD          = zeros
;;  Define partial derivatives for return
pder           = [[dY_dA],[dY_dB],[dY_dC],[dY_dD]]
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN
END

;+
;*****************************************************************************************
;
;  PROCEDURE:   model_exponential_0.pro
;  PURPOSE  :   Creates a model , from user defined inputs, represented by:
;                 Y = A e^(B X) + C
;
;  CALLED BY:   
;               wrapper_multi_func_fit.pro
;
;  CALLS:
;               NA
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               XX        :  [N]-Element array of independent variable values
;               PARAM     :  [4]-Element array containing the following initialization
;                               quantities for the model functions (see below):
;                                 PARAM[0] = A
;                                 PARAM[1] = B
;                                 PARAM[2] = C
;                                 PARAM[3] = D
;
;  OUTPUT:
;               FF        :  Set to a named variable to return an [N]-element array of
;                              values corresponding to the evaluated function
;               PDER      :  Set to a named variable to return an [N,4]-element array
;                              containing the partial derivatives of Y with respect to
;                              each element of PARAM.
;
;  EXAMPLES:    
;               NA
;
;  KEYWORDS:    
;               NA
;
;   CHANGED:  1)  NA [MM/DD/YYYY   v1.0.0]
;
;   NOTES:      
;               1)  Called when FIT_FUNC = 2
;
;  REFERENCES:  
;               
;
;   CREATED:  05/01/2014
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  05/01/2014   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

PRO model_exponential_0,xx,param,ff,pder

;;----------------------------------------------------------------------------------------
;;  Define some constants and dummy variables
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
IF (N_PARAMS() LT 2) THEN BEGIN
  ;;  no input???
  RETURN
ENDIF

np             = N_ELEMENTS(param)
IF (np LT 4) THEN BEGIN
  ;;  bad input???
  RETURN
ENDIF
;;----------------------------------------------------------------------------------------
;;  Calculate function
;;    Y = PARAM[0]*EXP(PARAM[1]*X) + PARAM[2]
;;----------------------------------------------------------------------------------------
ff             = param[0]*EXP(param[1]*xx) + param[2]
;;----------------------------------------------------------------------------------------
;;  Calculate partial derivatives of Y = A e^(B X) + C
;;    dY/dA = e^(B X)
;;    dY/dB = A X e^(B X)
;;    dY/dC = 1
;;    dY/dD = 0
;;----------------------------------------------------------------------------------------
nx             = N_ELEMENTS(xx)
zeros          = REPLICATE(0d0,nx)
ones           = REPLICATE(1d0,nx)
dY_dA          = EXP(param[1]*xx)
dY_dB          = param[0]*xx*EXP(param[1]*xx)
dY_dC          = ones
dY_dD          = zeros
;;  Define partial derivatives for return
pder           = [[dY_dA],[dY_dB],[dY_dC],[dY_dD]]
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN
END

;+
;*****************************************************************************************
;
;  PROCEDURE:   model_loglin_powerlaw.pro
;  PURPOSE  :   Creates a model , from user defined inputs, represented by:
;                 Y = A + B Log_{e} |X^C|
;
;  CALLED BY:   
;               wrapper_multi_func_fit.pro
;
;  CALLS:
;               NA
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               XX        :  [N]-Element array of independent variable values
;               PARAM     :  [4]-Element array containing the following initialization
;                               quantities for the model functions (see below):
;                                 PARAM[0] = A
;                                 PARAM[1] = B
;                                 PARAM[2] = C
;                                 PARAM[3] = D
;
;  OUTPUT:
;               FF        :  Set to a named variable to return an [N]-element array of
;                              values corresponding to the evaluated function
;               PDER      :  Set to a named variable to return an [N,4]-element array
;                              containing the partial derivatives of Y with respect to
;                              each element of PARAM.
;
;  EXAMPLES:    
;               NA
;
;  KEYWORDS:    
;               NA
;
;   CHANGED:  1)  NA [MM/DD/YYYY   v1.0.0]
;
;   NOTES:      
;               1)  Called when FIT_FUNC = 3
;
;  REFERENCES:  
;               
;
;   CREATED:  05/01/2014
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  05/01/2014   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

PRO model_loglin_powerlaw,xx,param,ff,pder

;;----------------------------------------------------------------------------------------
;;  Define some constants and dummy variables
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
IF (N_PARAMS() LT 2) THEN BEGIN
  ;;  no input???
  RETURN
ENDIF

np             = N_ELEMENTS(param)
IF (np LT 4) THEN BEGIN
  ;;  bad input???
  RETURN
ENDIF
;;----------------------------------------------------------------------------------------
;;  Calculate function
;;    Y = PARAM[0] + PARAM[1]*ALOG(ABS( X^PARAM[2] ))
;;----------------------------------------------------------------------------------------
ff             = param[0] + param[1]*ALOG(ABS(xx^param[2]))
;;----------------------------------------------------------------------------------------
;;  Calculate partial derivatives of Y = A + B Log_{e} |X^C|
;;    dY/dA = 1
;;    dY/dB = Log_{e} |X^C|
;;    dY/dC = B Log_{e} |X|
;;    dY/dD = 0
;;----------------------------------------------------------------------------------------
nx             = N_ELEMENTS(xx)
zeros          = REPLICATE(0d0,nx)
ones           = REPLICATE(1d0,nx)
dY_dA          = ones
dY_dB          = ALOG(ABS(xx^param[2]))
dY_dC          = param[1]*ALOG(ABS(xx))
dY_dD          = zeros
;;  Define partial derivatives for return
pder           = [[dY_dA],[dY_dB],[dY_dC],[dY_dD]]
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN
END

;+
;*****************************************************************************************
;
;  PROCEDURE:   model_powerlaw_exponential.pro
;  PURPOSE  :   Creates a model , from user defined inputs, represented by:
;                 Y = A X^(B) e^(C X) + D
;
;  CALLED BY:   
;               wrapper_multi_func_fit.pro
;
;  CALLS:
;               NA
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               XX        :  [N]-Element array of independent variable values
;               PARAM     :  [4]-Element array containing the following initialization
;                               quantities for the model functions (see below):
;                                 PARAM[0] = A
;                                 PARAM[1] = B
;                                 PARAM[2] = C
;                                 PARAM[3] = D
;
;  OUTPUT:
;               FF        :  Set to a named variable to return an [N]-element array of
;                              values corresponding to the evaluated function
;               PDER      :  Set to a named variable to return an [N,4]-element array
;                              containing the partial derivatives of Y with respect to
;                              each element of PARAM.
;
;  EXAMPLES:    
;               NA
;
;  KEYWORDS:    
;               NA
;
;   CHANGED:  1)  NA [MM/DD/YYYY   v1.0.0]
;
;   NOTES:      
;               1)  Called when FIT_FUNC = 4
;
;  REFERENCES:  
;               
;
;   CREATED:  05/01/2014
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  05/01/2014   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

PRO model_powerlaw_exponential,xx,param,ff,pder

;;----------------------------------------------------------------------------------------
;;  Define some constants and dummy variables
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
IF (N_PARAMS() LT 2) THEN BEGIN
  ;;  no input???
  RETURN
ENDIF

np             = N_ELEMENTS(param)
IF (np LT 4) THEN BEGIN
  ;;  bad input???
  RETURN
ENDIF
;;----------------------------------------------------------------------------------------
;;  Calculate function
;;    Y = PARAM[0] * XX^(PARAM[1]) * EXP(PARAM[2] * XX) + PARAM[3]
;;----------------------------------------------------------------------------------------
ff             = param[0]*xx^(param[1])*EXP(param[2]*xx) + param[3]
;;----------------------------------------------------------------------------------------
;;  Calculate partial derivatives of Y = A X^(B) e^(C X) + D
;;    dY/dA = X^(B) e^(C X)
;;    dY/dB = A X^(B) e^(C X) Log_{e} |X|
;;    dY/dC = A X^(B+1) e^(C X)
;;    dY/dD = 1
;;----------------------------------------------------------------------------------------
nx             = N_ELEMENTS(xx)
zeros          = REPLICATE(0d0,nx)
ones           = REPLICATE(1d0,nx)
dY_dA          = xx^(param[1])*EXP(param[2]*xx)
dY_dB          = param[0]*xx^(param[1])*EXP(param[2]*xx)*ALOG(xx)
dY_dC          = param[0]*xx^(param[1] + 1d0)*EXP(param[2]*xx)
dY_dD          = ones
;;  Define partial derivatives for return
pder           = [[dY_dA],[dY_dB],[dY_dC],[dY_dD]]
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN
END

;+
;*****************************************************************************************
;
;  PROCEDURE:   model_exponential_1.pro
;  PURPOSE  :   Creates a model exponential, from user defined inputs, represented by:
;                 Y = A B^(X) + C
;
;  CALLED BY:   
;               wrapper_multi_func_fit.pro
;
;  CALLS:
;               NA
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               XX        :  [N]-Element array of independent variable values
;               PARAM     :  [4]-Element array containing the following initialization
;                               quantities for the model functions (see below):
;                                 PARAM[0] = A
;                                 PARAM[1] = B
;                                 PARAM[2] = C
;                                 PARAM[3] = D
;
;  OUTPUT:
;               FF        :  Set to a named variable to return an [N]-element array of
;                              values corresponding to the evaluated function
;               PDER      :  Set to a named variable to return an [N,4]-element array
;                              containing the partial derivatives of Y with respect to
;                              each element of PARAM.
;
;  EXAMPLES:    
;               NA
;
;  KEYWORDS:    
;               NA
;
;   CHANGED:  1)  NA [MM/DD/YYYY   v1.0.0]
;
;   NOTES:      
;               1)  Called when FIT_FUNC = 5
;               2)  See also:  IDL bulit-in COMFIT.PRO
;
;  REFERENCES:  
;               
;
;   CREATED:  05/01/2014
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  05/01/2014   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

PRO model_exponential_1,xx,param,ff,pder

;;----------------------------------------------------------------------------------------
;;  Define some constants and dummy variables
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
IF (N_PARAMS() LT 2) THEN BEGIN
  ;;  no input???
  RETURN
ENDIF

np             = N_ELEMENTS(param)
IF (np LT 4) THEN BEGIN
  ;;  bad input???
  RETURN
ENDIF
;;----------------------------------------------------------------------------------------
;;  Calculate function
;;    Y = PARAM[0] * PARAM[1]^(XX) + PARAM[2]
;;----------------------------------------------------------------------------------------
ff             = param[0]*param[1]^(xx) + param[2]
;;----------------------------------------------------------------------------------------
;;  Calculate partial derivatives of Y = A B^(X) + C
;;    dY/dA = B^(X)
;;    dY/dB = A X B^(X - 1)
;;    dY/dC = 1
;;    dY/dD = 0
;;----------------------------------------------------------------------------------------
nx             = N_ELEMENTS(xx)
zeros          = REPLICATE(0d0,nx)
ones           = REPLICATE(1d0,nx)
dY_dA          = param[1]^(xx)
dY_dB          = param[0]*xx*param[1]^(xx - 1d0)
dY_dC          = ones
dY_dD          = zeros
;;  Define partial derivatives for return
pder           = [[dY_dA],[dY_dB],[dY_dC],[dY_dD]]
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN
END

;+
;*****************************************************************************************
;
;  PROCEDURE:   model_exponential_2.pro
;  PURPOSE  :   Creates a model exponential, from user defined inputs, represented by:
;                 Y = A B^(C X) + D
;
;  CALLED BY:   
;               wrapper_multi_func_fit.pro
;
;  CALLS:
;               NA
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               XX        :  [N]-Element array of independent variable values
;               PARAM     :  [4]-Element array containing the following initialization
;                               quantities for the model functions (see below):
;                                 PARAM[0] = A
;                                 PARAM[1] = B
;                                 PARAM[2] = C
;                                 PARAM[3] = D
;
;  OUTPUT:
;               FF        :  Set to a named variable to return an [N]-element array of
;                              values corresponding to the evaluated function
;               PDER      :  Set to a named variable to return an [N,4]-element array
;                              containing the partial derivatives of Y with respect to
;                              each element of PARAM.
;
;  EXAMPLES:    
;               NA
;
;  KEYWORDS:    
;               NA
;
;   CHANGED:  1)  NA [MM/DD/YYYY   v1.0.0]
;
;   NOTES:      
;               1)  Called when FIT_FUNC = 6
;               2)  See also:  IDL bulit-in COMFIT.PRO
;
;  REFERENCES:  
;               
;
;   CREATED:  05/01/2014
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  05/01/2014   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

PRO model_exponential_2,xx,param,ff,pder

;;----------------------------------------------------------------------------------------
;;  Define some constants and dummy variables
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
IF (N_PARAMS() LT 2) THEN BEGIN
  ;;  no input???
  RETURN
ENDIF

np             = N_ELEMENTS(param)
IF (np LT 4) THEN BEGIN
  ;;  bad input???
  RETURN
ENDIF
;;----------------------------------------------------------------------------------------
;;  Calculate function
;;    Y = PARAM[0] * PARAM[1]^(PARAM[2] * XX) + PARAM[3]
;;----------------------------------------------------------------------------------------
ff             = param[0]*param[1]^(param[2]*xx) + param[3]
;;----------------------------------------------------------------------------------------
;;  Calculate partial derivatives of Y = A B^(C X) + D
;;    dY/dA = B^(C X)
;;    dY/dB = A C X B^(C X - 1)
;;    dY/dC = A B^(C X) X Log_{e} |B|
;;    dY/dD = 1
;;----------------------------------------------------------------------------------------
nx             = N_ELEMENTS(xx)
zeros          = REPLICATE(0d0,nx)
ones           = REPLICATE(1d0,nx)
dY_dA          = param[1]^(param[2]*xx)
dY_dB          = param[0]*param[2]*xx*param[1]^(param[2]*xx - 1d0)
dY_dC          = param[0]*param[1]^(param[2]*xx)*xx*ALOG(param[1])
dY_dD          = ones
;;  Define partial derivatives for return
pder           = [[dY_dA],[dY_dB],[dY_dC],[dY_dD]]
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN
END

;+
;*****************************************************************************************
;
;  PROCEDURE:   model_hyperbolic.pro
;  PURPOSE  :   Creates a model hyperbolic, from user defined inputs, represented by:
;                 Y = ( A + B X )^(-1)
;
;  CALLED BY:   
;               wrapper_multi_func_fit.pro
;
;  CALLS:
;               NA
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               XX        :  [N]-Element array of independent variable values
;               PARAM     :  [4]-Element array containing the following initialization
;                               quantities for the model functions (see below):
;                                 PARAM[0] = A
;                                 PARAM[1] = B
;                                 PARAM[2] = C
;                                 PARAM[3] = D
;
;  OUTPUT:
;               FF        :  Set to a named variable to return an [N]-element array of
;                              values corresponding to the evaluated function
;               PDER      :  Set to a named variable to return an [N,4]-element array
;                              containing the partial derivatives of Y with respect to
;                              each element of PARAM.
;
;  EXAMPLES:    
;               NA
;
;  KEYWORDS:    
;               NA
;
;   CHANGED:  1)  NA [MM/DD/YYYY   v1.0.0]
;
;   NOTES:      
;               1)  Called when FIT_FUNC = 7
;               2)  See also:  IDL bulit-in COMFIT.PRO
;
;  REFERENCES:  
;               
;
;   CREATED:  05/01/2014
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  05/01/2014   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

PRO model_hyperbolic,xx,param,ff,pder

;;----------------------------------------------------------------------------------------
;;  Define some constants and dummy variables
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
IF (N_PARAMS() LT 2) THEN BEGIN
  ;;  no input???
  RETURN
ENDIF

np             = N_ELEMENTS(param)
IF (np LT 4) THEN BEGIN
  ;;  bad input???
  RETURN
ENDIF
;;----------------------------------------------------------------------------------------
;;  Calculate function
;;    Y = 1/( PARAM[0] + PARAM[1] * XX )
;;----------------------------------------------------------------------------------------
ff             = 1d0/(param[0] + param[1]*xx)
;;----------------------------------------------------------------------------------------
;;  Calculate partial derivatives of Y = ( A + B X )^(-1)
;;    dY/dA = - ( A + B X )^(-2)
;;    dY/dB = - X ( A + B X )^(-2)
;;    dY/dC = 0
;;    dY/dD = 0
;;----------------------------------------------------------------------------------------
nx             = N_ELEMENTS(xx)
zeros          = REPLICATE(0d0,nx)
ones           = REPLICATE(1d0,nx)
dY_dA          = -1d0/(param[0] + param[1]*xx)^2
dY_dB          = -1d0*xx/(param[0] + param[1]*xx)^2
dY_dC          = zeros
dY_dD          = zeros
;;  Define partial derivatives for return
pder           = [[dY_dA],[dY_dB],[dY_dC],[dY_dD]]
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN
END

;+
;*****************************************************************************************
;
;  PROCEDURE:   model_logistic.pro
;  PURPOSE  :   Creates a model logistic, from user defined inputs, represented by:
;                 Y = ( A B^(X) + C )^(-1)
;
;  CALLED BY:   
;               wrapper_multi_func_fit.pro
;
;  CALLS:
;               NA
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               XX        :  [N]-Element array of independent variable values
;               PARAM     :  [4]-Element array containing the following initialization
;                               quantities for the model functions (see below):
;                                 PARAM[0] = A
;                                 PARAM[1] = B
;                                 PARAM[2] = C
;                                 PARAM[3] = D
;
;  OUTPUT:
;               FF        :  Set to a named variable to return an [N]-element array of
;                              values corresponding to the evaluated function
;               PDER      :  Set to a named variable to return an [N,4]-element array
;                              containing the partial derivatives of Y with respect to
;                              each element of PARAM.
;
;  EXAMPLES:    
;               NA
;
;  KEYWORDS:    
;               NA
;
;   CHANGED:  1)  NA [MM/DD/YYYY   v1.0.0]
;
;   NOTES:      
;               1)  Called when FIT_FUNC = 8
;               2)  See also:  IDL bulit-in COMFIT.PRO
;
;  REFERENCES:  
;               
;
;   CREATED:  05/01/2014
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  05/01/2014   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

PRO model_logistic,xx,param,ff,pder

;;----------------------------------------------------------------------------------------
;;  Define some constants and dummy variables
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
IF (N_PARAMS() LT 2) THEN BEGIN
  ;;  no input???
  RETURN
ENDIF

np             = N_ELEMENTS(param)
IF (np LT 4) THEN BEGIN
  ;;  bad input???
  RETURN
ENDIF
;;----------------------------------------------------------------------------------------
;;  Calculate function
;;    Y = 1/( PARAM[0] * PARAM[1]^(XX) + PARAM[2] )
;;----------------------------------------------------------------------------------------
ff             = 1d0/(param[0]*param[1]^(xx) + param[2])
;;----------------------------------------------------------------------------------------
;;  Calculate partial derivatives of Y = [ A B^(X) + C ]^(-1)
;;    dY/dA = - B^(X) [ A B^(X) + C ]^(-2)
;;    dY/dB = - A X B^(X - 1) [ A B^(X) + C ]^(-2)
;;    dY/dC = - [ A B^(X) + C ]^(-2)
;;    dY/dD = 0
;;----------------------------------------------------------------------------------------
nx             = N_ELEMENTS(xx)
zeros          = REPLICATE(0d0,nx)
ones           = REPLICATE(1d0,nx)
dY_dA          = -1d0*param[1]^(xx)/(param[0]*param[1]^(xx) + param[2])^2
dY_dB          = -1d0*param[0]*xx*param[1]^(xx - 1d0)/(param[0]*param[1]^(xx) + param[2])^2
dY_dC          = -1d0/(param[0]*param[1]^(xx) + param[2])^2
dY_dD          = zeros
;;  Define partial derivatives for return
pder           = [[dY_dA],[dY_dB],[dY_dC],[dY_dD]]
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN
END

;+
;*****************************************************************************************
;
;  PROCEDURE:   model_blackbody.pro
;  PURPOSE  :   Creates a model "black body," from user defined inputs, represented by:
;                 Y = A X^(B) ( e^(C X) + D )^(-1)
;
;  CALLED BY:   
;               wrapper_multi_func_fit.pro
;
;  CALLS:
;               NA
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               XX        :  [N]-Element array of independent variable values
;               PARAM     :  [4]-Element array containing the following initialization
;                               quantities for the model functions (see below):
;                                 PARAM[0] = A
;                                 PARAM[1] = B
;                                 PARAM[2] = C
;                                 PARAM[3] = D
;
;  OUTPUT:
;               FF        :  Set to a named variable to return an [N]-element array of
;                              values corresponding to the evaluated function
;               PDER      :  Set to a named variable to return an [N,4]-element array
;                              containing the partial derivatives of Y with respect to
;                              each element of PARAM.
;
;  EXAMPLES:    
;               NA
;
;  KEYWORDS:    
;               NA
;
;   CHANGED:  1)  NA [MM/DD/YYYY   v1.0.0]
;
;   NOTES:      
;               1)  Called when FIT_FUNC = 9
;
;  REFERENCES:  
;               
;
;   CREATED:  05/01/2014
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  05/01/2014   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

PRO model_blackbody,xx,param,ff,pder

;;----------------------------------------------------------------------------------------
;;  Define some constants and dummy variables
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
IF (N_PARAMS() LT 2) THEN BEGIN
  ;;  no input???
  RETURN
ENDIF

np             = N_ELEMENTS(param)
IF (np LT 4) THEN BEGIN
  ;;  bad input???
  RETURN
ENDIF
;;----------------------------------------------------------------------------------------
;;  Calculate function
;;    Y = PARAM[0] * XX^(PARAM[1])/( EXP(PARAM[2] * XX) + PARAM[3] )
;;----------------------------------------------------------------------------------------
denom          = (EXP(param[2]*xx) + param[3])
ff             = param[0]*xx^(param[1])/denom
;;----------------------------------------------------------------------------------------
;;  Calculate partial derivatives of Y = A X^(B) [ e^(C X) + D ]^(-1)
;;    dY/dA = X^(B) [ e^(C X) + D ]^(-1)
;;    dY/dB = A X^(B) [ e^(C X) + D ]^(-1) Log_{e} |X|   { = Y * Log_{e} |X| }
;;    dY/dC = - A e^(C X) X^(B + 1) [ e^(C X) + D ]^(-2)
;;    dY/dD = - A X^(B) [ e^(C X) + D ]^(-2)
;;----------------------------------------------------------------------------------------
nx             = N_ELEMENTS(xx)
zeros          = REPLICATE(0d0,nx)
ones           = REPLICATE(1d0,nx)
dY_dA          = xx^(param[1])/denom
dY_dB          = param[0]*xx^(param[1])*ALOG(xx)/denom
dY_dC          = -1d0*param[0]*xx^(param[1] + 1d0)*EXP(param[2]*xx)/denom^2
dY_dD          = -1d0*param[0]*xx^(param[1])/denom^2
;;  Define partial derivatives for return
pder           = [[dY_dA],[dY_dB],[dY_dC],[dY_dD]]
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN
END

;+
;*****************************************************************************************
;
;  PROCEDURE:   model_logsquare.pro
;  PURPOSE  :   Creates a model log-square, from user defined inputs, represented by:
;                 Y = A + B Log_{10} |X| + C (Log_{10} |X|)^2
;
;  CALLED BY:   
;               wrapper_multi_func_fit.pro
;
;  CALLS:
;               NA
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               XX        :  [N]-Element array of independent variable values
;               PARAM     :  [4]-Element array containing the following initialization
;                               quantities for the model functions (see below):
;                                 PARAM[0] = A
;                                 PARAM[1] = B
;                                 PARAM[2] = C
;                                 PARAM[3] = D
;
;  OUTPUT:
;               FF        :  Set to a named variable to return an [N]-element array of
;                              values corresponding to the evaluated function
;               PDER      :  Set to a named variable to return an [N,4]-element array
;                              containing the partial derivatives of Y with respect to
;                              each element of PARAM.
;
;  EXAMPLES:    
;               NA
;
;  KEYWORDS:    
;               NA
;
;   CHANGED:  1)  NA [MM/DD/YYYY   v1.0.0]
;
;   NOTES:      
;               1)  Called when FIT_FUNC = 10
;               2)  See also:  IDL bulit-in COMFIT.PRO
;
;  REFERENCES:  
;               
;
;   CREATED:  05/01/2014
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  05/01/2014   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

PRO model_logsquare,xx,param,ff,pder

;;----------------------------------------------------------------------------------------
;;  Define some constants and dummy variables
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
IF (N_PARAMS() LT 2) THEN BEGIN
  ;;  no input???
  RETURN
ENDIF

np             = N_ELEMENTS(param)
IF (np LT 4) THEN BEGIN
  ;;  bad input???
  RETURN
ENDIF
;;----------------------------------------------------------------------------------------
;;  Calculate function
;;    Y = PARAM[0] + PARAM[1] * ALOG10(XX) + PARAM[2] * ALOG10(XX)^2
;;----------------------------------------------------------------------------------------
ff             = param[0] + param[1]*ALOG10(xx) + param[2]*ALOG10(XX)^2
;;----------------------------------------------------------------------------------------
;;  Calculate partial derivatives of Y = A + B Log_{10} |X| + C (Log_{10} |X|)^2
;;    dY/dA = 1
;;    dY/dB = Log_{10} |X|
;;    dY/dC = (Log_{10} |X|)^2
;;    dY/dD = 0
;;----------------------------------------------------------------------------------------
nx             = N_ELEMENTS(xx)
zeros          = REPLICATE(0d0,nx)
ones           = REPLICATE(1d0,nx)
dY_dA          = ones
dY_dB          = ALOG10(xx)
dY_dC          = ALOG10(xx)^2
dY_dD          = zeros
;;  Define partial derivatives for return
pder           = [[dY_dA],[dY_dB],[dY_dC],[dY_dD]]
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN
END

;+
;*****************************************************************************************
;
;  FUNCTION :   wrapper_multi_func_fit.pro
;  PURPOSE  :   This is a wrapping routine for CURVEFIT.PRO that utilizes a series
;                 of predefined functions and associated partial derivatives.
;
;  CALLED BY:   
;               NA
;
;  CALLS:
;               
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               XX        :  [N]-Element array of independent variable values or
;                              abscissa for F [e.g., X_j in F(X_j)]
;               YY        :  [N]-Element array of dependent variable values
;               PARAM     :  [4]-Element array containing the following initialization
;                              quantities for the model functions (see below):
;                                PARAM[0] = A
;                                PARAM[1] = B
;                                PARAM[2] = C
;                                PARAM[3] = D
;
;  EXAMPLES:    
;               
;
;  KEYWORDS:    
;               FIT_FUNC  :  Scalar [integer] specifying the type of function to use
;                              [Default  :  1]
;                              1  :  Y = A X^(B) + C
;                              2  :  Y = A e^(B X) + C
;                              3  :  Y = A + B Log_{e} |X^C|
;                              4  :  Y = A X^(B) e^(C X) + D
;                              5  :  Y = A B^(X) + C
;                              6  :  Y = A B^(C X) + D
;                              7  :  Y = ( A + B X )^(-1)
;                              8  :  Y = ( A B^(X) + C )^(-1)
;                              9  :  Y = A X^(B) ( e^(C X) + D )^(-1)
;                             10  :  Y = A + B Log_{10} |X| + C (Log_{10} |X|)^2
;               FIXED_P   :  [4]-Element array containing zeros for each element of
;                              PARAM the user does NOT wish to vary (i.e., if FIXED_P[0]
;                              is = 0, then PARAM[0] will not change when calling
;                              CURVEFIT.PRO).
;                              [Default  :  All elements = 1]
;               ERROR     :  [N]-Element array of standard errors for the input
;                              values, YY <--> "measured" 1-sigma uncertainties
;                              [Default = 1% of YY]
;               WEIGHTS   :  [N]-Element array of weights to be used in calculating the
;                              chi-squared value.  Example inputs include:
;                                1/ERROR^2  -->  Normal weighting
;                                                  (i.e., ERROR is measurement error)
;                                1/ERROR    -->  Poisson weighting
;                                                  (i.e., counting statistics)
;                                1          -->  Unweighted
;                              [Default  :  1/ERROR^2]
;               ITMAX     :  Scalar [long] defining the maximum number of iterations that
;                              CURVEFIT.PRO will perform before quitting.
;                              [Default  :  20]
;               CTOL      :  Scalar [float/double] defining the desired convergence
;                              tolerance. The routine returns when the relative
;                              decrease in chi-squared is less than CTOL in one
;                              iteration.
;                              [Default  :  1e-3]
;
;   CHANGED:  1)  NA [MM/DD/YYYY   v1.0.0]
;
;   NOTES:      
;               1)  In the functions defined for the keyword FIT_FUNC, spaces imply
;                     multiplication and Log_{Uo} = base-Uo logarithm.
;
;  REFERENCES:  
;               
;
;   CREATED:  05/01/2014
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  05/01/2014   v1.0.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

FUNCTION wrapper_multi_func_fit,x,y,param,FIT_FUNC=fit_func,FIXED_P=fixed_p,$
                                ERROR=error,WEIGHTS=weights,ITMAX=itmax,    $
                                CTOL=ctol

;;----------------------------------------------------------------------------------------
;;  Define some constants and dummy variables
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
struc          = 0
dumb0          = d
dumb4          = REPLICATE(d,4)
dumb10         = REPLICATE(d,10)
tags           = ['YFIT','FIT_RESULTS','SIG_PARAM','CHISQ','N_ITER','STATUS','YERROR','FUNC']
struc          = CREATE_STRUCT(tags,dumb10,dumb4,dumb4,dumb0,-1,-1,dumb0,'')
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
test           = (N_PARAMS() LT 3)
IF (test[0]) THEN BEGIN
  ;;  no input???
  MESSAGE,'Incorrect # of inputs',/INFORMATIONAL,/CONTINUE
  RETURN,0
ENDIF

np             = N_ELEMENTS(param)
test           = (np[0] LT 4)
IF (test[0]) THEN BEGIN
  ;;  bad input???
  MESSAGE,'Incorrect input format:  PARAM',/INFORMATIONAL,/CONTINUE
  RETURN,0
ENDIF

test           = (N_ELEMENTS(x) NE N_ELEMENTS(y))
IF (test[0]) THEN BEGIN
  ;;  bad input format???
  MESSAGE,'Incorrect input format:  XX and/or YY',/INFORMATIONAL,/CONTINUE
  RETURN,0
ENDIF
;;----------------------------------------------------------------------------------------
;;  Define new parameters
;;----------------------------------------------------------------------------------------
xx             = REFORM(x)
yy             = REFORM(y)
pp             = REFORM(param)
nx             = N_ELEMENTS(x)
;;----------------------------------------------------------------------------------------
;;  Determine fit function
;;----------------------------------------------------------------------------------------
;;  Check FIT_FUNC
test           = (N_ELEMENTS(fit_func) EQ 0)
IF (test) THEN fitf = 1 ELSE fitf = FIX(fit_func[0]) > 1

CASE fitf[0] OF
  1    : BEGIN
    ;;  Y = A X^(B) + C
    func = 'model_powerlaw'
  END
  2    : BEGIN
    ;;  Y = A e^(B X) + C
    func = 'model_exponential_0'
  END
  3    : BEGIN
    ;;  Y = A + B Log_{e} |X^C|
    func = 'model_loglin_powerlaw'
  END
  4    : BEGIN
    ;;  Y = A X^(B) e^(C X) + D
    func = 'model_powerlaw_exponential'
  END
  5    : BEGIN
    ;;  Y = A B^(X) + C
    func = 'model_exponential_1'
  END
  6    : BEGIN
    ;;  Y = A B^(C X) + D
    func = 'model_exponential_2'
  END
  7    : BEGIN
    ;;  Y = ( A + B X )^(-1)
    func = 'model_hyperbolic'
  END
  8    : BEGIN
    ;;  Y = ( A B^(X) + C )^(-1)
    func = 'model_logistic'
  END
  9    : BEGIN
    ;;  Y = A X^(B) ( e^(C X) + D )^(-1)
    func = 'model_blackbody'
  END
  10   : BEGIN
    ;;  Y = A + B Log_{10} |X| + C (Log_{10} |X|)^2
    func = 'model_logsquare'
  END
  ELSE : BEGIN
    ;;  Use default:  Y = A X^(B) + C
    func = 'model_powerlaw'
  END
ENDCASE
;;----------------------------------------------------------------------------------------
;;  Check keywords
;;----------------------------------------------------------------------------------------
;;  Check FIXED_P
test           = (N_ELEMENTS(fixed_p) NE 4)
IF (test) THEN fitp = REPLICATE(1,4) ELSE fitp = REFORM(fixed_p)
;;  Check ERROR
test           = (N_ELEMENTS(error) NE 1) AND (N_ELEMENTS(error) NE nx)
IF (test) THEN yerr = 1d-2*yy ELSE yerr = REFORM(error)
IF (N_ELEMENTS(yerr) EQ 1) THEN yerr = REPLICATE(yerr[0],nx)
;;  Check WEIGHTS
test           = (N_ELEMENTS(weights) NE 1) AND (N_ELEMENTS(weights) NE nx)
IF (test) THEN wghts = 1d0/yerr^2 ELSE wghts = REFORM(weights)
IF (N_ELEMENTS(wghts) EQ 1) THEN wghts = REPLICATE(wghts[0],nx)
;;----------------------------------------------------------------------------------------
;;  Calculate Fit
;;----------------------------------------------------------------------------------------
fit_params     = CURVEFIT(xx,yy,wghts,pp,sig_p,CHISQ=chisq,FITA=fitp,FUNCTION_NAME=func[0],$
                          ITER=niter,ITMAX=itmax,STATUS=status,TOL=ctol,YERROR=yerrors)

;;  Check status of computation and define return structure
tags           = ['YFIT','FIT_RESULTS','SIG_PARAM','CHISQ','N_ITER','STATUS','YERROR','FUNC']
test           = (status[0] EQ 0)
IF (test[0]) THEN BEGIN
  ;;  Success!
  struc = CREATE_STRUCT(tags,fit_params,pp,sig_p,chisq[0],niter[0],status[0],yerrors,func[0])
ENDIF ELSE BEGIN
  ;;  Failed!
  test = (status[0] EQ 2)
  IF (test[0]) THEN BEGIN
    ;;  Failed to converge in ITMAX
    MESSAGE,'Failed:  Failed to converge in ITMAX',/INFORMATIONAL,/CONTINUE
    struc = CREATE_STRUCT(tags,fit_params,pp,sig_p,chisq[0],niter[0],status[0],yerrors,func[0])
  ENDIF ELSE BEGIN
    ;;  CHISQ was increasing without bounds
    ;;    --> return a zero instead of a structure
    MESSAGE,'Failed:  CHISQ was increasing without bounds',/INFORMATIONAL,/CONTINUE
    struc = CREATE_STRUCT(tags,fit_params,pp,sig_p,chisq[0],niter[0],status[0],yerrors,func[0])
;    struc = 0
  ENDELSE
ENDELSE
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN,struc
END

