;+
;*****************************************************************************************
;
;  PROCEDURE:   wavelet_to_tplot.pro
;  PURPOSE  :   This is a small wrapping program for the program wavelet.pro written
;                 by Dr. Christopher Torrence and Dr. Gilbert P. Compo.  The citation
;                 information is shown below.  The program takes a time array and
;                 data array, performs a wavelet transform on them, then sends the
;                 power spectrum to TPLOT for analysis.
;
;  CALLED BY:   
;               NA
;
;  INCLUDES:
;               NA
;
;  CALLS:
;               sample_rate.pro
;               is_a_number.pro
;               wavelet.pro
;               tnames.pro
;               wave_signif.pro
;               store_data.pro
;               options.pro
;
;  REQUIRES:    
;               1)  Software produced by Dr. Christopher Torrence and Dr. Gilbert P. Compo
;               2)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               TT           :  [N]-Element [float/double] array of Unix times
;               DD           :  [N]-Element [float/double] array of data points for
;                                 which to apply the transform
;
;  EXAMPLES:    
;               nscet = '1998/08/26 06:40:26.120 UT'
;               ntime = STRMID(nscet,0,4)+'-'+STRMID(nscet,5,2)+'-'+STRMID(nscet,8,2)+ $
;                       '_'+STRMID(nscet,11,2)+STRMID(nscet,14,2)
;               utx   = REFORM(tds_unx[j,*])            ;;  Unix time
;               bperp = REFORM(rot_shn_bfields[*,j,0])  ;;  Perp. B-field
;               store_data,'Bperp_'+ntime+'_FIXED',DATA={X:utx,Y:bperp}
;               nname = 'Bperp_'+ntime+'_wavelet'
;               wavelet_to_tplot,utx,bperp1,NEW_NAME=nname,/KILL_CONE
;               options,'Bperp_'+ntime,'YTITLE','B!D'+'!9x!3'+'!N (nT)'
;               options,'Bperp_'+ntime,'COLORS',50
;               options,nname,'YRANGE',[2e0,1e3]        ;;  2.0 to 1000 Hz
;               options,nname,'ZRANGE',[1e-1,1e3]
;               mxbf = MAX(ABS(rot_shn_bfields[*,j,*]),/NAN)
;               ;;  Make component plot have symmetric Y-Axis range about zero
;               options,'Bperp_'+ntime,'YRANGE',[-1e0*mxbf,mxbf]*1.05
;               ;;  Fix all TPLOT variables to match output from this PRO
;               nnw = tnames()
;               options,nnw,"YSTYLE",1
;               options,nnw,"PANEL_SIZE",2.
;               options,nnw,'XMINOR',5
;               options,nnw,'XTICKLEN',0.04
;
;  KEYWORDS:    
;               ORDER        :  Scalar [integer] defining the order # (e.g., base wave
;                                 number for Morlet) of the wavelet mother basis.
;                                 {Allowed values for Morlet = 3, 24, or 6}
;                                 [Default = 6 for Morlet and forced to 4(Paul) 2(DOG)]
;               DSCALE       :  Scalar [float] defining the value (logarithmic units)
;                                 for the spacing between scale values
;                                 [Default = 0.125]
;               NSCALE       :  Scalar [float] defining the total # of scales to use in
;                                 in constructing the wavelet
;                                 [Default = (ALOG10(N/2)/ALOG10(2))/DSCALE + 1]
;               START_SCALE  :  Scalar [float] defining the starting scale for the
;                                 spacing used in constructing the wavelet scales.  This
;                                 is also the smallest scale of the wavelet.
;                                 [Default = 2*sample_period]
;               NEW_NAME     :  Scalar [string] defining the new TPLOT handle to use for
;                                 wavelet power spectrum
;                                 [Default = 'wavelet_power_spec']
;               KILL_CONE    :  If set, program kills all data outside of the cone of
;                                 influence determined by wavelet.pro
;               SIGNIF       :  Set to a named variable to output significance 
;                                 levels as a function of PERIOD
;               PERIOD       :  Set to a named variable to output the vector of 
;                                 "Fourier" periods (in time units) that corresponds
;                                 to the SCALEs.
;               FFT_THEOR    :  Set to a named variable to output theoretical 
;                                 background spectrum (smoothed by the wavelet function),
;                                 as a function of PERIOD.
;               MOTHER       :  Scalar [string] defining the mother wavelet basis
;                                 function to use.  Possible functions include:
;                                 'Morlet','Paul', or 'DOG' (derivative of Gaussian)
;                                 [Default = 'Morlet'.]
;               SCALES       :  Set to a named variable to return the wavelet scales
;               CONE         :  Set to a named variable to return the cone of influence
;                                 array
;               CONF_95LEV   :  Set to a named variable to return the 95% confidence
;                                 confidence level to test the significance of the data
;
;   CHANGED:  1)  Added Z-Axis tick label options
;                                                                   [08/13/2009   v1.0.1]
;             2)  Updated man page
;                                                                   [09/10/2009   v1.0.2]
;             3)  Corrected frequency calculation to account for the non-equivalent
;                   relationship between Fourier periods and wavelet periods
;                   and added keywords:  SIGNIF, PERIOD, FFT_THEOR, and MOTHER
;                                                                   [09/11/2009   v1.0.3]
;             4)  Changed handling of the ORDER keyword
;                   and added keywords:  SCALES and CONE
;                                                                   [09/11/2009   v1.0.4]
;             5)  Added keyword:  CONF_95LEV
;                   and now program sends COI and 95% CL to TPLOT
;                                                                   [09/13/2009   v1.0.5]
;             6)  Changed some minor syntax [no functionality changes]
;                                                                   [10/01/2009   v1.0.6]
;             7)  Changed program called when using a Morlet wavelet to wavelet2d.pro
;                   for faster calculations
;                                                                   [12/07/2009   v1.1.0]
;             8)  When arrays get too large, the 2D vectorized method runs into issues
;                   with memory, so it will not be used
;                                                                   [12/08/2009   v1.1.1]
;             9)  Now routine returns physical units [e.g. units^2/Hz]
;                                                                   [05/05/2011   v1.1.2]
;            10)  Changed when program normalizes by N to avoid issues with significance
;                   level calculations
;                                                                   [05/11/2011   v1.1.3]
;            11)  Fixed conversion to physical units [e.g. units^2/Hz]
;                                                                   [06/28/2011   v1.1.4]
;            12)  Fixed conversion to physical units [e.g. units^2/Hz]
;                                                                   [06/29/2011   v1.1.5]
;            13)  Updated Man. page, cleaned up routine, and updated TPLOT options, and
;                   now calls is_a_number.pro, sample_rate.pro
;                                                                   [10/22/2015   v1.2.0]
;
;   NOTES:      
;             1)  It's probably wise to set the KILL_CONE to avoid analysis based upon
;                   artificial data.
;             2)  Note that the input time must be in Unix times but the array of data
;                   can be in any units one wishes
;             3)  Anything over 40,000 points will take a while on most machines so be
;                   patient...
;                    _________________________________________________________________
;                   |Note:  For a Morlet wavelet, scales = 1.03 T, where T = Fourier  |
;                   |        period.                                                  |
;                   |_________________________________________________________________|
;
;  REFERENCES:  
;=========================================================================================
; Copyright (C) 1995-1998, Christopher Torrence and Gilbert P. Compo,
; University of Colorado, Program in Atmospheric and Oceanic Sciences.
; This software may be used, copied, or redistributed as long as it is not
; sold and this copyright notice is reproduced on each copy made.  This
; routine is provided as is without any express or implied warranties whatsoever.
;
; Notice: Please acknowledge the use of the above software in any publications:
;    ``Wavelet software was provided by C. Torrence and G. Compo,
;      and is available at URL: http://paos.colorado.edu/research/wavelets/''.
;
; Reference: Torrence, C. and G. P. Compo, 1998: A Practical Guide to
;            Wavelet Analysis. <I>Bull. Amer. Meteor. Soc.</I>, 79, 61-78.
;
; Please send a copy of such publications to either C. Torrence or G. Compo:
;  Dr. Christopher Torrence               Dr. Gilbert P. Compo
;  Advanced Study Program                 NOAA/CIRES Climate Diagnostics Center
;  National Center for Atmos. Research    Campus Box 216
;  P.O. Box 3000                          University of Colorado
;  Boulder CO 80307--3000, USA.           Boulder CO 80309-0216, USA.
;  E-mail: torrence@ucar.edu              E-mail: gpc@cdc.noaa.gov
;=========================================================================================
;
;   CREATED:  08/12/2009
;   CREATED BY:  Lynn B. Wilson III
;    LAST MODIFIED:  10/22/2015   v1.2.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

PRO wavelet_to_tplot,tt,dd,ORDER=order,DSCALE=dscale,NSCALE=nscale,START_SCALE=sscale,$
                           NEW_NAME=new_name,KILL_CONE=kill_cone,SIGNIF=signif,       $
                           PERIOD=period,FFT_THEOR=fft_theor,MOTHER=mother,           $
                           SCALES=scales,CONE=cone,CONF_95LEV=conf_95lev

;;----------------------------------------------------------------------------------------
;;  Create Dummy Variables
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
;;----------------------------------------------------------------------------------------
;;  Define sample rate and period
;;----------------------------------------------------------------------------------------
nsams          = N_ELEMENTS(REFORM(tt))
times          = REFORM(tt)
data           = REFORM(dd)

;event_length   = MAX(times,/NAN) - MIN(times,/NAN)       ;;  Total event time (s)
;sample_rate    = (nsams - 1L)/event_length               ;;  Sample Rate (samples/s)
;sample_period  = 1d0/sample_rate                         ;;  Sample Period (s)
;freq_bins      = DINDGEN(nsams/2L)*(sample_rate/(nsams - 1L))

;;  Determine sample rate [samples per unit time]
s_rate         = sample_rate(time,GAP_THRESH=1d0,/AVE,OUT_MED_AVG=sr_medavg)
s_period       = 1d0/s_rate[0]                           ;;  Sample Period [unit time]
;;  Define dummy array of frequencies for optional Y-Axis range later
freq_bins      = DINDGEN(nsams[0]/2L)*(s_rate[0]/(nsams[0] - 1L))
gfreq          = WHERE(freq_bins GT 0,gfr)
freq_bins      = freq_bins[gfreq]
;;----------------------------------------------------------------------------------------
;;  Check keywords
;;----------------------------------------------------------------------------------------
;;  Check DSCALE
test           = (N_ELEMENTS(dscale) LT 1) OR (is_a_number(dscale,/NOMSSG) EQ 0)
IF (test[0]) THEN dd0 = 0.125 ELSE dd0 = dscale[0]
;;  Check START_SCALE
test           = (N_ELEMENTS(sscale) LT 1) OR (is_a_number(sscale,/NOMSSG) EQ 0)
IF (test[0]) THEN ss0 = 2*s_period[0] ELSE ss0 = sscale[0]
;;  Check NSCALE
test           = (N_ELEMENTS(nscale) LT 1) OR (is_a_number(nscale,/NOMSSG) EQ 0)
IF (test[0]) THEN jscale = (ALOG10(nsams[0]/2)/ALOG10(2))/dd0[0] ELSE jscale = nscale[0] - 1L
;;  Check MOTHER
test           = (N_ELEMENTS(mother) LT 1) OR (SIZE(mother,/TYPE) NE 7)
IF (test[0]) THEN mother = 'Morlet'
;;  Check NEW_NAME
test           = (N_ELEMENTS(new_name) LT 1) OR (SIZE(new_name,/TYPE) NE 7)
IF (test[0]) THEN new_name = 'wavelet_power_spec'
;;  Check ORDER
test           = (N_ELEMENTS(order) LT 1) OR (is_a_number(order,/NOMSSG) EQ 0)
IF (test[0]) THEN order_off = 1b ELSE order_off = 0b
;;----------------------------------------------------------------------------------------
;;  Define optional parameters
;;----------------------------------------------------------------------------------------
;IF NOT KEYWORD_SET(dscale) THEN dd0 = 0.125 ELSE dd0 = dscale[0]
;IF NOT KEYWORD_SET(sscale) THEN ss0 = 2*sample_period ELSE ss0 = sscale[0]
;IF KEYWORD_SET(nscale) THEN BEGIN
;  jscale = nscale[0] - 1L
;ENDIF ELSE BEGIN
;  jscale = (ALOG10(nsams/2)/ ALOG10(2))/dd0
;ENDELSE

;;  Determine mother wavelet function to use
;IF NOT KEYWORD_SET(mother) THEN mother = 'Morlet'
CASE STRLOWCASE(mother) OF
  'morlet' : BEGIN
    mother  = 'Morlet'
    wavefun = 'wavelet'
    IF (order_off[0]) THEN order = 6
;    IF NOT KEYWORD_SET(order) THEN order = 6
    CASE order[0] OF
      6    : kk0 = 6
      24   : kk0 = 24
      3    : kk0 = 3
      ELSE : kk0 = 6    ;;  Default for Morlet
    ENDCASE
  END
  'paul'   : BEGIN
    mother  = 'Paul'
    IF (order_off[0]) THEN kk0 = 4 ELSE kk0 = FIX(order[0])
;    kk0     = 4
    wavefun = 'wavelet'
  END
  'dog'    : BEGIN
    mother  = 'DOG'
    IF (order_off[0]) THEN kk0 = 2 ELSE kk0 = FIX(order[0])
;    kk0     = 2
    wavefun = 'wavelet'
  END
  ELSE     : BEGIN
    ;;  Use default values
    mother  = 'Morlet'
    kk0     = 6
    wavefun = 'wavelet'
  END
ENDCASE
;;----------------------------------------------------------------------------------------
;;  Calculate Morlet wavelet
;;----------------------------------------------------------------------------------------
;test_wavelet   = CALL_FUNCTION(wavefun,data,sample_period,S0=ss0,DJ=dd0,J=jscale,/PAD, $
;                               PERIOD=period,SCALE=scales,PARAM=kk0,MOTHER=mother,     $
;                               COI=cone,SIGNIF=signif,FFT_THEOR=fft_theor)
test_wavelet   = CALL_FUNCTION(wavefun,data,s_period[0],S0=ss0,DJ=dd0,J=jscale,/PAD, $
                               PERIOD=period,SCALE=scales,PARAM=kk0,MOTHER=mother,     $
                               COI=cone,SIGNIF=signif,FFT_THEOR=fft_theor)
;;----------------------------------------------------------------------------------------
;;  Calculate wavelet power spectrum
;;----------------------------------------------------------------------------------------
;IF NOT KEYWORD_SET(new_name) THEN new_name = 'wavelet_power_spec'
wv_power       = ABS(test_wavelet)^2      ;;  wavelet power spectrum [Eq. 4 squared]
wv_freqs       = REPLICATE(1d0,nsams) # 1d0/period
;;  Check if NEW_NAME is already a defined TPLOT handle
testns         = tnames()
badns          = WHERE(testns EQ new_name,bdn)
IF (bdn GT 0) THEN bad = 1 ELSE bad = 0
jj             = 0L
WHILE(bad) DO BEGIN
  jstr = STRTRIM(STRING(FORMAT='(I)',jj),2)
  IF (bdn GT 0) THEN new_name += '_'+jstr
  badns  = WHERE(testns EQ new_name,bdn)
  IF (bdn GT 0) THEN bad = 1 ELSE bad = 0
  IF (bad) THEN jj += 1L
ENDWHILE
;;  Define frequency range [i.e., vertical axis range]
gcone          = WHERE(cone GT 0d0,gco)
IF (gco GT 0) THEN BEGIN
  gfrqs = 1d0/cone[gcone]
  ylow  = MIN(gfrqs,/NAN)
;  yra   = [MIN(gfrqs,/NAN),sample_rate/2d0]
ENDIF ELSE BEGIN
  ylow  = MIN(freq_bins,/NAN)
;  yra   = [MIN(freq_bins,/NAN),sample_rate/2d0]
ENDELSE
yra            = [ylow[0],s_rate[0]/2d0]
;;----------------------------------------------------------------------------------------
;;  Decide whether to eliminate data below cone of influence (COI keyword)
;;----------------------------------------------------------------------------------------
IF KEYWORD_SET(kill_cone) THEN BEGIN
  gcone = WHERE(cone GT 0d0,gco)
  IF (gco GT 0) THEN BEGIN
    gfrqs         = 1d0/cone[gcone]
    tempfqs       = 1d0/scales[gcone]
    temp_dat      = wv_power
    x             = [0,nsams - 1L]
    temp_dat[x,*] = d
    j_00          = gcone[0]      ;;  offset element
    FOR j=0L, gco - 1L DO BEGIN
      bad_coi = WHERE(tempfqs LT gfrqs[j],bd_c)
      IF (bd_c GT 0) THEN BEGIN
        kk                   = j_00 + j
        temp_dat[kk,bad_coi] = d
      ENDIF
    ENDFOR
    wv_power = temp_dat
  ENDIF
ENDIF
;;----------------------------------------------------------------------------------------
;;  Calculate wavelet chi-squared test for 95% confidence levels
;;----------------------------------------------------------------------------------------
num_scl        = N_ELEMENTS(scales)
chitest        = wave_signif(data,s_period[0],scales,0)         ;;  Chi-Squared Test
;chitest        = wave_signif(data,sample_period,scales,0)         ;;  Chi-Squared Test
siglevl        = REBIN(TRANSPOSE(chitest),nsams,num_scl)
conf_95lev     = wv_power/siglevl
;;  Normalize wavelet power spectrum to get physical units [units^2/Hz]
wv_power      *= (2d0/(SQRT(!DPI)*s_rate[0]))
;wv_power      *= (2d0/(SQRT(!DPI)*sample_rate[0]))
;;----------------------------------------------------------------------------------------
;;  Send to TPLOT
;;----------------------------------------------------------------------------------------
;;  --> Wavelet transform
yttl           = 'Frequency (Hz)'
zttl           = 'Wavelet Power'
zticks         = 3L
def_dlim       = {YLOG:1,ZLOG:1,YRANGE:yra,YTITLE:yttl,ZTITLE:zttl,ZTICKS:zticks}
def__lim       = {YSTYLE:1,PANEL_SIZE:2,XMINOR:5,XTICKLEN:0.04,ZSTYLE:1}
store_data,new_name[0],DATA={X:times,Y:wv_power,V:wv_freqs,SPEC:1},DLIMIT=def_dlim,LIMIT=def__lim
;;  --> 95% confidence levels
op_names       = new_name[0]+'_Conf_Level_95'
store_data,op_names[0],DATA={X:times,Y:conf_95lev,V:1d0/period,SPEC:1}
options,op_names[0],LEVEL=1.0,C_ANNOTATION='95%',ZRANGE=[5e-1,1e0],$
                    YTITLE='95% Confidence Level'+'!C'+'(anything > 1.0)',/DEF
;;  --> Cone of Influence
store_data,new_name[0]+'_Cone_of_Influence',DATA={X:times,Y:1d0/cone}
op_names       = [new_name[0]+'_Conf_Level_95',new_name[0]+'_Cone_of_Influence']
options,op_names,YLOG=1,YRANGE=yra,/DEF
;;  Set default plot options
nnw            = tnames([new_name,op_names])
options,nnw,YSTYLE=1,PANEL_SIZE=2.0,XMINOR=5,XTICKLEN=0.04
;lim1           = {YLOG:1,ZLOG:1,YSTYLE:1,PANEL_SIZE:2,XMINOR:5,XTICKLEN:0.04,YRANGE:yra,$
;                  YTITLE:yttl,ZTITLE:zttl,ZTICKS:zticks,ZSTYLE:1}
;store_data,new_name,DATA={X:times,Y:wv_power,V:wv_freqs,SPEC:1},LIMIT=lim1
;op_names       = new_name+'_Conf_Level_95'
;store_data,op_names,DATA={X:times,Y:conf_95lev,V:1d0/period,SPEC:1}
;options,op_names,'LEVEL',1.0
;options,op_names,'C_ANNOTATION','95%'
;options,op_names,'ZRANGE',[5e-1,1e0]
;options,op_names,'YTITLE','95% Confidence Level'+'!C'+'(anything > 1.0)'
;store_data,new_name+'_Cone_of_Influence',DATA={X:times,Y:1d0/cone}
;op_names       = [new_name+'_Conf_Level_95',new_name+'_Cone_of_Influence']
;options,op_names,'YLOG',1
;options,op_names,'YRANGE',yra
;nnw            = tnames([new_name,op_names])
;options,nnw,"YSTYLE",1
;options,nnw,"PANEL_SIZE",2.
;options,nnw,'XMINOR',5
;options,nnw,'XTICKLEN',0.04
;;----------------------------------------------------------------------------------------
;;  Return to user
;;----------------------------------------------------------------------------------------

RETURN
END