;-----------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------
; => From THEMIS prompt
;-----------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------

;-----------------------------------------------------------------------------------------
; => Constants
;-----------------------------------------------------------------------------------------
f      = !VALUES.F_NAN
d      = !VALUES.D_NAN
epo    = 8.854187817d-12   ; => Permittivity of free space (F/m)
muo    = 4d0*!DPI*1d-7     ; => Permeability of free space (N/A^2 or H/m)
me     = 9.10938291d-31    ; => Electron mass (kg) [2010 value]
mp     = 1.672621777d-27   ; => Proton mass (kg) [2010 value]
ma     = 6.64465675d-27    ; => Alpha-Particle mass (kg) [2010 value]
qq     = 1.602176565d-19   ; => Fundamental charge (C) [2010 value]
kB     = 1.3806488d-23     ; => Boltzmann Constant (J/K) [2010 value]
K_eV   = 1.1604519d4       ; => Factor [Kelvin/eV] [2010 value]
c      = 2.99792458d8      ; => Speed of light in vacuum (m/s)
R_E    = 6.37814d3         ; => Earth's Equitorial Radius (km)

;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
; => Change these paths accordingly (this is what is found in comp_lynn_pros.pro)
;     1)  These routines depend upon the user putting the /wind_3dp_pros directory in
;           their working IDL directory
;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/kill_data_tr.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/kill_data_tr.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/array_where.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/array_where.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/sample_rate.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/sample_rate.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/TPLOT_PRO/time_bar.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/TPLOT_PRO/time_bar.pro

.compile /Users/lbwilson/Desktop/idllibs/codemgr/libs/utility/difference.pro
.compile /Users/lbwilson/Desktop/idllibs/codemgr/libs/utility/findpath.pro
.compile /Users/lbwilson/Desktop/idllibs/codemgr/libs/utility/findsource.pro
.compile /Users/lbwilson/Desktop/idllibs/codemgr/libs/utility/read_wholefile.pro
.compile /Users/lbwilson/Desktop/idllibs/codemgr/libs/utility/man.pro

.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/my_str_date.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/my_time_string.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/file_name_times.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/time_range_define.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/read_gen_ascii.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/read_gen_ascii.pro

.compile /Users/lbwilson/Desktop/swidl-0.1/IDL_stuff/themis_pros/wave_polarization.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/IDL_stuff/themis_pros/wavpol_to_tplot.pro

.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/my_crossp_2.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/my_crossp_2.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/my_dot_prod.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/my_dot_prod.pro

.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/rh_pros/vshn_calc.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/rh_pros/vec_norm.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/rh_pros/vec_trans.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/rh_pros/vec_cross.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/rh_pros/rh_resize.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/rh_pros/del_vsn.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/rh_pros/rh_eq_gen.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/rh_pros/rh_eq_chisq.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/rh_pros/rh_solve_lmq.pro

.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/THEMIS_PRO/dat_themis_esa_str_names.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/THEMIS_PRO/dat_themis_esa_str_names.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/dat_3dp_str_names.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/dat_3dp_str_names.pro

.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/test_3dp_struc_format.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/test_3dp_struc_format.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/THEMIS_PRO/test_themis_esa_struc_format.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/THEMIS_PRO/test_themis_esa_struc_format.pro

.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/dat_3dp_energy_bins.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/dat_3dp_energy_bins.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/pesa_high_bad_bins.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/THEMIS_PRO/test_wind_vs_themis_esa_struct.pro


.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/transform_vframe_3d.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/rotate_3dp_structure.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/SCIENCE_PRO/convert_ph_units.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/add_scpot.pro

.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/THEMIS_PRO/modify_themis_esa_struc.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/THEMIS_PRO/thm_convert_esa_units_lbwiii.pro

.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/contour_3d_1plane.pro

.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/contour_df_pos_slide_plot.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/contour_df_pos_slide_plot.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/contour_df_pos_slide_wrapper.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/contour_df_pos_slide_wrapper.pro

.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/wavelet_to_tplot.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/wavelet_to_tplot.pro

.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/no_label.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/oplot_tplot_spec.pro

.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/find_struc_values.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/get_coord_list.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/get_tplot_handle_props.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/tplot_struct_format_test.pro

.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/resistivity_calculation.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/resistivity_calc_wrapper.pro

.compile /Users/lbwilson/Desktop/swidl-0.1/IDL_stuff/themis_pros/acfields_to_fac.pro

.compile /Users/lbwilson/Desktop/swidl-0.1/IDL_stuff/themis_pros/themis_load_all_inst.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/IDL_stuff/themis_pros/themis_load_wavelets.pro

.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/DAVIN_PRO/moments_3d_omega_weights.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/DAVIN_PRO/moments_3du.pro
; => Put the initialization routine (comp_lynn_pros.pro) in the ~/TDAS/tdas_6_00/idl/
;      directory and change the file paths so they work for your personal machine

; => Compile necessary routines
@comp_lynn_pros
; => initialize themis routines and default parameters
thm_init

;-----------------------------------------------------------------------------------------
; => Date/Times/Probes
;-----------------------------------------------------------------------------------------
tdate     = '2009-07-13'
probe     = 'b'
probef    = probe[0]
gprobes   = probe[0]
tr_00     = tdate[0]+'/'+['07:50:00','10:10:00']
; Data parameters, load data, and set color table:
;
dur       = 1.0   ; # of days

timespan,tdate[0],dur[0],/DAY
tr        = timerange()
probes    = ['a','b','c','d','e']

tplot_options,'XMARGIN',[ 20, 15]
tplot_options,'YMARGIN',[ 5, 5]
;;=================================================================
;; Load state stuff
;;=================================================================
sc        = probe[0]
thm_load_state,PROBE=sc[0],/GET_SUPPORT_DATA
;;=================================================================
;; Load magnetic field and level 2 velocity data (for coord rotation).
;;=================================================================
mode   = 'fg?'
sc     = probe[0]
thm_load_fgm,PROBE=sc[0],DATATYPE=mode[0],LEVEL=2,COORD='all',TRANGE=tr

WINDOW,0,RETAIN=2,XSIZE=1700,YSIZE=1100
sc     = probe[0]
pref   = 'th'+sc[0]+'_fgl'+['_dsl','_gse','_gsm']
names  = tnames(pref)
tplot,names
;-----------------------------------------------------------------------------------------
; => Convert GSM SC position to SM position
;-----------------------------------------------------------------------------------------
sc      = probe[0]
pos_gsm = 'th'+sc[0]+'_state_pos_gsm'
pos__sm = 'th'+sc[0]+'_state_pos__sm'
cotrans,pos_gsm[0],pos__sm[0],/GSM2SM
posnm          = pos__sm[0]
get_data,posnm[0],DATA=temp,DLIM=dlim,LIM=lim
th_pos_time    = temp.X
th_pos_vec__sm = temp.Y
th_pos_rad__sm = SQRT(TOTAL(th_pos_vec__sm^2,2,/NAN))
;-----------------------------------------------------------------------------------------
; => Calculate Magnetic Local Time (MLT), Magnetic Latitude (MLAT), L-Shell, and 
;      Invariant Latitude (ILAT)
;-----------------------------------------------------------------------------------------
;-----------------------------------------------------
; => MLT (hours)
;-----------------------------------------------------
t_x            = th_pos_vec__sm[*,0]
t_y            = th_pos_vec__sm[*,1]
t_z            = th_pos_vec__sm[*,2]
th_mlt         = ATAN(t_y/t_x)*18d1/!DPI/15d0 + 12d0
; => Check for negative X-SM coordinate points
low_tmp        = WHERE(th_pos_vec__sm[*,0] LT 0d0,lwtp)
IF (lwtp GT 0L) THEN th_mlt[low_tmp] = (ATAN(t_y[low_tmp]/t_x[low_tmp]) + !DPI)*18d1/(!DPI*15d0) + 12d0
; => make sure LT 24
th_mlt         = th_mlt MOD 24d0
;-----------------------------------------------------
; => MLAT (deg)
;-----------------------------------------------------
t_ratio        = t_z/th_pos_rad__sm
th_mlat        = ATAN(t_ratio)*18d1/!DPI
;-----------------------------------------------------
; => L-Shell (Re)
;-----------------------------------------------------
cmlat          = COS(th_mlat*!DPI/18d1)
th_lshell      = th_pos_rad__sm/(R_E[0]*cmlat^2)
;-----------------------------------------------------
; => ILAT (deg)
;-----------------------------------------------------
irt_lsh        = SQRT(1d0/th_lshell)
th_ilat        = ACOS(irt_lsh)*18d1/!DPI

; => send to TPLOT
pref           = 'th'+sc[0]+'_'
store_data,pref[0]+'_MLT',DATA={X:th_pos_time,Y:th_mlt}
store_data,pref[0]+'MLAT',DATA={X:th_pos_time,Y:th_mlat}
store_data,pref[0]+'_LSH',DATA={X:th_pos_time,Y:th_lshell}
store_data,pref[0]+'ILAT',DATA={X:th_pos_time,Y:th_ilat}

pref           = 'th'+sc[0]+'_'
tpref          = 'th'+sc[0]+' '
options,pref[0]+'_MLT','YTITLE',tpref[0]+'MLT [Hr]',/DEF
options,pref[0]+'MLAT','YTITLE',tpref[0]+'MLAT [Deg]',/DEF
options,pref[0]+'_LSH','YTITLE',tpref[0]+'LShell [Re]',/DEF
options,pref[0]+'ILAT','YTITLE',tpref[0]+'ILAT [Deg]',/DEF

nnw = tnames()
options,nnw,'YSTYLE',1
options,nnw,'PANEL_SIZE',2.
options,nnw,'XMINOR',5
options,nnw,'XTICKLEN',0.04
options,nnw,'YTICKLEN',0.01

; => Add SC position to TPLOT plots
names          = [pref[0]+'_LSH',pref[0]+'_MLT',pref[0]+'MLAT',pref[0]+'ILAT']
tplot_options,VAR_LABEL=names
;-----------------------------------------------------
; => Create |B| TPLOT variable
;-----------------------------------------------------
sc      = probe[0]
pref    = 'th'+sc[0]+'_fg*'
names   = tnames(pref[0])
hed_nm  = tnames('*_hed')
good_nm = array_where(names,hed_nm,/N_UNIQ,NCOMP1=comp1,NCOMP2=comp2)
names   = names[comp1]
options,names,'COLORS',[250,150, 50],/DEF
options,names,'LABELS',['x','y','z'],/DEF

mode    = 'fgl'
coord   = 'dsl'
name    = 'th'+sc[0]+'_'+mode[0]+'_'+coord[0]
get_data,name[0],DATA=temp,DLIM=dlim,LIM=lim
bmag    = SQRT(TOTAL(temp.Y^2,2,/NAN))
temp2   = {X:temp.X,Y:bmag}
store_data,'th'+sc[0]+'_'+mode[0]+'_mag',DATA=temp2
options,'th'+sc[0]+'_'+mode[0]+'_mag','YTITLE','th'+STRMID(sc[0],0L,1L)+' |B| ['+mode[0]+', nT]',/DEF

mode    = 'fgh'
coord   = 'dsl'
name    = 'th'+sc[0]+'_'+mode[0]+'_'+coord[0]
get_data,name[0],DATA=temp,DLIM=dlim,LIM=lim
bmag    = SQRT(TOTAL(temp.Y^2,2,/NAN))
temp2   = {X:temp.X,Y:bmag}
store_data,'th'+sc[0]+'_'+mode[0]+'_mag',DATA=temp2
options,'th'+sc[0]+'_'+mode[0]+'_mag','YTITLE','th'+STRMID(sc[0],0L,1L)+' |B| ['+mode[0]+', nT]',/DEF

nnw = tnames()
options,nnw,'YSTYLE',1
options,nnw,'PANEL_SIZE',2.
options,nnw,'XMINOR',5
options,nnw,'XTICKLEN',0.04
options,nnw,'YTICKLEN',0.01

mode    = 'fgl'
fgm_nm  = 'th'+STRMID(sc[0],0L,1L)+'_'+mode[0]+'_gsm'
options,fgm_nm[0],'YTITLE','th'+STRMID(sc[0],0L,1L)+' B ['+mode[0]+', GSM, nT]',/DEF
options,fgm_nm[0],'YSUBTITLE',/DEF

mode    = 'fgh'
fgm_nm  = 'th'+STRMID(sc[0],0L,1L)+'_'+mode[0]+'_gsm'
options,fgm_nm[0],'YTITLE','th'+STRMID(sc[0],0L,1L)+' B ['+mode[0]+', GSM, nT]',/DEF
options,fgm_nm[0],'YSUBTITLE',/DEF
;-----------------------------------------------------
; => Fix the Y-Axis Titles
;-----------------------------------------------------
mode    = 'fg'+['s','l','h']
coord   = ['dsl','gse','gsm','mag']
modeu   = STRUPCASE(mode)
coordu  = STRUPCASE(coord)

FOR j=0L, 2L DO BEGIN                                                               $
  FOR k=0L, 3L DO BEGIN                                                             $
    pref    = 'th'+sc[0]+'_'+mode[j]+'_'+coord[k]                                 & $
    names   = tnames(pref[0])                                                     & $
    get_data,names[0],DATA=temp,DLIM=dlim,LIM=lim                                 & $
    smrate  = sample_rate(temp.X,GAP_THRESH=2d0,/AVE)                             & $
    strsmr  = STRTRIM(STRING(FORMAT='(f15.0)',smrate[0]),2L)                      & $
    yttl    = 'B ['+modeu[j]+', '+coordu[k]+', nT]'                               & $
    ysubt   = '[th'+sc[0]+' '+strsmr[0]+' sps, L2]'                               & $
    str_element,dlim,'YTITLE',yttl[0],/ADD_REPLACE                                & $
    str_element,dlim,'YSUBTITLE',ysubt[0],/ADD_REPLACE                            & $
    store_data,names[0],DATA=temp,DLIM=dlim,LIM=lim


mode    = 'fgl'
names   = 'th'+sc[0]+'_'+mode[0]+['_mag','_gsm']
tplot,names,TRANGE=time_double(tr_00),/NOM
;-----------------------------------------------------------------------------------------
; => Load ESA data
;-----------------------------------------------------------------------------------------
; => Load level 2 densities and SC potentials
sc      = probe[0]
thm_load_esa,PROBE=sc[0],DATAT=' peer_avgtemp peir_avgtemp pe?r_density peer_sc_pot ',LEVEL=2
thm_load_esa,PROBE=sc[0],DATAT=' pee?_density pee?_avgtemp ',LEVEL=2
thm_load_esa,PROBE=sc[0],DATAT=' pei?_density pei?_avgtemp ',LEVEL=2
thm_load_esa,PROBE=sc[0],DATAT=' pee?_velocity_dsl pei?_velocity_dsl ',LEVEL=2
; => rotate DSL to GSE
partn     = ['e','i']
coords    = ['dsl','gse']
in_suffe  = 'pe'+partn[0]+['b','r','f']+'_velocity_'+coords[0]
out_suffe = 'pe'+partn[0]+['b','r','f']+'_velocity_'+coords[1]
in_suffi  = 'pe'+partn[1]+['b','r','f']+'_velocity_'+coords[0]
out_suffi = 'pe'+partn[1]+['b','r','f']+'_velocity_'+coords[1]
in_name   = 'th'+sc[0]+'_'+[[in_suffe],[in_suffi]]
out_name  = 'th'+sc[0]+'_'+[[out_suffe],[out_suffi]]
FOR j=0L, 1L DO BEGIN                                                              $
  thm_cotrans,in_name[0,j],out_name[0,j],OUT_COORD=coords[1],IN_COORD=coords[0]  & $
  thm_cotrans,in_name[1,j],out_name[1,j],OUT_COORD=coords[1],IN_COORD=coords[0]  & $
  thm_cotrans,in_name[2,j],out_name[2,j],OUT_COORD=coords[1],IN_COORD=coords[0]

names     = tnames([REFORM(in_name,3*2),REFORM(out_name,3*2)])
options,names,'COLORS',[250,150, 50],/DEF
options,names,'LABELS',['x','y','z'],/DEF

; => rotate GSE to GSM
partn     = ['e','i']
coords    = ['gse','gsm']
in_suffe  = 'pe'+partn[0]+['b','r','f']+'_velocity_'+coords[0]
out_suffe = 'pe'+partn[0]+['b','r','f']+'_velocity_'+coords[1]
in_suffi  = 'pe'+partn[1]+['b','r','f']+'_velocity_'+coords[0]
out_suffi = 'pe'+partn[1]+['b','r','f']+'_velocity_'+coords[1]
in_name   = 'th'+sc[0]+'_'+[[in_suffe],[in_suffi]]
out_name  = 'th'+sc[0]+'_'+[[out_suffe],[out_suffi]]
FOR j=0L, 1L DO BEGIN                                                              $
  thm_cotrans,in_name[0,j],out_name[0,j],OUT_COORD=coords[1],IN_COORD=coords[0]  & $
  thm_cotrans,in_name[1,j],out_name[1,j],OUT_COORD=coords[1],IN_COORD=coords[0]  & $
  thm_cotrans,in_name[2,j],out_name[2,j],OUT_COORD=coords[1],IN_COORD=coords[0]

names     = tnames([REFORM(in_name,3*2),REFORM(out_name,3*2)])
options,names,'COLORS',[250,150, 50],/DEF
options,names,'LABELS',['x','y','z'],/DEF

dens_nm = tnames('*b_density')
temp_nm = tnames('*b_avgtemp')
options,dens_nm,'YLOG',0,/DEF
options,temp_nm,'YLOG',0,/DEF

nnw = tnames()
options,nnw,'YSTYLE',1
options,nnw,'PANEL_SIZE',2.
options,nnw,'XMINOR',5
options,nnw,'XTICKLEN',0.04
options,nnw,'YTICKLEN',0.01
;-----------------------------------------------------------------------------------------
; => Load ESA DFs
;-----------------------------------------------------------------------------------------
coord   = 'dsl'
sc      = probe[0]
pref    = 'th'+sc[0]+'_'
velname = pref[0]+'peib_velocity_'+coord[0]
magname = pref[0]+'fgh_'+coord[0]

; => Load IESA DFs [with THETA and PHI in DSL Coords]
format  = pref[0]+'peib'
peib_df_arr_b = thm_part_dist_array(FORMAT=format[0],TRANGE=tr,MAG_DATA=magname[0],$
                                    VEL_DATA=velname[0])

; => Load IESA DFs [with THETA and PHI in DSL Coords]
velname = pref[0]+'peeb_velocity_'+coord[0]
format  = pref[0]+'peeb'
peeb_df_arr_b = thm_part_dist_array(FORMAT=format[0],TRANGE=tr,MAG_DATA=magname[0],$
                                    VEL_DATA=velname[0])

;; => make structure arrays compatible with my routines
dat_i     = peib_df_arr_b
dat_e     = peeb_df_arr_b
n_i       = N_ELEMENTS(dat_i)
n_e       = N_ELEMENTS(dat_e)
PRINT,';', n_i, n_e
;        1371        1374

modify_themis_esa_struc,dat_i
modify_themis_esa_struc,dat_e

;; add SC potential to structures
sc        = probe[0]
pref      = 'th'+sc[0]+'_'
scname    = tnames(pref[0]+'pe*b_sc_pot')

add_scpot,dat_e,scname[0]
add_scpot,dat_i,scname[1]
;-----------------------------------------------------------------------------------------
; => Load ESA (theta,phi)-angles DSL --> GSE
;-----------------------------------------------------------------------------------------
coord    = 'gse'
sc       = probe[0]
vel_name = pref[0]+'peib_velocity_'+coord[0]
mag_name = pref[0]+'fgh_'+coord[0]
;; => returned data structure will now have the following tags in the GSE basis
;;      THETA
;;      PHI
;;      MAGF
;;      VSW
;;      VELOCITY
rotate_esa_thetaphi_to_gse,dat_i,MAGF_NAME=mag_name,VEL_NAME=vel_name


vel_name = pref[0]+'peeb_velocity_'+coord[0]
mag_name = pref[0]+'fgh_'+coord[0]
rotate_esa_thetaphi_to_gse,dat_e,MAGF_NAME=mag_name,VEL_NAME=vel_name

;-----------------------------------------------------------------------------------------
; => Set up plot windows and defaults
;-----------------------------------------------------------------------------------------
WINDOW,1,RETAIN=2,XSIZE=800,YSIZE=1100
WINDOW,2,RETAIN=2,XSIZE=800,YSIZE=1100
WINDOW,3,RETAIN=2,XSIZE=800,YSIZE=1100

; => setup colors
LOADCT,39
DEVICE,DECOMPOSED=0

;;  => Define shock parameters [from RH solutions]
t_RH_0       = time_double(tdate[0]+'/'+['08:57:00.000','09:02:30.000'])
t_up         = time_double(tdate[0]+'/'+['09:00:08.700','09:01:38.800'])
t_dn         = time_double(tdate[0]+'/'+['08:57:35.000','08:59:00.000'])
;;  Upstream
avg_magf_up  = [-2.88930d0,1.79045d0,-1.37976d0]  ;; GSE B-field vector [nT]
avg_vswi_up  = [-252.883d0,-7.32447d0,83.2220d0]  ;; GSE bulk flow vector [km/s]
avg_dens_up  = 8.64058d0                          ;; Avg. upstream density [cm^(-3)]
avg_Te_up    = 11.2373d0                          ;; Avg. upstream electron temperature [eV]
avg_Ti_up    = 279.739d0  ;;  ** BAD due to gyrating ions **
;;----------------------------------------------------------------------------------------
;;  Ion temperature CANNOT be trusted near the bow shock due to these gyration ions
;;    as they produce anomalously high ion temperatures
;;    [e.g. 2 beams with roghly 1 eV temperatures separated by 350 km/s will produce an avg. temp of nearly 1 keV]
;;----------------------------------------------------------------------------------------
;;        => flip solutions to outward normal [contour min in opposite direction]
vshn_up      = -1d0*(3.6977553d0)
ushn_up      = -1d0*(204.62596d0)
gnorm        = -1d0*[-0.54904591d0,-0.068017244d0,0.82887820d0]
bmag_up      = NORM(avg_magf_up)
vmag_up      = NORM(avg_vswi_up)
b_dot_n      = my_dot_prod(gnorm,avg_magf_up,/NOM)/(bmag_up[0]*NORM(gnorm))
theta_Bn     = ACOS(b_dot_n[0])*18d1/!DPI
theta_Bn     = theta_Bn[0] < (18d1 - theta_Bn[0])
nkT_up       = (avg_dens_up[0]*1d6)*(kB[0]*K_eV[0]*(avg_Te_up[0] + avg_Te_up[0]))  ;; plasma pressure [J m^(-3)]
sound_up     = SQRT(5d0*nkT_up[0]/(3d0*(avg_dens_up[0]*1d6)*mp[0]))                ;; sound speed [m/s]
alfven_up    = (bmag_up[0]*1d-9)/SQRT(muo[0]*(avg_dens_up[0]*1d6)*mp[0])           ;; Alfven speed [m/s]
Vs_p_Va_2    = (sound_up[0]^2 + alfven_up[0]^2)
b2_4ac       = Vs_p_Va_2[0]^2 + 4d0*sound_up[0]^2*alfven_up[0]^2*SIN(theta_Bn[0]*!DPI/18d1)^2
fast_up      = SQRT((Vs_p_Va_2[0] + SQRT(b2_4ac[0]))/2d0)
;  Mach numbers
Ma_up        = ABS(ushn_up[0]*1d3/alfven_up[0])
Ms_up        = ABS(ushn_up[0]*1d3/sound_up[0])
Mf_up        = ABS(ushn_up[0]*1d3/fast_up[0])
PRINT,';', theta_Bn[0], Ma_up[0], Ms_up[0], Mf_up[0]
;       84.963815       7.5171590       3.4161274       2.9320216
;;  Downstream
avg_magf_dn  = [-3.85673d0,10.8180d0,-8.72761d0]
avg_vswi_dn  = [-97.0158d0,23.5517d0,-13.3369d0]
avg_dens_dn  = 47.9863d0
avg_Te_dn    = 30.5007d0
avg_Ti_dn    = 157.347d0
;;        => flip solutions to outward normal [contour min in opposite direction]
ushn_dn      = -1d0*36.911732d0
bmag_dn      = NORM(avg_magf_dn)
vmag_dn      = NORM(avg_vswi_dn)
nkT_dn       = (avg_dens_dn[0]*1d6)*(kB[0]*K_eV[0]*(avg_Te_dn[0] + avg_Ti_dn[0]))  ;; plasma pressure [J m^(-3)]
sound_dn     = SQRT(5d0*nkT_dn[0]/(3d0*(avg_dens_dn[0]*1d6)*mp[0]))
alfven_dn    = (bmag_dn[0]*1d-9)/SQRT(muo[0]*(avg_dens_dn[0]*1d6)*mp[0])           ;; Alfven speed [m/s]
Vs_p_Va_2    = (sound_dn[0]^2 + alfven_dn[0]^2)
b2_4ac       = Vs_p_Va_2[0]^2 + 4d0*sound_dn[0]^2*alfven_dn[0]^2*SIN(theta_Bn[0]*!DPI/18d1)^2
fast_dn      = SQRT((Vs_p_Va_2[0] + SQRT(b2_4ac[0]))/2d0)
;  Mach numbers
Ma_dn        = ABS(ushn_dn[0]*1d3/alfven_dn[0])
Ms_dn        = ABS(ushn_dn[0]*1d3/sound_dn[0])
Mf_dn        = ABS(ushn_dn[0]*1d3/fast_dn[0])
PRINT,';', theta_Bn[0], Ma_dn[0], Ms_dn[0], Mf_dn[0], avg_dens_dn[0]/avg_dens_up[0]
;       84.963815       3.1955426      0.21314777      0.21221341       5.5535971
;-----------------------------------------------------
; => Calculate gyrospeeds of specular reflection
;-----------------------------------------------------
; => calculate unit vectors
bhat         = avg_magf_up/bmag_up[0]
vhat         = avg_vswi_up/vmag_up[0]
; => calculate upstream inflow velocity
v_up         = avg_vswi_up - gnorm*vshn_up[0]
; => Eq. 2 from Gosling et al., [1982]
;      [specularly reflected ion velocity]
Vref_s       = v_up - gnorm*(2d0*my_dot_prod(v_up,gnorm,/NOM))
; => Eq. 4 and 3 from Gosling et al., [1982]
;      [guiding center velocity of a specularly reflected ion]
Vper_r       = v_up - bhat*my_dot_prod(v_up,bhat,/NOM)  ; => Eq. 4
Vgc_r        = Vper_r + bhat*(my_dot_prod(Vref_s,bhat,/NOM))
; => Eq. 6 from Gosling et al., [1982]
;      [gyro-velocity of a specularly reflected ion]
Vgy_r        = Vref_s - Vgc_r
; => Eq. 7 and 9 from Gosling et al., [1982]
;      [guiding center velocity of a specularly reflected ion perp. to shock surface]
Vgcn_r       = my_dot_prod(Vgc_r,gnorm,/NOM)
;      [guiding center velocity of a specularly reflected ion para. to B-field]
Vgcb_r       = my_dot_prod(Vgc_r,bhat,/NOM)
; => gyrospeed and guiding center speed
Vgy_rs       = NORM(REFORM(Vgy_r))
Vgc_rs       = NORM(REFORM(Vgc_r))

PRINT,';', Vgy_rs[0], Vgc_rs[0]
PRINT,';', Vgcn_r[0], Vgcb_r[0]
;       406.31657       242.77915
;      -201.51872       128.16671


;-----------------------------------------------------
; IESA
;-----------------------------------------------------
i_time0 = dat_i.TIME
i_time1 = dat_i.END_TIME
tbow0   = time_double(tdate[0]+'/'+['08:56:00.000','09:10:00.000'])
tbow1   = time_double(tdate[0]+'/'+['09:14:00.000','09:30:00.000'])
tbow2   = time_double(tdate[0]+'/'+['09:30:00.000','09:44:00.000'])
good_i0 = WHERE(i_time0 GE tbow0[0] AND i_time1 LE tbow0[1],gdi0)
good_i1 = WHERE(i_time0 GE tbow1[0] AND i_time1 LE tbow1[1],gdi1)
good_i2 = WHERE(i_time0 GE tbow2[0] AND i_time1 LE tbow2[1],gdi2)
PRINT,';', gdi0, gdi1, gdi2
;         281         318         279

dat_i0  = dat_i[good_i0]
dat_i1  = dat_i[good_i1]
dat_i2  = dat_i[good_i2]
;-----------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------
;  Plot individual contour plots
;-----------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------
WINDOW,1,RETAIN=2,XSIZE=800,YSIZE=1100
WINDOW,2,RETAIN=2,XSIZE=800,YSIZE=1100
WINDOW,3,RETAIN=2,XSIZE=800,YSIZE=1100

dat_aa  = dat_i0
ngrid   = 30L               ; => # of grid points to use
sunv    = [1.,0.,0.]
sunn    = 'Sun Dir.'        ; => name of extra vector
xname   = 'B!Do!N'          ; => name of VEC1 (see below)
yname   = 'V!Dsw!N'         ; => name of VEC2 (see below)

vlim    = 25e2              ; => velocity limit for contour and X-axis of cuts
; => Define the # of points to smooth the cuts of the DF
ns      = 7L
smc     = 1
smct    = 1
; => Define the min/max allowable range in DF plots
dfmax   = 1d-1
dfmin   = 1d-15

j       = 79L
tr_ie   = tbow0
dat_0   = dat_aa[j]
gnorm   = gnorm
normnm  = 'Shock Normal[0]'
vcirc   = Vgy_rs[0]       ; => Put a circle of constant energy at the gyrospeed

WSET,0
mode    = 'fgh'
names   = 'th'+sc[0]+'_'+[mode[0]+['_mag','_gsm'],'efw_cal_gsm','scw_gsm_L2']
  tplot,names,/NOM,TRANGE=tr_ie
  time_bar,dat_i[0].TIME,VARNAME=names,COLOR=250L
  time_bar,dat_i[0].END_TIME,VARNAME=names,COLOR= 50L

; => Define the two vectors which define the XY-plane
vec1    = dat_0.MAGF
vec2    = dat_0.VSW

WSET,1
WSHOW,1
contour_3d_1plane,dat_0,vec1,vec2,VLIM=vlim,NGRID=ngrid,XNAME=xname,    $
                      YNAME=yname,SM_CUTS=smc,NSMOOTH=ns,/ONE_C,        $
                      DFRA=dfra,VCIRC=vcirc[0],PLANE='xy',EX_VEC1=sunv, $
                      EX_VN1=sunn[0],EX_VEC0=gnorm,EX_VN0=normnm[0],    $
                      SM_CONT=smct,/NO_REDF,INTERP=inter,DFMIN=dfmin[0],$
                      DFMAX=dfmax[0]

WSET,2
WSHOW,2
contour_3d_1plane,dat_0,vec1,vec2,VLIM=vlim,NGRID=ngrid,XNAME=xname,    $
                      YNAME=yname,SM_CUTS=smc,NSMOOTH=ns,/ONE_C,        $
                      DFRA=dfra,VCIRC=vcirc[0],PLANE='xz',EX_VEC1=sunv, $
                      EX_VN1=sunn[0],EX_VEC0=gnorm,EX_VN0=normnm[0],    $
                      SM_CONT=smct,/NO_REDF,INTERP=inter,DFMIN=dfmin[0],$
                      DFMAX=dfmax[0]

WSET,3
WSHOW,3
contour_3d_1plane,dat_0,vec1,vec2,VLIM=vlim,NGRID=ngrid,XNAME=xname,    $
                      YNAME=yname,SM_CUTS=smc,NSMOOTH=ns,/ONE_C,        $
                      DFRA=dfra,VCIRC=vcirc[0],PLANE='yz',EX_VEC1=sunv, $
                      EX_VN1=sunn[0],EX_VEC0=gnorm,EX_VN0=normnm[0],    $
                      SM_CONT=smct,/NO_REDF,INTERP=inter,DFMIN=dfmin[0],$
                      DFMAX=dfmax[0]
;-----------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------
;  Save each individual contour plot
;-----------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/contour_df_pos_slide_plot.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/contour_df_pos_slide_plot.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/contour_df_pos_slide_wrapper.pro

timename   = ['thb_fgh_mag','thb_fgh_gse']
dat_aa     = dat_i0
sunv       = [1.,0.,0.]
sunn       = 'Sun Dir.'        ; => name of extra vector
ngrid      = 30L
xname      = 'B!Do!N'
yname      = 'V!Dsw!N'
vlim       = 25e2
ns         = 7L
smc        = 1
smct       = 1
dfmax      = 1d-1
dfmin      = 1d-15
gnorm      = gnorm
normnm     = 'Shock Normal[0]'
vcirc      = Vgy_rs[0]
; change the following to whatever time range you desire
tbow00     = time_double(tdate[0]+'/'+['09:00:00.000','09:06:40.000'])
; => Plot and save snapshots
contour_df_pos_slide_wrapper,timename,dat_aa,VLIM=vlim[0],NGRID=ngrid[0],XNAME=xname[0], $
                              YNAME=yname[0],VCIRC=vcirc[0],EX_VEC0=gnorm,      $
                              EX_VN0=normnm[0],PLANE=plane,SM_CONT=smct,$
                              DFMIN=dfmin[0],DFMAX=dfmax[0],TRANGE=tbow00, $
                              TROUTER=21d0,SNAPSHOTS=1,TSNAMES='FGM-fgh-GSE_'


;-----------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------
;  Make a short movie
;-----------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/contour_df_pos_slide_plot.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/contour_df_pos_slide_plot.pro
.compile /Users/lbwilson/Desktop/swidl-0.1/wind_3dp_pros/LYNN_PRO/contour_df_pos_slide_wrapper.pro

timename   = ['thb_fgh_mag','thb_fgh_gse']
dat_aa     = dat_i0
sunv       = [1.,0.,0.]
sunn       = 'Sun Dir.'        ; => name of extra vector
ngrid      = 30L
xname      = 'B!Do!N'
yname      = 'V!Dsw!N'
vlim       = 25e2
ns         = 7L
smc        = 1
smct       = 1
dfmax      = 1d-1
dfmin      = 1d-15
gnorm      = gnorm
normnm     = 'Shock Normal[0]'
vcirc      = Vgy_rs[0]
; change the following to whatever time range you desire
tbow00     = time_double(tdate[0]+'/'+['09:00:00.000','09:02:00.000'])
; make the movie with 4 copies of each frame [EXFRAMES keyword] so that when played back
;   it moves slow enough to watch
contour_df_pos_slide_wrapper,timename,dat_aa,VLIM=vlim[0],NGRID=ngrid[0],XNAME=xname[0], $
                              YNAME=yname[0],VCIRC=vcirc[0],EX_VEC0=gnorm,               $
                              EX_VN0=normnm[0],PLANE=plane,SM_CONT=smct,                 $
                              DFMIN=dfmin[0],DFMAX=dfmax[0],TRANGE=tbow00,               $
                              TROUTER=21d0,TSNAMES='FGM-fgh-GSE_',EXFRAMES=4L


;; If your computer has ffmpeg, then use the following
timename   = ['thb_fgh_mag','thb_fgh_gse']
dat_aa     = dat_i0
sunv       = [1.,0.,0.]
sunn       = 'Sun Dir.'        ; => name of extra vector
ngrid      = 30L
xname      = 'B!Do!N'
yname      = 'V!Dsw!N'
vlim       = 25e2
ns         = 7L
smc        = 1
smct       = 1
dfmax      = 1d-1
dfmin      = 1d-15
gnorm      = gnorm
normnm     = 'Shock Normal[0]'
vcirc      = Vgy_rs[0]
fps        = 5L             ; # of frames per second
; change the following to whatever time range you desire
tr_aa      = time_double(tdate[0]+'/'+['09:00:00.000','09:02:00.000'])

contour_df_pos_slide_wrapper,timename,dat_aa,VLIM=vlim[0],NGRID=ngrid[0],XNAME=xname[0],  $
                              YNAME=yname[0],VCIRC=vcirc[0],EX_VEC0=gnorm,                $
                              EX_VN0=normnm[0],EX_VEC1=sunv,EX_VN1=sunn[0],               $
                              PLANE='xy',SM_CONT=smct,DFRA=dfra,TRANGE=tr_aa,TROUTER=21d0,$
                              TSNAMES='FGM-fgh-GSE_',FRAMERATE=fps[0]













