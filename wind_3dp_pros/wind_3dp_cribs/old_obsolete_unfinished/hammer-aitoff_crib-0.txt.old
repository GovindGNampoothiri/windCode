date   = '040396'
t      = ['1996-04-03/08:45:00','1996-04-03/10:45:00']
tramp  = '1996-04-03/09:47:17.152'

date   = '040896'
t      = ['1996-04-08/01:41:00','1996-04-08/03:41:00']
tramp  = '1996-04-08/02:41:09.767'

date   = '102497'
t      = ['1997-10-24/10:14:00','1997-10-24/12:14:00']
tramp  = '1997-10-24/11:18:10.114'

date   = '121097'
t      = ['1997-12-10/03:33:00','1997-12-10/05:33:00']
tramp  = '1997-12-10/04:33:14.664'

date   = '042398'
t      = ['1998-04-23/16:29:00','1998-04-23/18:29:00']
tramp  = '1998-04-23/17:29:02.445'

date   = '043098'
t      = ['1998-04-30/07:43:00','1998-04-30/09:43:00']
tramp  = '1998-04-30/08:43:15.291'

date   = '051598'
t      = ['1998-05-15/12:53:00','1998-05-15/14:53:00']
tramp  = '1998-05-15/13:53:46.079'

date   = '082698'
t      = ['1998-08-26/05:40:00','1998-08-26/07:40:00']  ; -For moment writing
tramp  = '1998-08-26/06:40:24.972'

date   = '092498'
t      = ['1998-09-24/22:20:00','1998-09-25/00:20:00']
tramp  = '1998-09-24/23:20:37.000'

date   = '021100'
t      = ['2000-02-11/22:33:00','2000-02-12/00:33:00']
tramp  = '2000-02-11/23:33:55.319'
enlow  = [0L,7L]
enhigh = [0L,6L]

date   = '040600'
t      = ['2000-04-06/15:00:00','2000-04-06/18:00:00']  ; -For moment writing
tramp  = '2000-04-06/16:32:09.237'
enlow  = [0L,7L]
enhigh = [0L,6L]

date   = '101101'
t      = ['2001-10-11/15:50:00','2001-10-11/17:50:00']
tramp  = '2001-10-11/16:50:55.000'

date   = '102101'
t      = ['2001-10-21/15:40:00','2001-10-21/17:40:00']
tramp  = '2001-10-21/16:40:43.000'

date   = '102501'
t      = ['2001-10-25/07:59:00','2001-10-25/09:59:00']
tramp  = '2001-10-25/08:59:28.000'

date   = '112401'
t      = ['2001-11-24/04:31:00','2001-11-24/06:51:00']
tramp  = '2001-11-24/05:51:55.000'



tr3 = time_double(t)
tura  = time_double(tramp)
mydate = my_str_date(DATE=date)
date   = mydate.S_DATE[0]  ; -('MMDDYY')
mdate  = mydate.DATE[0]    ; -('YYYYMMDD')
tdate  = mydate.TDATE[0]
ldate  = STRMID(mdate,4L,4L)+STRMID(mdate,0L,4L)


mag3  = read_wind_mfi(TRANGE=tr3)
t3x   = mag3.MAG.X
bmag4 = mag3.MAG.Y
magf4 = mag3.BGSE.Y
nt    = N_ELEMENTS(t3x) 
store_data,'wi_B3_MAG(GSE)',DATA={X:mag3.MAG.X,Y:bmag4}
store_data,'wi_B3(GSE)',DATA={X:mag3.MAG.X,Y:magf4}
options,'wi_B3_MAG(GSE)',"YTITLE","|B| (nT)!C[GSE,3s]"
options,'wi_B3(GSE)',"YTITLE","B (nT)!C[GSE,3s]"
options,'wi_B3(GSE)','COLORS',[250,150,50]
nnw = tnames()
options,nnw,"YSTYLE",1
options,nnw,"PANEL_SIZE",2.
options,nnw,'XMINOR',5
options,nnw,'XTICKLEN',0.04
nn0 =['wi_B3_MAG(GSE)','wi_B3(GSE)']
;-----------------------------------------------------------------------------------------
; => Constants and dummy variables
;-----------------------------------------------------------------------------------------
f      = !VALUES.F_NAN
d      = !VALUES.D_NAN
kB     = 1.380658d-23      ; -Boltzmann Constant (J/K)
muo    = 4d0*!DPI*1d-7     ; -Permeability of free space (N/A^2 or H/m)
K_eV   = 1.160474d4        ; -Conversion = degree Kelvin/eV
epo    = 8.854187817d-12   ; -Permittivity of free space (F/m)
muo    = 4d0*!DPI*1d-7     ; -Permeability of free space (N/A^2 or H/m)
me     = 9.1093897d-31     ; -Electron mass (kg)
mp     = 1.6726231d-27     ; -Proton mass (kg)
qq     = 1.60217733d-19    ; -Fundamental charge (C)
c      = 2.99792458d8      ; -Speed of light in vacuum (m/s)
c2     = (c*1d-3)^2        ; -" " squared (km/s)^2
me_ev  = 0.5109906d6       ; -Electron mass in eV/c^2
me_3dp = me_ev/c2          ; -Electron mass [eV/(km/s)^2]
mp_ev  = 938.27231d6       ; -Proton mass in eV/c^2
mp_3dp = mp_ev/c2          ; -Proton mass [eV/(km/s)^2]
beta_fac = 1d6*(kB*K_eV)*(2d0*muo)
;-----------------------------------------------------------------------------------------
; => Get shock normal direction
;-----------------------------------------------------------------------------------------
sh_mit     = read_shocks_jck_database()
mit_dates  = sh_mit.SDATES             ; => 'MMDDYY'
shocks     = sh_mit.SHOCK
header     = sh_mit.HEADER
anorms     = shocks.SH_NORM
acomprs    = shocks.COMPRESSION
gshock     = WHERE(mit_dates EQ date,gsh)
IF (gsh GT 0L) THEN gnorm = REFORM(anorms[gshock[0],*]) ELSE gnorm = REPLICATE(f,3)
IF (gsh GT 0L) THEN compr = REFORM(acomprs[gshock[0]])  ELSE compr = 0
;-----------------------------------------------------------------------------------------
; => Find IDL Save Files
;-----------------------------------------------------------------------------------------
default_extension = '/wind_3dp_pros/wind_data_dir/Wind_3DP_DATA/IDL_Save_Files/'
default_location  = default_extension+date+'/'

DEFSYSV,'!wind3dp_umn',EXISTS=exists
IF NOT KEYWORD_SET(exists) THEN mdir  = FILE_EXPAND_PATH('')+default_location
IF     KEYWORD_SET(exists) THEN mdir  = !wind3dp_umn.WIND_3DP_SAVE_FILE_DIR+date+'/'
IF (mdir EQ '')            THEN mdir = default_location
mfiles = FILE_SEARCH(mdir,'*.sav')

RESTORE,mfiles[0]
RESTORE,mfiles[1]
;-----------------------------------------------------------------------------------------
; => Calculate ion and electron moments and send results to TPLOT
;-----------------------------------------------------------------------------------------
eesa_pesa_low_to_tplot,DATE=date,TRANGE=tr3,/G_MAGF,PLM=apl,PLBM=aplb, $
                       ELM=ael,ELBM=aelb,/TO_TPLOT

;-----------------------------------------------------------------------------------------
; => Plot 3D Hammer-Aitoff Projections
;-----------------------------------------------------------------------------------------
; => Determine energy bin labels interactively
; => Eesa Low
zaelb      = ael
nel        = N_ELEMENTS(zaelb)
pref       = 'Eesa-Low_Hammer-Aitoff_'
bdir       = '~/Desktop/3DP_contours/'+date[0]
pdir       = bdir+'/Hammer-Aitoff_Projections/Eesa_Low_anti-Bfield-center/'
mts        = my_time_string(zaelb.TIME,UNIX=1)
ymdb       = mts.DATE_TIME
UTtime     = STRMID(ymdb[*],11L,2L)+STRMID(ymdb[*],14L,2L)+$
             STRMID(ymdb[*],17L,2L)+STRMID(ymdb[*],19L,3L)
gdate      = STRMID(ymdb[*],0L,10L)
FOR j=0L, nel - 1L DO BEGIN                                                         $
  dat   = ael[j]                                                                  & $
  del   = convert_vframe(dat,/INTERP)                                             & $
  g_en  = TOTAL(del.ENERGY,2,/NAN)/ TOTAL(FINITE(del.ENERGY),2,/NAN)              & $
  bad   = WHERE(g_en LE del.SC_POT,bd,COMPLEMENT=good,NCOMPLEMENT=gd)             & $
  IF (bd GT 0) THEN del.DATA[bad,*] = f                                           & $
  IF (bd GT 0) THEN del.PHI[bad,*] = f                                            & $
  IF (bd GT 0) THEN del.THETA[bad,*] = f                                          & $
  IF (bd GT 0) THEN del.ENERGY[bad,*] = f                                         & $
  IF (del.END_TIME LE tura[0]) THEN eb = enlow ELSE eb = enhigh                   & $
;  IF (gd GT 0) THEN eb = minmax(good) ELSE eb = [0L,14L]                          & $
  g_string   = [(roundsig(minmax(g_en[eb]),SIG=2))[0],(roundsig(minmax(g_en[eb]),SIG=2))[1]]   & $
  estring    = STRTRIM(STRING(FORMAT='(f10.2)',g_string*1d0),2)                   & $
  estring    = '_'+STRTRIM(estring[0],2)+'-'+STRTRIM(estring[1],2)+'eV'           & $
  suffx      = estring+'_anti-Bfield-center_interp-no-low_DF'                     & $
  fname  = pdir+pref+gdate[j]+'_'+UTtime[j]+suffx                                 & $
  popen,fname,/PORT                                                               & $
    plot3d,dat,BNCENTER=-1,UNITS='df',EBINS=eb,EX_VEC=gnorm                       & $
  pclose


; => Eesa Low Burst
zaelb      = aelb
nelb       = N_ELEMENTS(zaelb)
pref       = 'Eesa-Low-Burst_Hammer-Aitoff_'
bdir       = '~/Desktop/3DP_contours/'+date[0]
pdir       = bdir+'/Hammer-Aitoff_Projections/Eesa_Low_anti-Bfield-center/'
mts        = my_time_string(zaelb.TIME,UNIX=1)
ymdb       = mts.DATE_TIME
UTtime     = STRMID(ymdb[*],11L,2L)+STRMID(ymdb[*],14L,2L)+$
             STRMID(ymdb[*],17L,2L)+STRMID(ymdb[*],19L,3L)
gdate      = STRMID(ymdb[*],0L,10L)
FOR j=0L, nelb - 1L DO BEGIN                                                        $
  dat   = aelb[j]                                                                 & $
  del   = convert_vframe(dat,/INTERP)                                             & $
  g_en  = TOTAL(del.ENERGY,2,/NAN)/ TOTAL(FINITE(del.ENERGY),2,/NAN)              & $
  bad   = WHERE(g_en LE del.SC_POT,bd,COMPLEMENT=good,NCOMPLEMENT=gd)             & $
  IF (bd GT 0) THEN del.DATA[bad,*] = f                                           & $
  IF (bd GT 0) THEN del.PHI[bad,*] = f                                            & $
  IF (bd GT 0) THEN del.THETA[bad,*] = f                                          & $
  IF (bd GT 0) THEN del.ENERGY[bad,*] = f                                         & $
  IF (del.END_TIME LE tura[0]) THEN eb = enlow ELSE eb = enhigh                   & $
;  IF (gd GT 0) THEN eb = minmax(good) ELSE eb = [0L,14L]                          & $
  g_string   = [(roundsig(minmax(g_en[eb]),SIG=2))[0],(roundsig(minmax(g_en[eb]),SIG=2))[1]]   & $
  estring    = STRTRIM(STRING(FORMAT='(f10.2)',g_string*1d0),2)                   & $
  estring    = '_'+STRTRIM(estring[0],2)+'-'+STRTRIM(estring[1],2)+'eV'           & $
  suffx      = estring+'_anti-Bfield-center_interp-no-low_DF'                     & $
  fname  = pdir+pref+gdate[j]+'_'+UTtime[j]+suffx                                 & $
  popen,fname,/PORT                                                               & $
    plot3d,dat,BNCENTER=-1,UNITS='df',EBINS=eb,EX_VEC=gnorm                       & $
  pclose



; => Eesa High Burst
good       = WHERE(aehb.END_TIME LE tura[0],gd)
zaehb      = aehb[good]
nehb       = N_ELEMENTS(zaehb)
pref       = 'Eesa-High-Burst_Hammer-Aitoff_'
bdir       = '~/Desktop/3DP_contours/'+date[0]
pdir       = bdir+'/Hammer-Aitoff_Projections/Eesa_High_anti-Bfield-center/'
mts        = my_time_string(zaehb.TIME,UNIX=1)
ymdb       = mts.DATE_TIME
UTtime     = STRMID(ymdb[*],11L,2L)+STRMID(ymdb[*],14L,2L)+$
             STRMID(ymdb[*],17L,2L)+STRMID(ymdb[*],19L,3L)
gdate      = STRMID(ymdb[*],0L,10L)
eb         = [0L,11L]
FOR j=0L, nehb - 1L DO BEGIN                                                        $
  dat   = zaehb[j]                                                                & $
  del   = convert_vframe(dat,/INTERP)                                             & $
  g_en  = TOTAL(del.ENERGY,2,/NAN)/ TOTAL(FINITE(del.ENERGY),2,/NAN)              & $
  bad   = WHERE(g_en LE del.SC_POT,bd,COMPLEMENT=good,NCOMPLEMENT=gd)             & $
  IF (bd GT 0) THEN del.DATA[bad,*] = f                                           & $
  IF (bd GT 0) THEN del.PHI[bad,*] = f                                            & $
  IF (bd GT 0) THEN del.THETA[bad,*] = f                                          & $
  IF (bd GT 0) THEN del.ENERGY[bad,*] = f                                         & $
  g_string   = [(roundsig(minmax(g_en[eb]),SIG=2))[0],(roundsig(minmax(g_en[eb]),SIG=2))[1]]   & $
  estring    = STRTRIM(STRING(FORMAT='(f10.2)',g_string*1d0),2)                   & $
  estring    = '_'+STRTRIM(estring[0],2)+'-'+STRTRIM(estring[1],2)+'eV'           & $
  suffx      = estring+'_anti-Bfield-center_interp-no-low_DF'                     & $
  fname  = pdir+pref+gdate[j]+'_'+UTtime[j]+suffx                                 & $
  popen,fname,/PORT                                                               & $
    plot3d,dat,BNCENTER=-1,UNITS='df',EBINS=eb,EX_VEC=gnorm                       & $
  pclose


; => Pesa High Burst
myens      = dat_3dp_energy_bins(aphb[0])
myener     = myens.ALL_ENERGIES
zaphb      = aphb
nphb       = N_ELEMENTS(zaphb)
pref       = 'Pesa-High-Burst_Hammer-Aitoff_'
bdir       = '~/Desktop/3DP_contours/'+date[0]
pdir       = bdir+'/Hammer-Aitoff_Projections/Pesa_High_anti-Bfield-center/'
mts        = my_time_string(zaphb.TIME,UNIX=1)
ymdb       = mts.DATE_TIME
UTtime     = STRMID(ymdb[*],11L,2L)+STRMID(ymdb[*],14L,2L)+$
             STRMID(ymdb[*],17L,2L)+STRMID(ymdb[*],19L,3L)
gdate      = STRMID(ymdb[*],0L,10L)
eb         = [0L,10L]
FOR j=0L, nphb - 1L DO BEGIN                                                        $
  dat   = zaphb[j]                                                                & $
  del   = conv_units(dat,'df')                                                    & $
  g_en  = myener                                                                  & $
  bad   = WHERE(g_en LE del.SC_POT,bd,COMPLEMENT=good,NCOMPLEMENT=gd)             & $
  IF (bd GT 0) THEN del.DATA[bad,*] = f                                           & $
  IF (bd GT 0) THEN del.PHI[bad,*] = f                                            & $
  IF (bd GT 0) THEN del.THETA[bad,*] = f                                          & $
  IF (bd GT 0) THEN del.ENERGY[bad,*] = f                                         & $
  g_string   = [(roundsig(minmax(g_en[eb]),SIG=2))[0],(roundsig(minmax(g_en[eb]),SIG=2))[1]]   & $
  estring    = STRTRIM(STRING(FORMAT='(f10.2)',g_string*1d0),2)                   & $
  estring    = '_'+STRTRIM(estring[0],2)+'-'+STRTRIM(estring[1],2)+'eV'           & $
  suffx      = estring+'_anti-Bfield-center_interp-no-low_DF'                     & $
  fname  = pdir+pref+gdate[j]+'_'+UTtime[j]+suffx                                 & $
  popen,fname,/PORT                                                               & $
    plot3d,dat,BNCENTER=-1,UNITS='df',EBINS=eb,EX_VEC=gnorm                       & $
  pclose





;-----------------------------------------------------------------------------------------
; => Spherical Triangulation Stuff
;-----------------------------------------------------------------------------------------
x  = RANDOMN(seed, 50) 
y  = RANDOMN(seed, 50) 
z  = EXP(-(x^2 + y^2)) 
z2 = z
triangulate,x,y,fvalue=z2,sphere=sphere
help, sphere,/str
;** Structure <1a78434>, 3 tags, length=2600, data length=2600, refs=1:
;   XYZ             DOUBLE    Array[50, 3]
;   IEND            LONG      Array[50]
;   IADJ            LONG      Array[300]
print, minmax(sphere.XYZ[*,0])
;     -0.87568865      0.98094417
print, minmax(sphere.XYZ[*,1])
;     -0.96341718      0.99559519
print, minmax(sphere.XYZ[*,2])
;     -0.97294535      0.99985923
print, minmax(sphere.IEND)
;           4         288
print, minmax(sphere.IADJ)
;           0          50


qhull,x,y,tri,sphere=sphere2,/DELAUNAY,CONNECTIVITY=conn
help, tri, sphere2, conn
;TRI             LONG      = Array[3, 90]
;SPHERE2         DOUBLE    = Array[3, 51]
;CONN            LONG      = Array[330]

print, minmax(tri[0,*]), minmax(tri[1,*]), minmax(tri[2,*])
;           1          49
;           1          48
;           0          49
print, minmax(conn)
;           0         330
print, minmax(sphere2[0,*]),minmax(sphere2[1,*]),minmax(sphere2[2,*])
;       0.0000000      0.99999418
;    -0.036100690     0.046528731
;    -0.034728332     0.056150173

tsphere = {XYZ:TRANSPOSE(sphere2),IEND:,IADJ:}


; Create a dataset of N points.
n = 200
x = RANDOMU(seed, n)
y = RANDOMU(seed, n)
z = RANDOMU(seed, n)
; Create dependent variable.
f = x^2 - x*y + 1 
; Obtain a tetrahedra using the QHULL procedure.
QHULL, x, y, tet, /DELAUNAY 

; Create a volume with dimensions [51, 51, 51]
; over the unit cube.
volume = QGRID3(x, y, f, tet, START=0, DIMENSION=51, $
   DELTA=0.02)

; Display the volume.
XVOLUME, BYTSCL(volume)