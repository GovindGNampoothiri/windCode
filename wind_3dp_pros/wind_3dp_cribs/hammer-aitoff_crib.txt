;;----------------------------------------------------------------------------------------
;;  Constants and dummy variables
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
c              = 2.9979245800d+08         ;;  Speed of light in vacuum [m s^(-1), 2014 CODATA/NIST]
ckm            = c[0]*1d-3                ;;  m --> km
ckm2           = ckm[0]^2                 ;;  [(km/s)^2]
kB             = 1.3806485200d-23         ;;  Boltzmann Constant [J K^(-1), 2014 CODATA/NIST]
qq             = 1.6021766208d-19         ;;  Fundamental charge [C, 2014 CODATA/NIST]
epo            = 8.8541878170d-12         ;;  Permittivity of free space [F m^(-1), 2014 CODATA/NIST]
muo            = !DPI*4.00000d-07         ;;  Permeability of free space [N A^(-2) or H m^(-1), 2014 CODATA/NIST]
ma             = 6.6446572300d-27         ;;  Alpha particle mass [kg, 2014 CODATA/NIST]
me             = 9.1093835600d-31         ;;  Electron mass [kg, 2014 CODATA/NIST]
mn             = 1.6749274710d-27         ;;  Neutron mass [kg, 2014 CODATA/NIST]
mp             = 1.6726218980d-27         ;;  Proton mass [kg, 2014 CODATA/NIST]
;;  --> Define mass of particles in units of energy [eV]
ma_eV          = ma[0]*c[0]^2/qq[0]       ;;  ~3727.379378(23) [MeV, 2014 CODATA/NIST]
me_eV          = me[0]*c[0]^2/qq[0]       ;;  ~0.5109989461(31) [MeV, 2014 CODATA/NIST]
mn_eV          = mn[0]*c[0]^2/qq[0]       ;;  ~939.5654133(58) [MeV, 2014 CODATA/NIST]
mp_eV          = mp[0]*c[0]^2/qq[0]       ;;  ~938.2720813(58) [MeV, 2014 CODATA/NIST]
me_3dp         = me_eV[0]/ckm2[0]         ;;  Electron mass [eV/(km/s)^2]
mp_3dp         = mp_eV[0]/ckm2[0]         ;;  Proton mass [eV/(km/s)^2]
;;  Conversion Factors
f_1eV          = qq[0]/hh[0]              ;;  Freq. associated with 1 eV of energy [ Hz --> f_1eV*energy{eV} = freq{Hz} ]
J_1eV          = hh[0]*f_1eV[0]           ;;  Energy associated with 1 eV of energy [ J --> J_1eV*energy{eV} = energy{J} ]
K_eV           = qq[0]/kB[0]              ;;  Temp. associated with 1 eV of energy [11,604.5221 K/eV, 2014 CODATA/NIST --> K_eV*energy{eV} = Temp{K}]
eV_K           = kB[0]/qq[0]              ;;  Energy associated with 1 K Temp. [8.6173303 x 10^(-5) eV/K, 2014 CODATA/NIST --> eV_K*Temp{K} = energy{eV}]
beta_fac       = 1d6*(kB*K_eV)*(2d0*muo)

;;  Some defaults
vec_cols       = [250,150,50]
vec_labs       = ['x','y','z']
start_of_day_t = '00:00:00.000000000'
end___of_day_t = '23:59:59.999999999'
slash          = get_os_slash()       ;;  '/' for Unix, '\' for Windows

def_enlow      = [0L,7L]              ;;  Default range of energy bins to consider for plotting upstream distributions
def_enhigh     = [0L,6L]              ;;  " " downstream distributions
;;----------------------------------------------------------------------------------------
;;  Relevant Dates/Times
;;----------------------------------------------------------------------------------------
date           = '040396'
t              = ['1996-04-03/08:45:00','1996-04-03/10:45:00']
tramp          = '1996-04-03/09:47:17.152'

date           = '040896'
t              = ['1996-04-08/01:41:00','1996-04-08/03:41:00']
tramp          = '1996-04-08/02:41:09.767'

date           = '102497'
t              = ['1997-10-24/10:14:00','1997-10-24/12:14:00']
tramp          = '1997-10-24/11:18:10.114'

date           = '121097'
t              = ['1997-12-10/03:33:00','1997-12-10/05:33:00']
tramp          = '1997-12-10/04:33:14.664'

date           = '042398'
t              = ['1998-04-23/16:29:00','1998-04-23/18:29:00']
tramp          = '1998-04-23/17:29:02.445'

date           = '043098'
t              = ['1998-04-30/07:43:00','1998-04-30/09:43:00']
tramp          = '1998-04-30/08:43:15.291'

date           = '051598'
t              = ['1998-05-15/12:53:00','1998-05-15/14:53:00']
tramp          = '1998-05-15/13:53:46.079'

date           = '082698'
t              = ['1998-08-26/05:40:00','1998-08-26/07:40:00']  ;;  For moment writing
tramp          = '1998-08-26/06:40:24.972'

date           = '092498'
t              = ['1998-09-24/22:20:00','1998-09-25/00:20:00']
tramp          = '1998-09-24/23:20:37.000'

date           = '021100'
t              = ['2000-02-11/22:33:00','2000-02-12/00:33:00']
tramp          = '2000-02-11/23:33:55.319'
enlow  = [0L,7L]
enhigh = [0L,6L]

date           = '040600'
t              = ['2000-04-06/15:00:00','2000-04-06/18:00:00']  ;;  For moment writing
tramp          = '2000-04-06/16:32:09.237'
enlow  = [0L,7L]
enhigh = [0L,6L]

date           = '101101'
t              = ['2001-10-11/15:50:00','2001-10-11/17:50:00']
tramp          = '2001-10-11/16:50:55.000'

date           = '102101'
t              = ['2001-10-21/15:40:00','2001-10-21/17:40:00']
tramp          = '2001-10-21/16:40:43.000'

date           = '102501'
t              = ['2001-10-25/07:59:00','2001-10-25/09:59:00']
tramp          = '2001-10-25/08:59:28.000'

date           = '112401'
t              = ['2001-11-24/04:31:00','2001-11-24/06:51:00']
tramp          = '2001-11-24/05:51:55.000'



;;----------------------------------------------------------------------------------------
;;  Define Dates/Time Ranges
;;----------------------------------------------------------------------------------------
prec           = 3
tr3            = time_double(t)
tra_struc      = get_valid_trange(TRANGE=tr3,PRECISION=prec)
tra_3dp        = tra_struc.UNIX_TRANGE      ;;  Unix time range for entire interval (user defined)
tura           = time_double(tramp)         ;;  Unix time range of shock ramp (if relevant/present)
tra_str        = time_string(tra_3dp,PREC=prec)
tdate          = STRMID(tra_str[0],0L,10L)  ;;  e.g., 'YYYY-MM-DD'
date           = STRMID(tdate[0],5L,2L)+STRMID(tdate[0],8L)+STRMID(tdate[0],2L,2L)
;;----------------------------------------------------------------------------------------
;;  Load MFI data
;;----------------------------------------------------------------------------------------
mag3           = read_wind_mfi(TRANGE=tr3)
t3x            = mag3.MAG.X
bmag4          = mag3.MAG.Y
magf4          = mag3.BGSE.Y
nt             = N_ELEMENTS(t3x) 
store_data,'wi_B3_MAG',DATA={X:mag3.MAG.X,Y:bmag4}
store_data,'wi_B3_GSE',DATA={X:mag3.MAG.X,Y:magf4}
options,'wi_B3_GSE',YTITLE="B [nT, GSE]",COLORS=vec_cols,LABELS=vec_labs,$
                    YSUBTITLE="[3s Res.]"
options,'wi_B3_MAG',YTITLE="|B| [nT]",YSUBTITLE="[3s Res.]"
nn0            = ['wi_B3_MAG','wi_B3_GSE']

;;  Define default settings
nnw            = tnames()
options,nnw,YSTYLE=1,PANEL_SIZE=2e0,XMINOR=5,XTICKLEN=0.04,/DEF
;;----------------------------------------------------------------------------------------
;;  Get shock normal direction
;;----------------------------------------------------------------------------------------
sh_mit         = read_shocks_jck_database_new(/FINDBEST_METH)
;;  Define internal structures
gen_info_str   = test_bst.GEN_INFO
asy_info_str   = test_bst.ASY_INFO
bvn_info_str   = test_bst.BVN_INFO
key_info_str   = test_bst.KEY_INFO
ups_info_str   = test_bst.UPS_INFO
dns_info_str   = test_bst.DNS_INFO
;;  Define general info
tdates_bst     = gen_info_str.TDATES      ;;  e.g., 'YYYY-MM-DD'
rhmeth_bst     = gen_info_str.RH_METHOD   ;;  best numerical method for given event (e.g., 'RH08')
;;  Define Key Shock Analysis parameters
thetbn_up      = key_info_str.THETA_BN.Y        ;;  Shock normal angles [deg]
vshn___up      = ABS(key_info_str.VSHN_UP.Y)    ;;  Shock normal speed [km/s, SCF]
N2_N1__up      = ABS(key_info_str.NIDN_NIUP.Y)  ;;  Shock density compression ratio
n_uvecs        = bvn_info_str.SH_N_GSE.Y        ;;  Shock normal unit vector [GSE]
;;  Determine date-specific information
gshock         = WHERE(tdates_bst EQ tdate[0],gsh)
IF (gsh GT 0L) THEN gnorm = REFORM(n_uvecs[gshock[0],*]) ELSE gnorm = REPLICATE(f,3)
IF (gsh GT 0L) THEN compr = REFORM(N2_N1__up[gshock[0]]) ELSE compr = 0
;;----------------------------------------------------------------------------------------
;;  Find IDL Save Files
;;----------------------------------------------------------------------------------------
def_3dp_dir    = '.'+slash[0]+'wind_3dp_pros'+slash[0]
def_idlsavedir = def_3dp_dir[0]+'wind_data_dir'+slash[0]+'Wind_3DP_DATA'+slash[0]+'IDL_Save_Files'+slash[0]
def_data_loc   = FILE_EXPAND_PATH(def_idlsavedir[0]+date[0]+slash[0])

;default_extension = '/wind_3dp_pros/wind_data_dir/Wind_3DP_DATA/IDL_Save_Files/'
;default_location  = default_extension+date+'/'

DEFSYSV,'!wind3dp_umn',EXISTS=exists
test           = (KEYWORD_SET(exists) EQ 0)
IF (test[0]) THEN mdir = def_data_loc[0] ELSE $
                  mdir = !wind3dp_umn.WIND_3DP_SAVE_FILE_DIR+date[0]+slash[0]
test           = (mdir[0] EQ '')
IF (test[0]) THEN mdir = def_data_loc[0]
;;  Find files
mfiles         = FILE_SEARCH(mdir,'*.sav')
;;----------------------------------------------------------------------------------------
;;  Load 3DP ESA data
;;----------------------------------------------------------------------------------------
;;  Restore files if found
test_save      = (mfiles[0] NE '')
test_eesa      = test_save[0]
test_pesa      = test_save[0] AND (N_ELEMENTS(mfiles) GT 1)
test__sst      = test_save[0] AND (N_ELEMENTS(mfiles) GT 2)
IF (test_save[0] EQ 0) THEN PRINT,'No files found!'
IF (test_save[0] EQ 0) THEN STOP
IF (test_eesa[0]) THEN RESTORE,mfiles[0]
IF (test_pesa[0]) THEN RESTORE,mfiles[1]
;;----------------------------------------------------------------------------------------
;;  Load 3DP SST data (if present)
;;----------------------------------------------------------------------------------------
IF (test__sst[0]) THEN RESTORE,mfiles[2]

;;----------------------------------------------------------------------------------------
;;  Calculate ion and electron moments and send results to TPLOT
;;----------------------------------------------------------------------------------------
eesa_pesa_low_to_tplot,DATE=date,TRANGE=tra_3dp,/G_MAGF,PLM=apl,PLBM=aplb, $
                       ELM=ael,ELBM=aelb,/TO_TPLOT

;;----------------------------------------------------------------------------------------
;;  Plot 3D Hammer-Aitoff Projections for ESAs
;;----------------------------------------------------------------------------------------
;;  Define a machine-dependent directory into which the resulting PS files will be saved
;;    ***  Change accordingly  ***
bdir           = '~/Desktop/3DP_contours/'+date[0]
;;---------------------------------------
;;  Eesa Low
;;---------------------------------------
zaelb          = ael
nel            = N_ELEMENTS(zaelb)
pref           = 'Eesa-Low_Hammer-Aitoff_'
pdir           = bdir[0]+'/Hammer-Aitoff_Projections/Eesa_Low_anti-Bfield-center/'
suffx0         = '_anti-Bfield-center_interp-no-low_DF'
prec           = 3
ymdb           = time_string(zaelb.TIME,PREC=prec)
UTtime         = STRMID(ymdb[*],11L,2L)+STRMID(ymdb[*],14L,2L)+$
                 STRMID(ymdb[*],17L,2L)+STRMID(ymdb[*],19L,3L)
gdate          = STRMID(ymdb[*],0L,10L)
;;  Determine energy bin labels interactively
IF (N_ELEMENTS(enlow) NE 2)  THEN enlow  = def_enlow
IF (N_ELEMENTS(enhigh) NE 2) THEN enhigh = def_enhigh
FOR j=0L, nel[0] - 1L DO BEGIN                                                      $
  dat   = ael[j]                                                                  & $
  del   = dat                                                                     & $
  transform_vframe_3d,del,/EASY_TRAN,INTERP=1                                     & $
  g_en  = TOTAL(del.ENERGY,2,/NAN)/ TOTAL(FINITE(del.ENERGY),2,/NAN)              & $
  IF (del.END_TIME LE tura[0]) THEN eb = enlow ELSE eb = enhigh                   & $
  g_string   = [(roundsig(minmax(g_en[eb]),SIG=2))[0],(roundsig(minmax(g_en[eb]),SIG=2))[1]]   & $
  estring0   = STRTRIM(STRING(FORMAT='(f10.2)',g_string*1d0),2)                   & $
  estring    = '_'+STRTRIM(estring0[0],2)+'-'+STRTRIM(estring0[1],2)+'eV'         & $
  suffx      = estring[0]+suffx0[0]                                               & $
  fname      = pdir[0]+pref[0]+gdate[j]+'_'+UTtime[j]+suffx[0]                    & $
  popen,fname[0],/PORT                                                            & $
    plot3d,del,BNCENTER=-1,UNITS='df',EBINS=eb,EX_VEC=gnorm                       & $
  pclose
;;  The following are accounted for in transform_vframe_3d.pro...
;  del   = convert_vframe(dat,/INTERP)                                             & $
;  bad   = WHERE(g_en LE del.SC_POT,bd,COMPLEMENT=good,NCOMPLEMENT=gd)             & $
;  IF (bd GT 0) THEN del.DATA[bad,*] = f                                           & $
;  IF (bd GT 0) THEN del.PHI[bad,*] = f                                            & $
;  IF (bd GT 0) THEN del.THETA[bad,*] = f                                          & $
;  IF (bd GT 0) THEN del.ENERGY[bad,*] = f                                         & $

;;---------------------------------------
;;  Eesa Low Burst
;;---------------------------------------
zaelb          = aelb
nelb           = N_ELEMENTS(zaelb)
pref           = 'Eesa-Low-Burst_Hammer-Aitoff_'
suffx0         = '_anti-Bfield-center_interp-no-low_DF'
prec           = 3
ymdb           = time_string(zaelb.TIME,PREC=prec)
UTtime         = STRMID(ymdb[*],11L,2L)+STRMID(ymdb[*],14L,2L)+$
                 STRMID(ymdb[*],17L,2L)+STRMID(ymdb[*],19L,3L)
gdate          = STRMID(ymdb[*],0L,10L)
IF (N_ELEMENTS(enlow) NE 2)  THEN enlow  = def_enlow
IF (N_ELEMENTS(enhigh) NE 2) THEN enhigh = def_enhigh
FOR j=0L, nelb[0] - 1L DO BEGIN                                                     $
  dat   = aelb[j]                                                                 & $
  del   = dat                                                                     & $
  transform_vframe_3d,del,/EASY_TRAN,INTERP=1                                     & $
  g_en  = TOTAL(del.ENERGY,2,/NAN)/ TOTAL(FINITE(del.ENERGY),2,/NAN)              & $
  IF (del.END_TIME LE tura[0]) THEN eb = enlow ELSE eb = enhigh                   & $
  g_string   = [(roundsig(minmax(g_en[eb]),SIG=2))[0],(roundsig(minmax(g_en[eb]),SIG=2))[1]]   & $
  estring0   = STRTRIM(STRING(FORMAT='(f10.2)',g_string*1d0),2)                   & $
  estring    = '_'+STRTRIM(estring0[0],2)+'-'+STRTRIM(estring0[1],2)+'eV'         & $
  suffx      = estring[0]+suffx0[0]                                               & $
  fname      = pdir[0]+pref[0]+gdate[j]+'_'+UTtime[j]+suffx[0]                    & $
  popen,fname[0],/PORT                                                            & $
    plot3d,del,BNCENTER=-1,UNITS='df',EBINS=eb,EX_VEC=gnorm                       & $
  pclose

;;---------------------------------------
;;  Eesa High Burst [only exists after early 2000]
;;---------------------------------------
good           = WHERE(aehb.END_TIME LE tura[0],gd)
zaehb          = aehb[good]
nehb           = N_ELEMENTS(zaehb)
pref           = 'Eesa-High-Burst_Hammer-Aitoff_'
suffx0         = '_anti-Bfield-center_no-interp-no-low_DF'
pdir           = bdir[0]+'/Hammer-Aitoff_Projections/Eesa_High_anti-Bfield-center/'
prec           = 3
ymdb           = time_string(zaehb.TIME,PREC=prec)
UTtime         = STRMID(ymdb[*],11L,2L)+STRMID(ymdb[*],14L,2L)+$
                 STRMID(ymdb[*],17L,2L)+STRMID(ymdb[*],19L,3L)
gdate          = STRMID(ymdb[*],0L,10L)
eb             = [0L,11L]           ;;  Define useable energy bins
FOR j=0L, nehb[0] - 1L DO BEGIN                                                     $
  dat   = zaehb[j]                                                                & $
  del   = dat                                                                     & $
  transform_vframe_3d,del,/EASY_TRAN,INTERP=0                                     & $
  g_en  = TOTAL(del.ENERGY,2,/NAN)/ TOTAL(FINITE(del.ENERGY),2,/NAN)              & $
  g_string   = [(roundsig(minmax(g_en[eb]),SIG=2))[0],(roundsig(minmax(g_en[eb]),SIG=2))[1]]   & $
  estring0   = STRTRIM(STRING(FORMAT='(f10.2)',g_string*1d0),2)                   & $
  estring    = '_'+STRTRIM(estring0[0],2)+'-'+STRTRIM(estring0[1],2)+'eV'         & $
  suffx      = estring[0]+suffx0[0]                                               & $
  fname      = pdir[0]+pref[0]+gdate[j]+'_'+UTtime[j]+suffx[0]                    & $
  popen,fname[0],/PORT                                                            & $
    plot3d,del,BNCENTER=-1,UNITS='df',EBINS=eb,EX_VEC=gnorm                       & $
  pclose

;;---------------------------------------
;;  Pesa High Burst
;;---------------------------------------
myens          = dat_3dp_energy_bins(aphb[0])
myener         = myens.ALL_ENERGIES
zaphb          = aphb
nphb           = N_ELEMENTS(zaphb)
pref           = 'Pesa-High-Burst_Hammer-Aitoff_'
bdir           = '~/Desktop/3DP_contours/'+date[0]
pdir           = bdir[0]+'/Hammer-Aitoff_Projections/Pesa_High_anti-Bfield-center/'
suffx0         = '_anti-Bfield-center_no-interp-no-low_DF'
prec           = 3
ymdb           = time_string(zaphb.TIME,PREC=prec)
UTtime         = STRMID(ymdb[*],11L,2L)+STRMID(ymdb[*],14L,2L)+$
                 STRMID(ymdb[*],17L,2L)+STRMID(ymdb[*],19L,3L)
gdate          = STRMID(ymdb[*],0L,10L)
eb             = [0L,10L]
FOR j=0L, nphb[0] - 1L DO BEGIN                                                     $
  dat   = zaphb[j]                                                                & $
  del   = conv_units(dat,'df')                                                    & $
  g_en  = myener                                                                  & $
  bad   = WHERE(g_en LE del.SC_POT,bd,COMPLEMENT=good,NCOMPLEMENT=gd)             & $
  IF (bd GT 0) THEN del.DATA[bad,*] = f                                           & $
  IF (bd GT 0) THEN del.PHI[bad,*] = f                                            & $
  IF (bd GT 0) THEN del.THETA[bad,*] = f                                          & $
  IF (bd GT 0) THEN del.ENERGY[bad,*] = f                                         & $
  g_string   = [(roundsig(minmax(g_en[eb]),SIG=2))[0],(roundsig(minmax(g_en[eb]),SIG=2))[1]]   & $
  estring0   = STRTRIM(STRING(FORMAT='(f10.2)',g_string*1d0),2)                   & $
  estring    = '_'+STRTRIM(estring0[0],2)+'-'+STRTRIM(estring0[1],2)+'eV'         & $
  suffx      = estring[0]+suffx0[0]                                               & $
  fname      = pdir[0]+pref[0]+gdate[j]+'_'+UTtime[j]+suffx[0]                    & $
  popen,fname[0],/PORT                                                            & $
    plot3d,del,BNCENTER=-1,UNITS='df',EBINS=eb,EX_VEC=gnorm                       & $
  pclose
;;----------------------------------------------------------------------------------------
;;  Plot 3D Hammer-Aitoff Projections for SSTs
;;----------------------------------------------------------------------------------------
;;  Define a machine-dependent directory into which the resulting PS files will be saved
;;    ***  Change accordingly  ***
bdir           = '~/Desktop/3DP_contours/'+date[0]
;;  Setup plot3d.pro options
plot3d_options,MAP='ham',LOG =1,TRIANGULATE=1,COMPRESS=1,GRID=[30,30]

;;---------------------------------------
;;  SST Foil (i.e., electrons)
;;---------------------------------------
;;  Defines structures
tasf           = asf
nsf            = N_ELEMENTS(tasf)
eb             = [0,6]
;;  Determine energy bin values
g_ener         = TOTAL(tasf.ENERGY,3,/NAN)/ TOTAL(FINITE(tasf.ENERGY),3,/NAN)
eners          = REVERSE(TOTAL(g_ener,2,/NAN)/ TOTAL(FINITE(g_ener),2,/NAN))
g_string       = [(roundsig(minmax(eners[eb]),SIG=2))[0],(roundsig(minmax(eners[eb]),SIG=2))[1]]
estring0       = STRTRIM(STRING(FORMAT='(f10.1)',g_string*1d-3),2)     ;;  eV --> keV
IF (FLOAT(estring0[0]) LT 100.) THEN ss = 4 ELSE ss = 3
IF (FLOAT(estring0[1]) GT 1e3)  THEN mm = 4 ELSE mm = 3
estring        = '_'+STRMID(estring[0],0,ss[0])+'-'+STRMID(estring[1],0,mm[0])+'keV'
pdir           = bdir[0]+'/Hammer-Aitoff_Projections/SST_Foil_anti-Bfield-center/'
pref           = 'SST-Foil_Hammer-Aitoff_'
suffx0         = '_anti-Bfield-center_DF'
suffx          = estring[0]+suffx0[0]
prec           = 3
ymdb           = time_string(tasf.TIME,PREC=prec)
UTtime         = STRMID(ymdb[*],11L,2L)+STRMID(ymdb[*],14L,2L)+$
                 STRMID(ymdb[*],17L,2L)+STRMID(ymdb[*],19L,3L)
gdate          = STRMID(ymdb[*],0L,10L)
fname          = pdir[0]+pref[0]+gdate+'_'+UTtime+suffx[0]
FOR j=0L, nsf[0] - 1L DO BEGIN                                                      $
  dat   = tasf[j]                                                                 & $
  del   = dat                                                                     & $
  transform_vframe_3d,del,/EASY_TRAN,INTERP=0                                     & $
  popen,fname[j],/PORT                                                            & $
    plot3d,del,BNCENTER=-1,UNITS='df',EBINS=eb,EX_VEC=gnorm                       & $
  pclose

;;  ***  Note  ***
;;    plot3d.pro allows for an explicit forcing of the ZRANGE variable for direction
;;      comparison between multiple distributions, if the user so wishes.  The keyword
;;      is passed as a [2]-element array (i.e., [low,high]) defining the range of values
;;      to use when defining the color scale [unit-dependent].


;;---------------------------------------
;;  SST Open (i.e., electrons)
;;---------------------------------------
;;  Defines structures
taso           = aso
nso            = N_ELEMENTS(taso)
eb             = [0,8]             ;;  indices of energy bins to use
;;  Determine energy bin values
g_ener         = TOTAL(taso.ENERGY,3,/NAN)/ TOTAL(FINITE(taso.ENERGY),3,/NAN)
eners          = REVERSE(TOTAL(g_ener,2,/NAN)/ TOTAL(FINITE(g_ener),2,/NAN))
g_string       = [(roundsig(minmax(eners[eb]),SIG=2))[0],(roundsig(minmax(eners[eb]),SIG=2))[1]]
estring0       = STRTRIM(STRING(FORMAT='(f10.1)',g_string*1d-3),2)     ;;  eV --> keV
IF (FLOAT(estring0[0]) LT 100.) THEN ss = 4 ELSE ss = 3
IF (FLOAT(estring0[1]) GT 1e3)  THEN mm = 4 ELSE mm = 3
estring        = '_'+STRMID(estring[0],0,ss[0])+'-'+STRMID(estring[1],0,mm[0])+'keV'
pdir           = bdir[0]+'/Hammer-Aitoff_Projections/SST_Open_anti-Bfield-center/'
pref           = 'SST-Open_Hammer-Aitoff_'
suffx0         = '_anti-Bfield-center_DF'
suffx          = estring[0]+suffx0[0]
prec           = 3
ymdb           = time_string(taso.TIME,PREC=prec)
UTtime         = STRMID(ymdb[*],11L,2L)+STRMID(ymdb[*],14L,2L)+$
                 STRMID(ymdb[*],17L,2L)+STRMID(ymdb[*],19L,3L)
gdate          = STRMID(ymdb[*],0L,10L)
fname          = pdir[0]+pref[0]+gdate+'_'+UTtime+suffx[0]
FOR j=0L, nso[0] - 1L DO BEGIN                                                      $
  dat   = taso[j]                                                                 & $
  del   = dat                                                                     & $
  transform_vframe_3d,del,/EASY_TRAN,INTERP=0                                     & $
  popen,fname[j],/PORT                                                            & $
    plot3d,del,BNCENTER=-1,UNITS='df',EBINS=eb,EX_VEC=gnorm                       & $
  pclose







;;----------------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------------
;;  Spherical Triangulation Notes
;;----------------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------------
;;----------------------------------------------------------------------------------------
x  = RANDOMN(seed, 50) 
y  = RANDOMN(seed, 50) 
z  = EXP(-(x^2 + y^2)) 
z2 = z
triangulate,x,y,fvalue=z2,sphere=sphere
help, sphere,/str
;** Structure <1a78434>, 3 tags, length=2600, data length=2600, refs=1:
;   XYZ             DOUBLE    Array[50, 3]
;   IEND            LONG      Array[50]
;   IADJ            LONG      Array[300]
print, minmax(sphere.XYZ[*,0])
;     -0.87568865      0.98094417
print, minmax(sphere.XYZ[*,1])
;     -0.96341718      0.99559519
print, minmax(sphere.XYZ[*,2])
;     -0.97294535      0.99985923
print, minmax(sphere.IEND)
;           4         288
print, minmax(sphere.IADJ)
;           0          50


qhull,x,y,tri,sphere=sphere2,/DELAUNAY,CONNECTIVITY=conn
help, tri, sphere2, conn
;TRI             LONG      = Array[3, 90]
;SPHERE2         DOUBLE    = Array[3, 51]
;CONN            LONG      = Array[330]

print, minmax(tri[0,*]), minmax(tri[1,*]), minmax(tri[2,*])
;           1          49
;           1          48
;           0          49
print, minmax(conn)
;           0         330
print, minmax(sphere2[0,*]),minmax(sphere2[1,*]),minmax(sphere2[2,*])
;       0.0000000      0.99999418
;    -0.036100690     0.046528731
;    -0.034728332     0.056150173

tsphere = {XYZ:TRANSPOSE(sphere2),IEND:,IADJ:}


; Create a dataset of N points.
n = 200
x = RANDOMU(seed, n)
y = RANDOMU(seed, n)
z = RANDOMU(seed, n)
; Create dependent variable.
f = x^2 - x*y + 1 
; Obtain a tetrahedra using the QHULL procedure.
QHULL, x, y, tet, /DELAUNAY 

; Create a volume with dimensions [51, 51, 51]
; over the unit cube.
volume = QGRID3(x, y, f, tet, START=0, DIMENSION=51, $
   DELTA=0.02)

; Display the volume.
XVOLUME, BYTSCL(volume)