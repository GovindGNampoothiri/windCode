;+
;*****************************************************************************************
;
;  PROCEDURE:   thm_convert_esa_units_lbwiii.pro
;  PURPOSE  :   Converts the data of THEMIS ESA data structure to the user defined
;                 units.  The input data structure tags DATA, DDATA, and UNITS_NAME are
;                 altered by this routine.
;
;  CALLED BY:   
;               conv_units.pro
;
;  CALLS:
;               test_themis_esa_struc_format.pro
;               dprint.pro
;               time_string.pro
;               find_str_element.pro
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               DATA               :  [N]-element array of THEMIS ESA data structures
;               UNITS              :  Scalar [string] defining to which the units to
;                                       convert.  The following inputs are allowed:
;                                         'compressed'  ;  # of counts
;                                         'counts'      ;  # of counts
;                                         'rate'        ;  [s^(-1)]
;                                         'crate'       ;  [s^(-1)] scaled rate
;                                         'eflux'       ;  energy flux
;                                         'flux'        ;  number flux
;                                         'df'          ;  phase space density
;
;  EXAMPLES:    
;               NA
;
;  KEYWORDS:    
;               SCALE              :  Set to a named variable to return the conversion
;                                       factor array used to scale the data
;               FRACTIONAL_COUNTS  :  If set, routine will allow for counts to be
;                                       rounded to nearest whole count.  Set this if
;                                       DATA is a copy being used to estimate the
;                                       one-count level.
;                                       [Default = FALSE]
;
;   CHANGED:  1)  Davin Larson created                             [??/??/????   v1.0.0]
;             2)  Re-wrote, cleaned up, and vectorized allowing for arrays of input
;                   data structures                                [03/13/2012   v1.1.0]
;             3)  Updated man page and fixed dimensional issue with matrix multiplication
;                                                                  [03/14/2012   v1.1.1]
;             4)  Updated to allow for input structures with pre-defined DEADTIME
;                   structure tag values introduced by the routine
;                   themis_esa_pad.pro
;                                                                  [08/15/2012   v1.2.0]
;             5)  Added keyword:  FRACTIONAL_COUNTS
;                                                                  [09/12/2014   v1.3.0]
;
;   NOTES:      
;               1)  Original version can be found in TDAS ?.?.? release,
;                     called:  thm_convert_esa_units.pro
;               2)  If you wish to calculate the one-count level, then it is wise to
;                     use the FRACTIONAL_COUNTS keyword during that process as the
;                     deadtime correction will cause sub-unity levels to round to zero,
;                     which is useless.
;
;   ADAPTED FROM:  thm_convert_esa_units.pro
;   CREATED:  ??/??/????
;   CREATED BY:  Davin Larson
;    LAST MODIFIED:  09/12/2014   v1.3.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-

PRO thm_convert_esa_units_lbwiii,data,units,SCALE=scale,FRACTIONAL_COUNTS=fractional_counts

;;----------------------------------------------------------------------------------------
;;  Define some constants and dummy variables
;;----------------------------------------------------------------------------------------
f              = !VALUES.F_NAN
d              = !VALUES.D_NAN
notstr_mssg    = 'Must be an IDL structure...'
badstr_themis  = 'Not an appropriate THEMIS ESA structure...'

cc3d           = FINDGEN(256)
;;----------------------------------------------------------------------------------------
;;  Check input
;;----------------------------------------------------------------------------------------
IF (N_PARAMS() LT 2) THEN RETURN
str  = data[0]   ; => in case it is an array of structures of the same format
IF (SIZE(str,/TYPE) NE 8L) THEN BEGIN
  MESSAGE,notstr_mssg,/INFORMATIONAL,/CONTINUE
  RETURN
ENDIF
;;  check to make sure input is a THEMIS ESA structure
test = test_themis_esa_struc_format(str) NE 1
IF (test) THEN RETURN
;;  check to make sure user is actually changing units
IF (STRUPCASE(units) EQ STRUPCASE(data[0].UNITS_NAME)) THEN RETURN
;;----------------------------------------------------------------------------------------
;;  These are vectorized for array of data structures
;;----------------------------------------------------------------------------------------
n_e      = data[0].NENERGY            ;;  Number of energy bins
nbins    = data[0].NBINS              ;;  Number of angle bins
n_str    = N_ELEMENTS(data)           ;;  Number of data structures
energy   = data.ENERGY                ;;  [n_e,nbins,n_str]-Element array of energies (eV)
;;  Define the total geometry factor of the detector [cm^2 sr]
gf_facs  = FLTARR(n_e,nbins,n_str)
mass     = FLTARR(n_e,nbins,n_str)    ;; Particle mass [eV/c^2, with c in km/s]
dt       = DBLARR(n_e,nbins,n_str)    ;; total accumulation times [s]
;;  check for DEADTIME tag
IF (find_str_element(data[0],'deadtime') GE 0) THEN BEGIN
  ;;  Define A121 preamp dead time [s]
  dead  = data.DEADTIME
  gdead = 1
ENDIF ELSE BEGIN
  dead  = FLTARR(n_e,nbins,n_str)
  gdead = 0
ENDELSE

FOR j=0L, n_str - 1L DO BEGIN
  gf_facs[*,*,j] = data[j].GEOM_FACTOR[0]
  ;;  Define the average time needed for the 1024 counter readouts per spin [s]
  ;;      [= (data.END_TIME - data.TIME)/1024.]
  dt[*,*,j]      = data[j].INTEG_T[0]
  IF (gdead NE 1) THEN BEGIN
    ;;  Define A121 preamp dead time [s]
    dead[*,*,j]    = data[j].DEAD[0]
  ENDIF
  ;;  Define Particle mass [eV/(km/sec)^2]
  mass[*,*,j]    = data[j].MASS[0]
ENDFOR
gf       = gf_facs*data.GF*data.EFF
;;  Define anode accumulation times per bin for rate and dead time corrections
dt_arr   = data.DT_ARR
;;----------------------------------------------------------------------------------------
;;  Define scale factors to new units
;;----------------------------------------------------------------------------------------
old_unit = data[0].UNITS_NAME
new_unit = units[0]
scale    = 1.
CASE STRUPCASE(old_unit[0]) OF
  'COMPRESSED'  :  sfact = 1.
  'COUNTS'      :  sfact = 1.
  'RATE'        :  sfact = 1. * dt * dt_arr                  ;;  s^(-1)
  'CRATE'       :  sfact = 1. * dt * dt_arr                  ;;  s^(-1) [corrected for dead time rate]
  'EFLUX'       :  sfact = 1. * gf                           ;;  eV cm^(-2) s^(-1) sr^(-1) eV^(-1)
  'FLUX'        :  sfact = 1. * gf * energy                  ;;  # cm^(-2) s^(-1) sr^(-1) eV^(-1)
  'DF'          :  sfact = 1. * gf * energy^2 * 2e5/mass^2   ;;  cm^(-3) km^(3) s^(-3)
  ELSE          : BEGIN
    MESSAGE,'Undefined units: ',old_unit[0]
    RETURN
  END
ENDCASE
scale *= sfact
;;----------------------------------------------------------------------------------------
;;  Convert to counts
;;----------------------------------------------------------------------------------------
tmp      = data.DATA
IF (STRUPCASE(old_unit[0]) EQ 'COMPRESSED') THEN tmp = cc3d(BYTE(tmp))
tmp     *= scale
;;----------------------------------------------------------------------------------------
;;  Remove dead time corrections
;;----------------------------------------------------------------------------------------
test     = (STRUPCASE(old_unit[0]) NE 'COUNTS') AND (STRUPCASE(old_unit[0]) NE 'RATE') $
            AND (STRUPCASE(old_unit[0]) NE 'COMPRESSED')
;IF (test) THEN tmp = ROUND( (dt*tmp)/(1e0 + (tmp*dead)/dt_arr) )
;;    --> LBW III  09/12/2014   v1.3.0
IF (test) THEN BEGIN
  IF KEYWORD_SET(fractional_counts) THEN BEGIN
    tmp = (dt*tmp)/(1e0 + (tmp*dead)/dt_arr)
  ENDIF ELSE BEGIN
    tmp = ROUND( (dt*tmp)/(1e0 + (tmp*dead)/dt_arr) )
  ENDELSE
ENDIF
;	tmp = (dt*tmp/(1.+tmp*dead/dt_arr))
;;----------------------------------------------------------------------------------------
;;  Define scale factors for new units
;;----------------------------------------------------------------------------------------
CASE STRUPCASE(new_unit[0]) OF 
  'COMPRESSED'  :  sfact = 1.
  'COUNTS'      :  sfact = 1.
  'RATE'        :  sfact = 1. / (dt * dt_arr)
  'CRATE'       :  sfact = 1. / (dt * dt_arr)
  'EFLUX'       :  sfact = 1. / (dt * gf)
  'FLUX'        :  sfact = 1. / (dt * gf * energy)
  'DF'          :  sfact = 1. / (dt * gf * energy^2 * 2e5/mass^2)
  ELSE: BEGIN
    MESSAGE,'Undefined units: ',new_unit[0]
    RETURN
  END
ENDCASE
scale  = sfact
;;----------------------------------------------------------------------------------------
;;  Dead time correct data if not counts or rate
;;----------------------------------------------------------------------------------------
test     = (STRUPCASE(new_unit[0]) NE 'COUNTS') AND (STRUPCASE(new_unit[0]) NE 'RATE') $
            AND (STRUPCASE(new_unit[0]) NE 'COMPRESSED')
IF (test) THEN BEGIN
  ;;--------------------------------------------------------------------------------------
  ;;  correct for dead time
  ;;--------------------------------------------------------------------------------------
  denom = 1. - (dead/dt_arr)*(tmp/dt)
  tmp2  = FLTARR(n_e,nbins,n_str)
  FOR j=0L, n_str - 1L DO BEGIN
    void  = WHERE(denom[*,*,j] LT .1,count)
    IF (count GT 0) THEN BEGIN
      dprint,DLEVEL=1,MIN(denom[*,*,j],ind)
      denom[*,*,j] = denom[*,*,j] > .1            ;;  force all to be > 0.1
      ;;  print error messages
      dprint,DLEVEL=1,' Error: convert_peace_units dead time error.'
      dprint,DLEVEL=1,' Dead time correction limited to x10 for ',count,' bins'
      dprint,DLEVEL=1,' Time= ',time_string(data[j].TIME[0],/MSEC)
    ENDIF
  ENDFOR
  tmp2 = tmp/denom
ENDIF ELSE BEGIN
  ;;--------------------------------------------------------------------------------------
  ;;  do not correct for dead time
  ;;--------------------------------------------------------------------------------------
  tmp2 = tmp
ENDELSE
;;----------------------------------------------------------------------------------------
;;  Scale to new units
;;----------------------------------------------------------------------------------------
data.UNITS_NAME = units[0]
IF (find_str_element(data,'ddata') GE 0) THEN data.DDATA = scale * tmp2^(1./2.)

IF (STRUPCASE(new_unit[0]) EQ 'COMPRESSED') THEN BEGIN
  ;;--------------------------------------------------------------------------------------
  ;;  go to compressed units
  ;;--------------------------------------------------------------------------------------
  ind   = WHERE(tmp2 GE 0.,npts)
  ntmp  = N_ELEMENTS(tmp2)
  IF (npts GT 0) THEN BEGIN
    FOR j=0L, npts - 1L DO BEGIN
      minval       = MIN(ABS(cc3d - tmp2[ind[j]]),jj)
      tmp2[ind[j]] = jj[0]
    ENDFOR
  ENDIF
  ;;--------------------------------------------------------------------------------------
  ;;  Check for zeroed elements
  ;;--------------------------------------------------------------------------------------
  IF (npts NE ntmp) THEN BEGIN
    ;;  Set zeroed elements to 255
    tmp3 = INTARR(ntmp)
    IF (npts GT 0) THEN tmp3[ind] = 1
    ind2 = WHERE(tmp3 EQ 0,in2)
    IF (in2 GT 0) THEN tmp2[ind2] = 255
  ENDIF
ENDIF
;;----------------------------------------------------------------------------------------
;;  Redefine data and return to user
;;----------------------------------------------------------------------------------------
data.DATA = scale * tmp2

RETURN
END
