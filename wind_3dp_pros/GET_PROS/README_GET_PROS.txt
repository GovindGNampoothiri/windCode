Last Modification =>  2008-06-25/00:33:44 UTC
;+
;FUNCTION get_3d_struct, time
;INPUTS:
;    t:    double  (seconds since 1970.,  >1990)
; or t:    string  (format: YY-MM-DD/HH:MM:SS)
; or t:    numeric (hours from reference date. < )
; or t:    string  (format: HH:MM:SS hours from reference date)
; options: intarray  (only first element is considered to determine instrument)
;KEYWORDS: advance:	if set, advance to the next time 
;OUTPUT:  A structure that contains all pertinent information for a single
;   3D sample.
;
;CREATED BY:	Davin Larson
;LAST MODIFICATION:	@(#)get_3d_struct.pro	1.32 98/10/02
;
;NOTE: This routine should NOT be called by users.  Should only be called by one
; of the routines:  get_el, get_eh, get_ph, get_pl, get_sf, get_so
; e.g. "get_el"
;
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;PROGRAM:	get_3dt(funct,get_dat,ERANGE=erange,BINS=bins,NAME=name)
;INPUT:	
;	funct:	function,	function that operates on structures generated 
;					by get_pl, get_el, etc.
;				e.g. "get_el"
;
;				funct   = 'n_3d','j_3d','v_3d','p_3d','t_3d',
;					  'vth_3d', or 'c_3d'
;				"n_3d"
;				"j_3d"
;				"v_3d"
;				"p_3d"
;				"t_3d"
;				"vth_3d"
;				"c_3d"
;	get_dat:function,	function that returns 3d data structures
;				function name must be "get_"+"get_dat"  
;				get_dat = 'pl' for get_pl, 
;				get_dat = 'el' for get_el, etc.
;KEYWORDS:
;	erange:	fltarr(2),	optional, min,max energy bin numbers for integration
;	bins:	bytarr(nbins),	optional, angle bins for integration, see edit3dbins.pro
;				0,1=exclude,include,  nbins = temp.nbins
;	name:	string		New name of the Data Quantity
;				Default: funct+'_'+get_dat
;       times:  dblarr(1or2)or  Specifies start time (and end time)
;               strarr(1or2)   
;       index:  lonarr(1 or 2)  Specifies starting index (and ending index)
;                               keyword time overrides keyword index
;PURPOSE:
;	To generate time series data for "tplot" 
;NOTES:	
;	Program names time series data to funct+"_"+get_dat.
;		See "tplot_names".
;
;CREATED BY:    J.McFadden
;LAST MODIFICATION:  01/05/09
;FILE:   @(#)get_3dt.pro	1.13
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;FUNCTION; get_bkg3d,dat
;PURPOSE:  Uses energy steps defined by esteps array,  computes average 
;  count rate in those steps and then copies that average value into all
;  data values.  Each angle bin is treated separately.  The result can be
;  used for background subtraction.
;
;INPUT:  
;	dat:	3d data structure such as is generated by 
;		"get_el" and other get routines
;KEYWORDS
;	ESTEPS:	Two element array of integers that corresponds to the first
;           and last energy steps to be used.  (default is [0,3])
;
;CREATED BY:	Davin Larson
;LAST MODIFICATION:	@(#)get_bkg3d.pro	1.9 02/04/17
;
;WARNING!  This is a crude subroutine. Use at your own risk.
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;PROGRAM:	get_bsn2,PNAME=pname,BNAME=bname,VNAME=vname,BOW=bow,
;			intpos=intpos
;
;INPUT OPTIONS 
;	pname:	string,		Name of orbital position structure
;				Default is 'wi_pos'
;	bname:	string,		Name of magnetic field structure  
;				Default is 'wi_B3'
;	vname:  string,		Name of solar wind velocity structure
;				Default is 'wi_pm_Vp'
;	bow:	structure	Bow Shock parameters
;				Default bow={standoff:23.5,eccentricity:1.15,x_offset:3.0}
;PURPOSE:
;	Generates tplot structures for intersection of Bow Shock and s/c B-field line.
;	Generates the following structures:
;               th_bn: the angle (in degrees) between shock normal and the
;                       field line that passes through the spacecraft
;               l1: the distance along the field line to the shock
;               l2: the distance from a point that is missdist from the
;                       spacecraft in x to the tangent point
;               d,m: the distance along x from the spacecraft to a point
;                       where the B field line would be tangent to the
;                       bow shock.  A positive d means that the field
;                       line has already intersected the shock.  A positive
;			m indicates that the field line has not yet intersected
;                       the shock.
;       All distances are in Re. l1 and l2 are negative if the field line is
;	anti-parallel to the vector connecting the spacecraft and the point
;	of field line intersection.
;OPTIONAL OUTPUT:
;	intpos:	array of position vectors giving points where bow shock
;		intersects B field line that passes through spacecraft
;CREATED BY:
;	P.Schroeder
;LAST MODIFICATION:
;	@(#)get_bsn2.pro	1.5 02/04/17
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;FUNCTION:    get_colors
;PURPOSE:   returns a structure containing color pixel values
;INPUT:    none
;KEYWORDS:   
;   NOCOLOR:  forces all colors to !d.table_size-1.   
;
;Written by: Davin Larson    96-01-31
;FILE: get_colors.pro
;VERSION:  1.2
;LAST MODIFICATION: 99/04/07
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;NAME:		get_counts
;PURPOSE:	used to get counts for 0, 90, 180 degrees
;
;		This function is called by get_en_pa_spec and the like
;CREATED BY:	Arjun Raj (8-15-97)
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;PROCEDURE:  get_data , name, time, data, values
;PURPOSE:   
;   Retrieves the data and or limit structure associated with a name handle.
;   This procedure is used by the "TPLOT" routines.
;INPUT:  name    scalar string or index of TPLOT variable
;        time	 named variable to return time values.
;        data    named variable to return data (y) values.
;        values  named variable to return additional (v) values.
;KEYWORDS:   
;   DATA:   named variable to hold the data structure.
;   LIMITS: named variable to hold the limits structure.
;   DLIMITS: named variable to hold the default limits structure.
;   ALIMITS: named variable to hold the combined limits and default limits
;            structures.
;   DTYPE: named variable to hold the data type value.  These values are:
;		0: undefined data type
;		1: normal data in x,y format
;		2: structure-type data in time,y1,y2,etc. format
;		3: an array of tplot variable names
;   PTR:   named variable to hold pointers to data structure.
;   INDEX:  named variable to hold the name index.  This value will be 0
;     if the request was unsuccessful.
;
;SEE ALSO:	"STORE_DATA", "TPLOT_NAMES", "TPLOT"
;
;CREATED BY:	Davin Larson
;MODIFICATION BY: 	Peter Schroeder
;LAST MODIFICATION:	@(#)get_data.pro	1.28 02/04/17
;
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;PROCEDURE: 	get_eatod
;PURPOSE:
;  Gets analog to digital data for EESA
;INPUT:	
;  none, but "load_3dp_data" must be called 1st.
;KEYWORDS:
;  DATA:  named variable in which all data is returned.
;
;CREATED BY:	Davin Larson
;FILE:  get_eatod.pro
;VERSION:  1.6
;LAST MODIFICATION:  01/06/06
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;FUNCTION:   get_ecfg(t)
;INPUT:
;    t: double,  seconds since 1970.
;KEYWORDS:
;	advance:	advance to the next data point
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return an array of data times 
;			corresponding to data samples.
;PURPOSE:   returns an Eesa Instrument Configuration data record.
;
;CREATED BY:	Peter Schroeder
;LAST MODIFIED: @(#)get_ecfg.pro	1.1 99/04/19
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;FUNCTION:   get_eh(t)
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector then the
;	routine will get all samples in between the two times in the 
;	vector
;KEYWORDS:
;	advance:	advance to the next data point
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return and array of data times 
;			corresponding to data samples.
;PURPOSE:   returns a 3d structure containing all data pertinent to a single
;  eesa high 3d sample.  See "3D_STRUCTURE" for a more complete 
;  description of the structure.
;
;CREATED BY:	Peter Schroeder
;LAST MODIFIED: @(#)get_eh.pro	1.23 99/03/02
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;FUNCTION:   get_ehb(t)
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector then the
;	routine will get all samples in between the two times in the 
;	vector
;KEYWORDS:
;	advance:	advance to the next data point
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return and array of data times 
;			corresponding to data samples.
;PURPOSE:   returns a 3d structure containing all data pertinent to a single
;  eesa high burst 3d sample.  See "3D_STRUCTURE" for a more complete 
;  description of the structure.
;
;CREATED BY:	Peter Schroeder
;LAST MODIFIED: @(#)get_ehb.pro	1.1 99/09/20
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;FUNCTION:   get_ehs(t)
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector then the
;	routine will get all samples in between the two times in the 
;	vector
;KEYWORDS:
;	advance:	advance to the next data point
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return an array of data times 
;			corresponding to data samples.
;PURPOSE:   returns a 3d structure containing all data pertinent to a single
;  eesa high slice 3d sample.  See "3D_STRUCTURE" for a more complete 
;  description of the structure.
;
;CREATED BY:	Peter Schroeder
;LAST MODIFIED: @(#)get_ehs.pro	1.8 99/03/02
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;FUNCTION:   get_el(t)
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector then the
;	routine will get all samples in between the two times in the 
;	vector
;KEYWORDS:
;	advance:	advance to the next data point
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return an array of data times 
;			corresponding to data samples.
;PURPOSE:   returns a 3d structure containing all data pertinent to a single
;  eesa low 3d sample.  See "3D_STRUCTURE" for a more complete 
;  description of the structure.
;
;CREATED BY:	Peter Schroeder
;LAST MODIFIED: @(#)get_el.pro	1.29 99/05/06
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;FUNCTION:   get_el2(t)
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector then the
;       routine will get all samples in between the two times in the 
;       vector
;KEYWORDS:
;       index:          select data by sample index instead of by time.
;       times:          if non-zero, return an array of data times 
;                       corresponding to data samples.
;PURPOSE:   returns a 3d structure containing all data pertinent to a single
;  eesa low or eesa low burst 3d sample.  See "3D_STRUCTURE" for a more complete 
;  description of the structure.
;
;CREATED BY:    Art Hull
;LAST MODIFIED: @(#)get_el2.pro	1.1 99/08/24
;
;NOTES: The procedure "load_3dp_data" must be 
;       called first.
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;Name:		get_el_eh_spec
;Call:		get_el_eh_spec,'19:49',[keywords]
;Purpose:	To plot energy vs. pitch angle vs. counts at a specific time
;		Also can plot line plots at certain energies or 0, 90, and 180 deg.
;		Like get_en_pa_spec, but can show eesa Low and eesa High at the same time
;Keywords:	nofix:  tells the program not "clump" the data
;		nsteps: specifies the number of chunks used to fix the data
;			if not specified, uses 18
;		xrange: specifies the energy spectrum range
;			if not specified, uses all energies from instrument
;		range:  specifies the color axis range
;			default is the range of counts
;		THEBDATA: specifies b data to use (def is B3_gse)
;		nozl:	makes the color axis linear (log is def.)
;		units:  specifies the units
;			default is eflux
;		subtr:	for the line plots, subtracts the 90 deg data
;			from the 0 and 180.
;		angran:	sets the range of angles to include for the line plots
;			default is 30.
;		specsu:	subtracts the value at 90 deg (using angran) from the	
;			entire spectrogram
;		noline:	suppresses the line plots of energy
;		energi:	a vector of energies which will generate line plots of
;			pitch angle vs. counts. (This is not really supported anymore)
;		var_la:	vector of tplot variables to put on plot
;		noB3:	doesn't use high resolution magnetic field data
;		nosun:  suppresses the sun direction line
;		cutoff:	the cutoff energy between el and eh.
;			goes to the next lowest el energy bin and makes that the cutoff
;		advanc:	advances the time.
;		pick:	allows user to pick time of a tplot window
;Output:	The plot
;Last Modified by:	Arjun Raj (3-3-98)
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;FUNCTION:   get_elb(t)
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector then the
;	routine will get all samples in between the two times in the 
;	vector
;KEYWORDS:
;	advance:	advance to the next data point
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return and array of data times 
;			corresponding to data samples.
;PURPOSE:   returns a 3d structure containing all data pertinent to a single
;  eesa low 3d sample.  See "3D_STRUCTURE" for a more complete 
;  description of the structure.
;
;CREATED BY:	Peter Schroeder
;LAST MODIFIED:	@(#)get_elb.pro	1.13 99/03/02
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;FUNCTION:   get_elc(t)
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector then the
;	routine will get all samples in between the two times in the 
;	vector
;KEYWORDS:
;	advance:	advance to the next data point
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return an array of data times 
;			corresponding to data samples.
;PURPOSE:   returns a 3d structure containing all data pertinent to a single
;  eesa low cut 3d sample.  See "3D_STRUCTURE" for a more complete 
;  description of the structure.
;
;CREATED BY:	Peter Schroeder
;LAST MODIFIED: @(#)get_elc.pro	1.10 99/03/02
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;FUNCTION:   get_elm(t)
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector then the
;	routine will get all samples in between the two times in the 
;	vector
;KEYWORDS:
;	advance:	advance to the next data point
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return and array of data times 
;			corresponding to data samples.
;PURPOSE:   returns a 3d structure containing all data pertinent to a single
;  eesa low 3d sample.  See "3D_STRUCTURE" for a more complete 
;  description of the structure.
;
;CREATED BY:	Peter Schroeder
;LAST MODIFIED:	@(#)get_elm.pro	1.6 99/03/02
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;PROCEDURE:	get_emom
;PURPOSE:	Gets moment data for eesa, including velocity,density,and 
;		temperature.
;INPUT:	
;	none, but "load_3dp_data" must be called 1st.
;KEYWORDS:
;	dens:	Optionally returns density directly as well as storing it.
;	temp:	Optionally returns temperature directly as well as storing it.
;	vx:	Optionally returns vx directly as well as storing it.
;	vy:	Optionally returns vy directly as well as storing it.
;	vz:	Optionally returns vz directly as well as storing it.
;	pe:	Optionally returns Pe directly as well as storing it.
;	qe:	Optionally returns Qe directly as well as storing it.
;
;CREATED BY:	Davin Larson
;LAST MODIFICATION:	@(#)get_emom.pro	1.9 97/09/08
;
;
; MODIFIED BY: Lynn B. Wilson III
;  DATE MODIFIED: 06-13-2007
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;PROCEDURE:	get_emom2
;PURPOSE:	
;  Gets eesa moment structure.
;INPUT:	
;	none, but "load_3dp_data" must be called 1st.
;KEYWORDS:
;   POLAR
;   VTHERMAL
;CREATED BY:	Davin Larson
;FILE:  get_emom2.pro
;VERSION:  1.3
;LAST MODIFICATION:  97/11/14
;
;
; MODIFIED BY: Lynn B. Wilson III
;  DATE MODIFIED: 06-13-2007
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;Name:		get_en_pa_spec
;Call:		get_en_pa_spec,get_el('19:49'),[keywords]
;Purpose:	To plot energy vs. pitch angle vs. counts at a specific time
;		Also can plot line plots at certain energies or 0, 90, and 180 deg.
;Keywords:	nofix:  tells the program not "clump" the data
;		nsteps: specifies the number of chunks used to fix the data
;			if not specified, uses 18
;		THEBDATA: specifies b data to use (def is B3_gse)
;		xrange: specifies the energy spectrum range
;			if not specified, uses all energies from instrument
;		range:  specifies the color axis range
;			default is the range of counts
;		nozl:	makes the color axis linear (log is def.)
;		units:  specifies the units
;			default is eflux
;		subtr:	for the line plots, subtracts the 90 deg data
;			from the 0 and 180.
;		angran:	sets the range of angles to include for the line plots
;			default is 30.
;		specsu:	subtracts the value at 90 deg (using angran) from the	
;			entire spectrogram
;		noline:	suppresses the line plots of energy
;		energi:	a vector of energies which will generate line plots of
;			pitch angle vs. counts.
;		var_la:	vector of tplot variables to put on plot
;		noB3:	doesn't use high resolution magnetic field data
;		nosun:  suppresses the anti-sun direction line
;Output:	The plot
;Last Modified by:	Arjun Raj (2-2-99)
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;FUNCTION:   get_excfg(t)
;INPUT:
;    t: double,  seconds since 1970.
;KEYWORDS:
;	advance:	advance to the next data point
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return an array of data times 
;			corresponding to data samples.
;PURPOSE:   returns an Eesa Extended Instrument Configuration data record.
;
;CREATED BY:	Peter Schroeder
;LAST MODIFIED: @(#)get_excfg.pro	1.1 99/04/19
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;PROCEDURE:  get_file_names,  fnames
;PURPOSE:  
;   Gets an array of filenames within a time range
;INPUT:
;   fnames:  named variable in which the output array of filenames is placed.
;KEYWORDS:
;   TIME_RANGE: Two element vector (double or string) specifying the time range.
;     If time range is not set, then "GET_TIMESPAN" will be called
;     to get a time range.
;   MASTERFILE: Use this keyword to pass in one of the following:
;	1) Name of a masterfile that contains times and associated 
;	     	filenames.  The file should have the format:
;yyyy-mm-dd/hh:mm:ss   yyyy-mm-dd/hh:mm:ss   fullpathfilename
;     		with one line for each file.
;	     (Hint: for CDF files, the masterfile can be created using the 
;	     UNIX program 'kpdfile' or the IDL procedure "MAKE_CDF_INDEX".)
;	2) Full path/file names with wildcard characters to search for
;		relevant files.  Input should be in the form:
;		/path/xxx* for files of form /path/xxx_date.
;	3) The name of a previously defined environment variable containing
;		data in the form of 1 or 2 above.
;   ROOT_DIR:   Optional root_directory of the masterfile.  This will properly
;      manage operating system dependancies.
;
;CREATED BY:	Davin Larson
;MODIFIED BY:	Peter Schroeder
;VERSION:	1.26 00/10/04 get_file_names.pro
; 
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;PROCEDURE:  get_file_names_ind,  fnames
;PURPOSE:  
;   Gets an array of filenames within a masterfile within a time range
;INPUT:
;   fnames:  named variable in which the output array of filenames is placed.
;KEYWORDS:
;   TIME_RANGE: Two element vector (double or string) specifying the time range.
;     If time range is not set, then "GET_TIMESPAN" will be called
;     to get a time range.
;   MASTERFILE: Name of a masterfile that contains times and associated 
;     filenames.  The file should have the format:
;yyyy-mm-dd/hh:mm:ss   yyyy-mm-dd/hh:mm:ss   fullpathfilename
;     with one line for each file.
;     (Hint: for CDF files, the masterfile can be created using the 
;     UNIX program 'kpdfile' or the IDL procedure "MAKE_CDF_INDEX".)
;   ROOT_DIR:   Optional root_directory of the masterfile.  This will properly
;      manage operating system dependancies.
;   NO_DUPLICATES:  (N;  integer)
;      when set the first N characters of file names are compared and only
;      the highest version is returned.
;
;CREATED BY:	Davin Larson
;VERSION:	@(#)get_file_names_ind.pro	1.1 97/06/23
; 
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;FUNCTION:   get_fpc(t)
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector than the
;	routine will get all samples in between the two times in the 
;	vector
;KEYWORDS:
;	advance:	advance to the next data point
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return and array of data times 
;			corresponding to data samples.
;PURPOSE:   returns a structure containing all data pertinent to a single
;  correlator sample.  See the file 3dp_help.doc for a more complete 
;  description of the structure.
;
;CREATED BY:	Jonathan Loran
;LAST MODIFICATION:	@(#)get_fpc.pro	1.4 01/29/98
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;PROCEDURE: 	get_frame_info
;PURPOSE:
;  Gets frame info data for WIND data files.
;INPUT:	
;  none, but "load_3dp_data" must be called 1st.
;KEYWORDS:
;  DATA:  named variable in which all data is returned.
;
;CREATED BY:	Davin Larson
;FILE:  get_eatod.pro
;VERSION:  1.4
;LAST MODIFICATION:  96/05/03
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;FUNCTION:   get_fspb(t)
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector than the
;	routine will get all samples in between the two times in the 
;	vector
;KEYWORDS:
;	advance:
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return and array of data times 
;			corresponding to data samples.
;PURPOSE:   returns  structure containing all data pertinent to a single
;  foil burst spectra.  See the file 3dp_help.doc for a more complete 
;  description of the structure.
;
;CREATED BY:	Robert D. Campbell
;FILENAME:	get_fspb.pro
;VERSION:	1.4
;LAST MODIFICATION:	96/04/09
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;FUNCTION:   get_fspc(t)
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector than the
;	routine will get all samples in between the two times in the 
;	vector
;KEYWORDS:
;	advance:
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return and array of data times 
;			corresponding to data samples.
;PURPOSE:   returns  structure containing all data pertinent to a single
;  foil spectra.  See the file 3dp_help.doc for a more complete 
;  description of the structure.
;
;CREATED BY:	Robert D. Campbell
;FILENAME:	get_fspc.pro
;VERSION:	1.8
;LAST MODIFICATION:	99/03/02
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;FUNCTION:   get_ft6t
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector than the
;   routine will get all samples in between the two times in the 
;   vector
;KEYWORDS:
;   advance:
;PURPOSE:  
;	 for omniazimuuth average flux if electrons, for survey plots
;	from SST foil+thick 3d data 
;	data from 402x packets
;	produces array (FT6) for tplot
;
;CREATED BY:    Robert D. Campbell
;FILENAME:  get_ft6t.pro
;VERSION:   1.2
;LAST MODIFICATION: 95/10/06
;
;NOTES: The procedure "load_3dp_data" must be 
;   called first.
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;PROCEDURE: 	get_hkp
;PURPOSE:
;    Gets housekeeping data for eesa and pesa;
;INPUT:	
;	none, but "load_3dp_data" must be called 1st.
;
;CREATED BY:	Davin Larson
;LAST MODIFICATION:	@(#)get_hkp.pro	1.16 01/06/06
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;FUNCTION:   get_mcfg(t)
;INPUT:
;    t: double,  seconds since 1970.
;KEYWORDS:
;	advance:	advance to the next data point
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return an array of data times 
;			corresponding to data samples.
;PURPOSE:   returns a SST Instrument Configuration data record.
;
;CREATED BY:	Peter Schroeder
;LAST MODIFIED: @(#)get_mcfg.pro	1.1 99/04/19
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;PROCEDURE:	get_mfi
;PURPOSE:	Gets key parameter data from the MFI experiment, such as Bexp,
;		Bmag,Bph, and Bth.
;INPUT:	
;	none but will call "timespan" and ask for input if
;	time range not already set
;KEYWORDS:
;	none
;
;CREATED BY:	Davin Larson
;LAST MODIFICATION:	@(#)get_mfi.pro	1.14 96/08/05
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;PROCEDURE: get_mom3d,dat
;INPUT:	
;   dat:function (string)   function that returns 3d data structures
;				function name must be "get_"+"dat"  
;				dat = 'pl' for get_pl, 
;				dat = 'el' for get_el, etc.
;KEYWORDS (all optional) 
;   erange:	intarr(2),     min,max energy bin numbers for integration
;PURPOSE:
;	To generate moment time series data for TPLOT 
;SEE ALSO:	
;	 "MOM3D"
;
;
;CREATED BY:   Davin Larson   
;LAST MODIFICATION:  %E%
;FILE: %M%
;VERSION %I%
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;PROCEDURE: get_momplph,dat
;INPUT:	
;   dat:function (string)   function that returns 3d data structures
;				function name must be "get_"+"dat"  
;				dat = 'pl' for get_pl, 
;				dat = 'el' for get_el, etc.
;KEYWORDS (all optional) 
;   erange:	intarr(2),     min,max energy bin numbers for integration
;PURPOSE:
;	To generate moment time series data for TPLOT 
;SEE ALSO:	
;	 "MOM3D"
;
;
;CREATED BY:   Davin Larson   
;LAST MODIFICATION:  %E%
;FILE: %M%
;VERSION %I%
;-


Last Modification =>  2009-09-25/00:46:59 UTC
;+
;*****************************************************************************************
;
;  FUNCTION :    get_moment3d.pro
;  PURPOSE  :    Calculates 3D particle moments for a given time range and returns data
;                  to TPLOT for later use.  This program only calculates up through
;                  the pressure tensor (2nd moment), but if you want through the 4th
;                  moment (R-Tensor), use mom3d.pro.
;
;  CALLED BY:   NA
;
;  CALLS:
;               get_??.pro  [?? = el, pl, ehb, etc.]
;               minmax.pro
;               data_cut.pro
;               moments_3d.pro
;               str_element.pro
;               get_3dp_structs.pro
;               add_magf2.pro
;               mom3d.pro
;               xyz_to_polar.pro
;               store_data.pro
;
;  REQUIRES:    Moments in 3DP libraries
;
;  INPUT:
;               GET_DAT    :  A 3d data structure such as those gotten from 
;                               get_el,get_pl,etc.
;
;  EXAMPLES:
;               get_moment3d,'plb',NAME='plb',TRANGE=tr3,MAG_NAME='wi_B3(GSE)'
;
;  KEYWORDS:  
;               ERANGE     :  Set to a 2-element array specifying the energy bins to use
;                               when calculating the particle moments
;               NAME       :  Set to a string defining the type of data (e.g. 'el')
;               TRANGE     :  Set to a 2-element double array in Unix times specifying
;                               the time range to get 3D data moments for
;               DENS_NAME  :  Set to a string TPLOT name associated with the density
;                               to use for calibrating the moment calculations
;               BKG        :  Defines the background estimates ???
;               POT_NAME   :  Set to a string TPLOT name associated with the spacecraft
;                               potential (eV) to use for calculating moments
;               MAG_NAME   :  Set to a string TPLOT name associated with the magnetic
;                               field to use when calculating moments
;               BINS       :  Set to a two element array defining the data bins to use
;               EESALOW    :  If set, program gets data from get_el.pro
;               PROTONS    :  If set, program gets data from get_pl.pro and assumes 
;                               counts represent only protons
;               ALPHAS     :  If set, program gets data from get_pl.pro and assumes
;                               counts represent alpha-particles (different mass
;                               estimates and charge estimates)
;               DATA       :  Set to a named variable program returns as an array
;                               of 3D data structures containing the moments
;               HEATF      :  If set, program calculates the heat flux for each moment
;
;   CHANGED:  1)  Davin Larson created                     [??/??/????   v1.0.0]
;             2)  Added keyword HEATF                      [09/14/2008   v1.0.1]
;             3)  Updated man page                         [02/08/2009   v1.0.2]
;             2)  Changed functions called                 [02/08/2009   v2.0.0]
;             4)  Did some minor "clean up"                [03/20/2009   v2.0.1]
;             5)  Updated man page                         [06/17/2009   v2.1.0]
;             6)  Changed program my_3dp_str_call_2.pro to get_3dp_structs.pro
;                                                          [09/24/2009   v2.2.0]
;
;   CREATED:  ??/??/????
;   CREATED BY:  Davin Larson
;    LAST MODIFIED:  09/24/2009   v2.2.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;FUNCTION:   get_ospb(t)
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector than the
;	routine will get all samples in between the two times in the 
;	vector
;KEYWORDS:
;	advance:
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return and array of data times 
;			corresponding to data samples.
;PURPOSE:   returns a structure containing all data pertinent to a single
;  open burst spectra.  See the file 3dp_help.doc for a more complete 
;  description of the structure.
;
;CREATED BY:	Robert D. Campbell
;FILENAME:	get_ospb.pro
;VERSION:	1.4
;LAST MODIFICATION:	96/04/09
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;FUNCTION:   get_ospc(t)
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector than the
;	routine will get all samples in between the two times in the 
;	vector
;KEYWORDS:
;	advance:
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return and array of data times 
;			corresponding to data samples.
;PURPOSE:   returns a structure containing all data pertinent to a single
;  open spectra.  See the file 3dp_help.doc for a more complete 
;  description of the structure.
;
;CREATED BY:	Robert D. Campbell
;FILENAME:	get_ospc.pro
;VERSION:	1.8
;LAST MODIFICATION:	99/03/02
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2008-06-25/00:33:44 UTC
;+
;FUNCTION:   get_ot6t
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector than the
;   routine will get all samples in between the two times in the 
;   vector
;KEYWORDS:
;   advance:
;PURPOSE:  
;	 for omniazimuuth average flux if electrons, for survey plots
;	from SST open+thick 3d data 
;	data from 402x packets
;	produces array (OT6) for tplot
;
;CREATED BY:    Robert D. Campbell
;FILENAME:  get_ot6t.pro
;VERSION:   1.2
;LAST MODIFICATION: 95/10/06
;
;NOTES: The procedure "load_3dp_data" must be 
;   called first.
;-


Last Modification =>  2008-06-25/00:33:45 UTC
;+
;PROCEDURE:	get_padflux,source,symm_dir
;PURPOSE:	Calculates flux from eesa_L and mfi data.  You are expected to 
;		have loaded these already using 
;		"GET_MFI".
;INPUT:
;	source:	(string) source of 3d data (ie. 'el')
;       symm_dir: (string) handle of symmetry direction data (ie. 'Bexp')
;KEYWORDS:
;	units:	units to convert to
;	bins:	bins to sum over
;
;CREATED BY:	Davin Larson
;LAST MODIFICATION:	@(#)get_padflux.pro	1.9 02/04/17
;-


Last Modification =>  2008-06-25/00:33:45 UTC
;+
;PROCEDURE:	get_padspec
;PURPOSE:
;  Creates "TPLOT" variable by summing 3D data over selected angle bins.
;
;INPUT:		data_str, a string(either 'eh','el','ph','pl','sf',or 'so' at
;		this point) telling which data to get.
;
;KEYWORDS:	bins: a keyword telling which bins to sum over
;		gap_time: time gap big enough to signify a data gap (def 200)
;		no_data: returns 1 if no_data else returns 0
;		units:	convert to these units if included
;               NAME:  New name of the Data Quantity
;               BKG:  A 3d data structure containing the background counts.
;               FLOOR:  Sets the minimum value of any data point to sqrt(bkg).
;               ETHRESH:
;               MISSING: value for bad data.
;
;CREATED BY:  Davin Larson
;FILE:  %M%
;VERSION:  %I%
;LAST MODIFICATION:  %E%
;
;NOTES:	  "LOAD_3DP_DATA" must be called first to load up WIND data.
;-


Last Modification =>  2008-06-25/00:33:45 UTC
;+
;FUNCTION:   get_pcfg(t)
;INPUT:
;    t: double,  seconds since 1970.
;KEYWORDS:
;	advance:	advance to the next data point
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return an array of data times 
;			corresponding to data samples.
;PURPOSE:   returns a Pesa Instrument Configuration data record.
;
;CREATED BY:	Peter Schroeder
;LAST MODIFIED: @(#)get_pcfg.pro	1.1 99/04/19
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2011-02-18/21:26:59 UTC
;+
;*****************************************************************************************
;
;  FUNCTION :   get_ph.pro
;  PURPOSE  :   This routine returns a 3D structure containing all data pertinent to a 
;                 single Pesa High 3D data sample.  See "3D_STRUCTURE" for a more 
;                 complete description of the structure.
;
;  CALLED BY:   
;               NA
;
;  CALLS:
;               wind_com.pro
;               ctime.pro
;               time_double.pro
;               gettime.pro
;               get_ph_mapcode.pro
;               add_all.pro
;
;  REQUIRES:    
;               1)  External Windlib libraries
;
;  INPUT:
;               T        :  Scalar or 2-Element Unix time telling the program what the
;                             start or start and stop times of interest are
;               ADD      :  Optional input telling program to add some data 
;                             structure tags to to the return structure
;
;  EXAMPLES:    
;               t  = '1995-01-01/00:00:00'
;               td = time_double(t)
;               ph = get_ph(td)
;
;  KEYWORDS:    
;               TIMES    :  If set, program returns the start times of all the Pesa
;                             Low distributions within the time range loaded
;               INDEX    :  Scalar integer telling program to select data by sample
;                             index instead of times
;               ADVANCE  :  If set, program gets the next distribution
;
;   CHANGED:  1)  Frank changed something                          [05/03/1999   v1.0.32]
;             2)  Fixed up man page, program, and other minor changes 
;                                                                  [02/18/2011   v1.1.0]
;
;   NOTES:      
;               1)  The procedure "load_3dp_data" must be called prior to use
;
;   CREATED:  ??/??/????
;   CREATED BY:  Frank Marcoline
;    LAST MODIFIED:  02/18/2011   v1.1.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-


Last Modification =>  2008-06-25/00:33:45 UTC
;+
;FUNCTION:   get_ph2(t)
;PURPOSE:
;  Returns a 3d structure containing all data pertinent to a single pesa high
;  or pesa high burst 3d sample.  
;  See "3D_STRUCTURE" for a more complete 
;  description of the structure.
;
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector then the
;       routine will get all samples in between the two times in the 
;       vector
;KEYWORDS:
;       index:          select data by sample index instead of by time.
;       times:          if non-zero, return and array of data times 
;                       corresponding to data samples.
;CREATED BY:    Art Hull
;LAST MODIFICATION:       @(#)get_ph2.pro	1.1 99/08/24
;
;NOTES: The procedure "load_3dp_data" must be 
;       called first.
;-


Last Modification =>  2011-02-18/22:20:36 UTC
;+
;*****************************************************************************************
;
;  FUNCTION :   get_ph_mapcode.pro
;  PURPOSE  :   Program returns the current mapcode for Pesa High relevant to the
;                 date defined by the input time T.  There are two files in the
;                 Windlib libraries referencing these codes:  map3d.c and map3d.h
;
;  CALLED BY:   
;               get_ph.pro
;
;  CALLS:
;               wind_com.pro
;               str_to_time.pro
;
;  REQUIRES:    
;               1)  External Windlib libraries
;
;  INPUT:
;               T        :  Scalar or 2-Element Unix time telling the program what the
;                             start or start and stop times of interest are
;
;  EXAMPLES:    
;               map0 = get_ph_mapcode(index=0)
;               map1 = get_ph_mapcode(str_to_time('1995-09-28/20'))
;               print,'Map0: ',map0,',    Map1: ',map1,format='(a,z,a,z)'
;               -->  Map0:     D4A4,    Map1:     D4FE
;
;  KEYWORDS:    
;               ADVANCE  :  If set, program gets the next distribution
;               INDEX    :  Scalar integer telling program to select data by sample
;                             index instead of times
;               OPTIONS  :  Options array that decides how the packet is chosen:
;                             options[1] GE  0 => get packet by index
;                             options[1] EQ -1 => get packet by time
;               PRESET   :  If set, T, ADVANCE, and INDEX are preset so that no
;                             changes will be made to these variables
;
;   CHANGED:  1)  Frank notes:  the telemetry rate changed from S2x to S1x
;                                                                  [09/28/1995   v1.0.?]
;             2)  Fixed up man page, program, and other minor changes 
;                                                                  [02/18/2011   v1.1.0]
;
;   NOTES:      
;               1)  The procedure "load_3dp_data" must be called prior to use
;               2)  See:  http://sprg.ssl.berkeley.edu/wind3dp/wi_3dp_log
;               3)  Currently only two possible outputs
;                     1: MAP11b, or 2: MAP11d  (constants defined in map3d.h)
;               4)  See also:  map3d.c and map3d.h
;
;   CREATED:  ??/??/????
;   CREATED BY:  Frank Marcoline
;    LAST MODIFIED:  02/18/2011   v1.1.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-


Last Modification =>  2011-02-18/21:31:06 UTC
;+
;*****************************************************************************************
;
;  FUNCTION :   get_phb.pro
;  PURPOSE  :   This routine returns a 3D structure containing all data pertinent to a 
;                 single Pesa High Burst 3D data sample.  See "3D_STRUCTURE" for a more 
;                 complete description of the structure.
;
;  CALLED BY:   
;               NA
;
;  CALLS:
;               wind_com.pro
;               ctime.pro
;               str_to_time.pro
;               gettime.pro
;               get_ph_mapcode.pro
;               add_all.pro
;
;  REQUIRES:    
;               1)  External Windlib libraries
;
;  INPUT:
;               T        :  Scalar or 2-Element Unix time telling the program what the
;                             start or start and stop times of interest are
;               ADD      :  Optional input telling program to add some data 
;                             structure tags to to the return structure
;
;  EXAMPLES:    
;               t   = '1995-01-01/00:00:00'
;               td  = time_double(t)
;               phb = get_phb(td)
;
;  KEYWORDS:    
;               TIMES    :  If set, program returns the start times of all the Pesa
;                             Low distributions within the time range loaded
;               INDEX    :  Scalar integer telling program to select data by sample
;                             index instead of times
;               ADVANCE  :  If set, program gets the next distribution
;
;   CHANGED:  1)  Peter changed something                          [05/03/1999   v1.0.16]
;             2)  Fixed up man page, program, and other minor changes 
;                                                                  [02/18/2011   v1.1.0]
;
;   NOTES:      
;               1)  The procedure "load_3dp_data" must be called prior to use
;
;   CREATED:  ??/??/????
;   CREATED BY:  Peter Schroeder
;    LAST MODIFIED:  02/18/2011   v1.1.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-


Last Modification =>  2011-02-18/22:28:19 UTC
;+
;*****************************************************************************************
;
;  FUNCTION :   get_phb_mapcode.pro
;  PURPOSE  :   Program returns the current mapcode for Pesa High relevant to the
;                 date defined by the input time T.  There are two files in the
;                 Windlib libraries referencing these codes:  map3d.c and map3d.h
;
;  CALLED BY:   
;               get_phb.pro
;
;  CALLS:
;               wind_com.pro
;               str_to_time.pro
;
;  REQUIRES:    
;               1)  External Windlib libraries
;
;  INPUT:
;               T        :  Scalar or 2-Element Unix time telling the program what the
;                             start or start and stop times of interest are
;
;  EXAMPLES:    
;               map0 = get_phb_mapcode(index=0)
;               map1 = get_phb_mapcode(str_to_time('1995-09-28/20'))
;               print,'Map0: ',map0,',    Map1: ',map1,format='(a,z,a,z)'
;               -->  Map0:     D4A4,    Map1:     D4FE
;
;  KEYWORDS:    
;               ADVANCE  :  If set, program gets the next distribution
;               INDEX    :  Scalar integer telling program to select data by sample
;                             index instead of times
;               OPTIONS  :  Options array that decides how the packet is chosen:
;                             options[1] GE  0 => get packet by index
;                             options[1] EQ -1 => get packet by time
;               PRESET   :  If set, T, ADVANCE, and INDEX are preset so that no
;                             changes will be made to these variables
;
;   CHANGED:  1)  Frank Marcoline notes:  the telemetry rate changed from S2x to S1x
;                                                                  [09/28/1995   v1.0.?]
;             2)  Fixed up man page, program, and other minor changes 
;                                                                  [02/18/2011   v1.1.0]
;
;   NOTES:      
;               1)  The procedure "load_3dp_data" must be called prior to use
;               2)  See:  http://sprg.ssl.berkeley.edu/wind3dp/wi_3dp_log
;               3)  Currently only two possible outputs
;                     1: MAP11b, or 2: MAP11d  (constants defined in map3d.h)
;               4)  See also:  map3d.c and map3d.h
;
;   CREATED:  ??/??/????
;   CREATED BY:  Peter Schroeder
;    LAST MODIFIED:  02/18/2011   v1.1.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-


Last Modification =>  2011-02-18/20:50:57 UTC
;+
;*****************************************************************************************
;
;  FUNCTION :   get_pl.pro
;  PURPOSE  :   This routine returns a 3D structure containing all data pertinent to a 
;                 single Pesa Low 3D data sample.  See "3D_STRUCTURE" for a more 
;                 complete description of the structure.
;
;  CALLED BY:   
;               NA
;
;  CALLS:
;               wind_com.pro
;               ctime.pro
;               gettime.pro
;               add_all.pro
;               get_pl_extra.pro
;
;  REQUIRES:    
;               1)  External Windlib libraries
;
;  INPUT:
;               T        :  Scalar or 2-Element Unix time telling the program what the
;                             start or start and stop times of interest are
;               ADD      :  Optional input telling program to add some data 
;                             structure tags to to the return structure
;
;  EXAMPLES:    
;               t  = '1995-01-01/00:00:00'
;               td = time_double(t)
;               pl = get_pl(td)
;
;  KEYWORDS:    
;               TIMES    :  If set, program returns the start times of all the Pesa
;                             Low distributions within the time range loaded
;               INDEX    :  Scalar integer telling program to select data by sample
;                             index instead of times
;               ADVANCE  :  If set, program gets the next distribution
;
;   CHANGED:  1)  Davin changed something                          [04/27/1999   v1.0.24]
;             2)  Fixed up man page, program, and other minor changes 
;                                                                  [02/18/2011   v1.1.0]
;
;   NOTES:      
;               1)  The procedure "load_3dp_data" must be called prior to use
;
;   CREATED:  ??/??/????
;   CREATED BY:  Davin Larson
;    LAST MODIFIED:  02/18/2011   v1.1.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-


Last Modification =>  2008-06-25/00:33:45 UTC
;+
;FUNCTION:   get_pl2(t)
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector then the
;       routine will get all samples in between the two times in the 
;       vector
;KEYWORDS:
;       index:          select data by sample index instead of by time.
;       times:          if non-zero, return and array of data times 
;                       corresponding to data samples.
;PURPOSE:   returns a 3d structure containing all data pertinent to a single
;  pesa low or pesa low burst 3d sample.  See "3D_STRUCTURE" for a more complete 
;  description of the structure.
;
;CREATED BY:    Art Hull
;LAST MODIFICATION:  @(#)get_pl2.pro	1.1 99/08/24
;
;NOTES: The procedure "load_3dp_data" must be 
;       called first.
;-


Last Modification =>  2011-02-18/20:50:55 UTC
;+
;*****************************************************************************************
;
;  FUNCTION :   get_plb.pro
;  PURPOSE  :   This routine returns a 3D structure containing all data pertinent to a 
;                 single Pesa Low Burst 3D data sample.  See "3D_STRUCTURE" for a more 
;                 complete description of the structure.
;
;  CALLED BY:   
;               NA
;
;  CALLS:
;               wind_com.pro
;               ctime.pro
;               gettime.pro
;               add_all.pro
;
;  REQUIRES:    
;               1)  External Windlib libraries
;
;  INPUT:
;               T        :  Scalar or 2-Element Unix time telling the program what the
;                             start or start and stop times of interest are
;               ADD      :  Optional input telling program to add some data 
;                             structure tags to to the return structure
;
;  EXAMPLES:    
;               t   = '1995-01-01/00:00:00'
;               td  = time_double(t)
;               plb = get_plb(td)
;
;  KEYWORDS:    
;               TIMES    :  If set, program returns the start times of all the Pesa
;                             Low distributions within the time range loaded
;               INDEX    :  Scalar integer telling program to select data by sample
;                             index instead of times
;               ADVANCE  :  If set, program gets the next distribution
;
;   CHANGED:  1)  Peter changed something                          [04/27/1999   v1.0.17]
;             2)  Fixed up man page, program, and other minor changes 
;                                                                  [02/18/2011   v1.1.0]
;
;   NOTES:      
;               1)  The procedure "load_3dp_data" must be called prior to use
;
;   CREATED:  ??/??/????
;   CREATED BY:  Peter Schroeder
;    LAST MODIFIED:  02/18/2011   v1.1.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-


Last Modification =>  2008-06-25/00:33:45 UTC
;+
;PROCEDURE:	get_pmom
;PURPOSE:	Gets moment data for pesa, including velocity,density,and 
;		temperature.
;INPUT:	
;	none, but "load_3dp_data" must be called first.
;KEYWORDS:
;   NONE.
;CREATED BY:	Davin Larson
;FILE:  get_pmom.pro
;VERSION:  1.13
;LAST MODIFICATION:  97/09/08
;-


Last Modification =>  2010-10-06/19:47:15 UTC
;+
;*****************************************************************************************
;
;  FUNCTION :   get_pmom2.pro
;  PURPOSE  :   Gets Pesa Low moment structures from onboard calculations and calibrates
;                 the data using a rough instrumental response reduction algorithm.
;
;  CALLED BY:   
;               NA
;
;  CALLS:
;               wind_com.pro
;               fix_pmom_spin_time.pro
;               read_asc.pro
;               interp.pro
;               store_data.pro
;               xyz_to_polar.pro
;               data_cut.pro
;               rot_mat.pro
;               rotate_tensor.pro
;               tnames.pro
;               options.pro
;
;  REQUIRES:    
;               UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               NA
;
;  EXAMPLES:    
;               NA
;
;  KEYWORDS:    
;               PROTONS     :  If set, program gets data from get_pl.pro and assumes 
;                                counts represent only protons
;               ALPHAS      :  If set, program gets data from get_pl.pro and assumes
;                                counts represent alpha-particles (different mass
;                                estimates and charge estimates)
;               POLAR       :  If set, program changes particle velocities into
;                                polar coordinates
;               PREFIX      :  Scalar string to prepend the TPLOT handles
;               MAGF        :  Set to a named variable to return the magnetic field
;                                used to rotate the data
;               NO_TPLOT    :  If set, program will not send data to TPLOT
;               MAGNAME     :  Scalar string defining the TPLOT handle associated with
;                                the GSE magnetic field you wish to use to rotate data
;               NOFIXTIME   :  
;               NOFIXWIDTH  :  If set, program will not calibrate the data by removing
;                                the instrument response
;               NOFIXMCP    :  If set, program will not calibrate the data using the
;                                multi-channel plate efficiency files
;               TIME_SHIFT  :  Scalar double used to offset the times
;
;   CHANGED:  1)  Davin Larson created                     [??/??/????   v1.0.0]
;             2)  Davin Larson changed something...        [11/01/2002   v1.0.4]
;             3)  Re-wrote and cleaned up                  [10/06/2010   v1.1.0]
;
;   NOTES:      
;               1)  load_3dp_data.pro must be called 1st.
;
;   CREATED:  ??/??/????
;   CREATED BY:  Davin Larson
;    LAST MODIFIED:  10/06/2010   v1.1.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-


Last Modification =>  2008-06-25/00:33:45 UTC
;+
;PROCEDURE:	get_sdotb
;PURPOSE:	
;INPUT:		none
;KEYWORDS:	none
;CREATED BY:	Davin Larson
;LAST MODIFICATION:	@(#)get_sdotb.pro	1.3 95/08/24
;-


Last Modification =>  2008-06-25/00:33:45 UTC
;+
;FUNCTION:   get_sf(t)
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector then the
;	routine will get all samples in between the two times in the 
;	vector
;KEYWORDS:
;	chanmode:	if set, load only channels that are read out for
;			the selected packet.
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return and array of data times 
;			corresponding to data samples.
;PURPOSE:   returns a 3d structure containing all data pertinent to a single
;  SST Foil sample.  See "3D_STRUCTURE" for a more complete 
;  description of the structure.
;
;CREATED BY:	Peter Schroeder
;LAST MODIFIED:	@(#)get_sf.pro	1.28 99/03/02
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2008-06-25/00:33:45 UTC
;+
;FUNCTION:   get_sfb(t)
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector then the
;	routine will get all samples in between the two times in the 
;	vector
;KEYWORDS:
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return and array of data times 
;			corresponding to data samples.
;PURPOSE:   returns a 3d structure containing all data pertinent to a single
;  SST Foil burst sample.  See "3D_STRUCTURE" for a more complete 
;  description of the structure.
;
;CREATED BY:	Peter Schroeder
;LAST MODIFIED:	%W% %E%
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2008-06-25/00:33:45 UTC
;+
;FUNCTION:   get_sft(t)
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector then the
;	routine will get all samples in between the two times in the 
;	vector
;KEYWORDS:
;	chanmode:	if set, load only channels that are read out for
;			the selected packet.
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return and array of data times 
;			corresponding to data samples.
;PURPOSE:   returns a 3d structure containing all data pertinent to a single
;  SST Foil+Thick sample.  See "3D_STRUCTURE" for a more complete 
;  description of the structure.
;
;CREATED BY:	Peter Schroeder
;LAST MODIFIED:	@(#)get_sft.pro	1.11 05/09/06
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2008-06-25/00:33:45 UTC
;+
;FUNCTION:   get_so(t)
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector then the
;	routine will get all samples in between the two times in the 
;	vector
;KEYWORDS:
;       chanmode:       if set, load only channels that are read out for
;                       the selected packet.
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return and array of data times 
;			corresponding to data samples.
;PURPOSE:   returns a 3d structure containing all data pertinent to a single
;  SST Open sample.  See "3D_STRUCTURE" for a more complete 
;  description of the structure.
;
;CREATED BY:	Peter Schroeder
;LAST MODIFIED:	@(#)get_so.pro	1.21 99/03/02
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2008-06-25/00:33:45 UTC
;+
;FUNCTION:   get_sob(t)
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector then the
;	routine will get all samples in between the two times in the 
;	vector
;KEYWORDS:
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return and array of data times 
;			corresponding to data samples.
;PURPOSE:   returns a 3d structure containing all data pertinent to a single
;  SST Open Burst sample.  See "3D_STRUCTURE" for a more complete 
;  description of the structure.
;
;CREATED BY:	Peter Schroeder
;LAST MODIFIED:	@(#)get_sob.pro	1.8 99/03/02
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2008-06-25/00:33:45 UTC
;+
;FUNCTION:   get_sot(t)
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector then the
;	routine will get all samples in between the two times in the 
;	vector
;KEYWORDS:
;	chanmode:	if set, load only channels that are read out for
;			the selected packet.
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return and array of data times 
;			corresponding to data samples.
;PURPOSE:   returns a 3d structure containing all data pertinent to a single
;  SST+Thick Open sample.  See "3D_STRUCTURE" for a more complete 
;  description of the structure.
;
;CREATED BY:	Peter Schroeder
;LAST MODIFIED:	@(#)get_sot.pro	1.8 99/03/02
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2010-11-29/18:53:18 UTC
;+
;*****************************************************************************************
;
;  FUNCTION :   get_spec.pro
;  PURPOSE  :   Creates "TPLOT" variable by summing 3D data over selected angle bins.
;
;  CALLED BY:   
;               NA
;
;  CALLS:
;               dat_3dp_str_names.pro
;               dat_3dp_energy_bins.pro
;               get_??.pro
;               str_element.pro
;               store_data.pro
;               interp.pro
;               gettime.pro
;               minmax.pro
;               wind_3dp_units.pro
;               conv_units.pro
;               time_string.pro
;               sub3d.pro
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               DATA_STR  :  [string] Specify the type of structure you wish to 
;                               get the data for [i.e. 'el','eh','elb',etc.]
;
;  EXAMPLES:    
;               
;
;  KEYWORDS:    
;               BINS      :  Keyword telling which data bins to sum over
;               GAP_TIME  :  Time gap big enough to signify a data gap (def 200)
;               NO_DATA   :  Returns 1 if no_data else returns 0
;               UNITS     :  Convert to these units if included
;               NAME      :  New name of the Data Quantity
;               BKG       :  A 3d data structure containing the background counts.
;               MISSING   :  Value for bad data.
;               TRANGE    :  [Double] 2 element array specifying the range over 
;                              which to get data structures [Unix time]
;               FLOOR     :  Sets the minimum value of any data point to sqrt(bkg).
;               DAT_ARR   :  N-Element array of data structures from get_??.pro
;                              [?? = 'el','eh','elb',etc.]
;               KEV       :  If set, energy bin units are changed to keV instead of eV
;               _EXTRA    :  
;
;   CHANGED:  1)  REE - added bkg subtraction                     [10/05/1995   v1.0.?]
;             2)  JML - now uses index feature of get_* to walk through the data
;                                                                 [04/09/1996   v1.0.?]
;             3)  ??? - Mods plus clean up.                       [05/06/1996   v1.0.?]
;             4)  ??? - did something                             [04/17/2002   v1.0.48]
;             5)  Updated man page and cleaned up 
;                   and added keyword:  DAT_ARR                   [11/23/2010   v1.1.0]
;             6)  Fixed issue where stored energy array was 1-D when it's supposed to be
;                   2-D                                           [11/29/2010   v1.1.1]
;
;   NOTES:      
;               1)  "LOAD_3DP_DATA" must be called first to load up WIND data.
;
;   CREATED:  ??/??/????
;   CREATED BY:  Jasper Halekas
;    LAST MODIFIED:  11/29/2010   v1.1.1
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-


Last Modification =>  2008-06-25/00:33:45 UTC
;+
;PROCEDURE:	get_symm
;PURPOSE:	Gets symmetry direction of magnetic field
;INPUT:
;	none
;KEYWORDS:
;	use_mag:
;	use_q:
;	use_dir:
;	time:
;	stheta:
;	sphi:
;
;CREATED BY: 	Davin Larson
;LAST MODIFICATION:	@(#)get_symm.pro	1.5 95/08/24
;-


Last Modification =>  2008-06-25/00:33:45 UTC
;+
;PROCEDURE:	get_timespan
;PURPOSE:	To get timespan from tplot_com or by using timespan, if 
;		tplot time range not set.
;INPUT:		
;	t, actually returned to you
;KEYWORDS:	
;	none
;
;SEE ALSO:	"timespan"
;
;CREATED BY:	Davin Larson
;LAST MODIFICATION:	@(#)get_timespan.pro	1.9 97/06/02
;
;-


Last Modification =>  2008-06-25/00:33:45 UTC
;+
;FUNCTION:   get_tspc(t)
;INPUT:
;    t: double,  seconds since 1970. If this time is a vector than the
;	routine will get all samples in between the two times in the 
;	vector
;KEYWORDS:
;	advance:
;	index:		select data by sample index instead of by time.
;	times:		if non-zero, return and array of data times 
;			corresponding to data samples.
;PURPOSE:   returns a  structure containing all data pertinent to a single
;  f+t & o+t spectra.  See the file 3dp_help.doc for a more complete 
;  description of the structure.
;
;CREATED BY:	Robert D. Campbell
;LAST MODIFICATION:	%W% %E%
;
;NOTES: The procedure "load_3dp_data" must be 
;	called first.
;-


Last Modification =>  2008-06-25/00:33:45 UTC
;+
;NAME:		get_v_cr_spec
;CALL:		get_v_cr_spec,timevectorofstrings,[keywords]
;KEYWORDS:	inst: tells which instrument to use ('el','ph2',etc.), def. is 'el'
;		xrange: the xrange
;		range: the yrange
;		units: the units ('df','eflux',etc.)
;		zlog: specifies a logarithmic y axis.  Is called zlog for consistency
;			THERE MAY BE PROBLEMS IF ZLOG IS NOT SET
;		b3: uses b3 data
;		plotenergy: plots with x as energy rather than velocity
;		nosubtract: doesn't subtract bulk flow
;		vel: the velocity to use for bulk flow, def. is v_3d_ph2
;		step: tells the program to step the data.  If it's set to 1, then
;			it will do automatic stepping.
;		smooth: smooths the data
;		resolution: resolution of interpolated grid
;		gettimes: returns the times used
;		picktimes: let's the user pick times to use
;		onecnt: plots the one count lines
;		erange: sets the energy range used
;		var_label: puts the variable labels on for each time
;CREATED:	Arjun Raj (8-20-97)
;-


Last Modification =>  2008-06-25/00:33:45 UTC
;+
;NAME:			get_v_spec_t
;PURPOSE:		creates a velocity or energy spectrogram
;			with v perp and v para as x and y, and the
;			specified units as z (color axis).
;			Also tranforms into bulk flow frame (unlike get_v_spec)
;CALL:			ex: get_v_spec_t,get_el('20:31'),[keywords]
;KEYWORDS:		XRANGE: vector specifying the xrange
;			RANGE: vector specifying the color range
;			UNITS: specifies the units ('eflux','df',etc.)
;			ZLOG: specifies a logarithmic Z axis
;			B3: uses B3 data
;			VAR_LA: vector of tplot variables to show on plot
;			POSITION: positions the plot using a 4-vector
;			ERANGE: specifies the energy range to be used
;			NOFILL: doesn't fill the contour plot
;			NLINES: says how many lines to use if using NOFILL
;			SHOWDATA: plots all the data points over the contour
;			PLOTENERGY: plots using energy instead of velocity
;			VEL: tplot variable containing the velocity data
;			     (default is 'n_3d_ph2')
;			GRID: grids the data using triangulate and trigrid
;			NOSUBTRACT: doesn't transform into bulk flow frame
;			CROSS: puts up cross section line plots
;			RESOLUTION: resolution of the mesh (default is 51)
;			SMOOTH: smoothes the data using smooth
;			ONECNT: plots the one count data
;			SUNDIR: plots the sun direction line
;LAST MODIFIED:		8-18-97
;CREATED BY:		Arjun Raj
;-


Last Modification =>  2009-06-21/21:32:24 UTC
;+
;*****************************************************************************************
;
;  FUNCTION :   get_ylimits.pro
;  PURPOSE  :   Calculates appropriate ylimits for a string array of "TPLOT" variables
;                 to be plotted in the same panel.
;
;  CALLED BY: 
;               tplot.pro
;
;  CALLS:
;               str_element.pro
;               get_data.pro
;               ndimen.pro
;               minmax.pro
;
;  REQUIRES:    NA
;
;  INPUT:
;               DATASTR  :  N-Element string array of TPLOT variables
;               LIMITS   :  Limit structure to be modified [usually the limits
;                             structure of the TPLOT variable whose data field 
;                             is a string array of TPLOT variables]
;               TRG      :  2-Element array of Unix times defining time range 
;                             over which to calculate the Y-Axis limits
;
;  EXAMPLES:    NA
;
;  KEYWORDS:    NA
;
;   CHANGED:  1)  Peter Schroeder changed something...    [04/17/2002   v1.0.?]
;             2)  Re-wrote and cleaned up                 [06/21/2009   v1.1.0]
;
;   CREATED:  ??/??/????
;   CREATED BY:  Peter Schroeder
;    LAST MODIFIED:  06/21/2009   v1.1.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-


Last Modification =>  2011-02-18/22:53:56 UTC
;+
;*****************************************************************************************
;
;  FUNCTION :   gettime.pro
;  PURPOSE  :   Returns a Unix time for various types of inputs.
;
;  CALLED BY:   
;               NA
;
;  CALLS:
;               tplot_com.pro
;               str_element.pro
;               time_string.pro
;               ctime.pro
;               time_double.pro
;
;  REQUIRES:    
;               1)  UMN Modified Wind/3DP IDL Libraries
;
;  INPUT:
;               X         :  Null, double, string, or integer [see examples]
;
;  EXAMPLES:    
;               t = gettime('95-7-4/12:34')
;               t = gettime('12:34:56')          ; => (get time on reference date)
;               t = gettime(t+300.)              ; => (assumes t is a double)
;               t = gettime(10)                  ; => (t = 10 am on reference date)
;               t = gettime(/KEYBOARD)           ; => (prompts user for time on reference date)
;               t = gettime(KEYBOARD='Enter time: ')
;               t = gettime(/CURSOR)             ; => (select time using cursor in tplot routine)
;
;  KEYWORDS:    
;               KEYBOARD  :  If non-zero, then user is prompted to enter a time
;                              If string, then the string is used as a prompt
;               CURSOR    :  If set, then user selects time with cursor
;               VALUES    :  If CURSOR also set, then returns data values for time chosen
;               REFDATE   :  Scalar string used to define the reference date
;                              [Format = 'yyyy-mm-dd']
;
;   CHANGED:  1)  Davin changed something                          [08/02/1998   v1.0.17]
;             2)  Fixed up man page, program, and other minor changes 
;                                                                  [02/18/2011   v1.1.0]
;
;   NOTES:      
;               1)  The procedure "load_3dp_data" must be called prior to use
;
;   CREATED:  ??/??/????
;   CREATED BY:  Davin Larson
;    LAST MODIFIED:  02/18/2011   v1.1.0
;    MODIFIED BY: Lynn B. Wilson III
;
;*****************************************************************************************
;-


